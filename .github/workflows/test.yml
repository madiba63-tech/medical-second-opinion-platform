name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test:ci

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
        retention-days: 30

  test-integration:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run integration tests
      run: |
        npm run test:ci -- --testPathPattern="integration|flow"
        npm run test:ci -- --testPathPattern="api"

    - name: Run component tests
      run: npm run test:ci -- --testPathPattern="components"

    - name: Run utility tests
      run: npm run test:ci -- --testPathPattern="utils"

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run dependency check
      run: npx audit-ci --moderate

  performance:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Run performance tests
      run: |
        # Add performance testing commands here
        echo "Performance tests completed"

  report:
    runs-on: ubuntu-latest
    needs: [test, test-integration, security, performance]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download test artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Generate test report
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Report" >> $GITHUB_STEP_SUMMARY
        if [ -f "artifacts/test-results-20.x/coverage/lcov-report/index.html" ]; then
          echo "✅ Coverage report generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Coverage report not found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.test-integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let summary = '## Test Results Summary\n\n';
          
          // Add test results
          summary += '### Test Status\n';
          summary += `- Unit Tests: ${context.job === 'test' ? '✅ Passed' : '❌ Failed'}\n`;
          summary += `- Integration Tests: ${context.job === 'test-integration' ? '✅ Passed' : '❌ Failed'}\n`;
          summary += `- Security Tests: ${context.job === 'security' ? '✅ Passed' : '❌ Failed'}\n`;
          summary += `- Performance Tests: ${context.job === 'performance' ? '✅ Passed' : '❌ Failed'}\n\n`;
          
          // Add coverage info if available
          if (fs.existsSync('artifacts/test-results-20.x/coverage/lcov-report/index.html')) {
            summary += '### Coverage Report\n';
            summary += '✅ Coverage report generated successfully\n';
            summary += '📊 View detailed coverage in the artifacts\n\n';
          }
          
          summary += '---\n';
          summary += '*This comment was automatically generated by the test workflow*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

