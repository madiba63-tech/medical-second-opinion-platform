
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProfessionalScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  alternateEmail: 'alternateEmail',
  title: 'title',
  level: 'level',
  yearsOfExperience: 'yearsOfExperience',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  verifiedBy: 'verifiedBy',
  suspendedAt: 'suspendedAt',
  suspendedUntil: 'suspendedUntil',
  suspensionReason: 'suspensionReason',
  biography: 'biography',
  expertise: 'expertise',
  researchInterests: 'researchInterests',
  publications: 'publications',
  awards: 'awards',
  availabilityStatus: 'availabilityStatus',
  maxCaseLoad: 'maxCaseLoad',
  currentCaseCount: 'currentCaseCount',
  preferredCommunication: 'preferredCommunication',
  timeZone: 'timeZone',
  workingHours: 'workingHours',
  profilePictureUrl: 'profilePictureUrl',
  profileVisibility: 'profileVisibility',
  acceptsNewCases: 'acceptsNewCases',
  requiresPreApproval: 'requiresPreApproval',
  userId: 'userId',
  metadata: 'metadata',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hashedPassword: 'hashedPassword',
  emailVerified: 'emailVerified',
  emailVerifiedAt: 'emailVerifiedAt',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorSecret: 'twoFactorSecret',
  twoFactorMethod: 'twoFactorMethod',
  lastLoginAt: 'lastLoginAt',
  lastLoginIP: 'lastLoginIP',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  passwordChangedAt: 'passwordChangedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalLicenseScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  licenseNumber: 'licenseNumber',
  licenseType: 'licenseType',
  issuingAuthority: 'issuingAuthority',
  issuingState: 'issuingState',
  issuingCountry: 'issuingCountry',
  issuedDate: 'issuedDate',
  expirationDate: 'expirationDate',
  isActive: 'isActive',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  verificationNotes: 'verificationNotes',
  documentUrl: 'documentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalSpecializationScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  specialty: 'specialty',
  subspecialty: 'subspecialty',
  level: 'level',
  boardName: 'boardName',
  certificationDate: 'certificationDate',
  expirationDate: 'expirationDate',
  certificationNumber: 'certificationNumber',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  documentUrl: 'documentUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalAffiliationScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  institutionName: 'institutionName',
  institutionType: 'institutionType',
  department: 'department',
  position: 'position',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  isPrimary: 'isPrimary',
  address: 'address',
  phone: 'phone',
  website: 'website',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  verificationContact: 'verificationContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalCredentialScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  credentialType: 'credentialType',
  credentialName: 'credentialName',
  issuingOrganization: 'issuingOrganization',
  issuedDate: 'issuedDate',
  expirationDate: 'expirationDate',
  credentialNumber: 'credentialNumber',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  documentUrl: 'documentUrl',
  description: 'description',
  continuingEducationHours: 'continuingEducationHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalAvailabilityScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  timeZone: 'timeZone',
  availabilityType: 'availabilityType',
  maxCases: 'maxCases',
  isRecurring: 'isRecurring',
  effectiveFrom: 'effectiveFrom',
  effectiveUntil: 'effectiveUntil',
  isActive: 'isActive',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalReviewScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  reviewerId: 'reviewerId',
  reviewerType: 'reviewerType',
  caseId: 'caseId',
  rating: 'rating',
  title: 'title',
  review: 'review',
  expertise: 'expertise',
  communication: 'communication',
  timeliness: 'timeliness',
  professionalism: 'professionalism',
  isPublic: 'isPublic',
  isVerified: 'isVerified',
  moderationStatus: 'moderationStatus',
  moderatedBy: 'moderatedBy',
  moderatedAt: 'moderatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  createdAt: 'createdAt'
};

exports.Prisma.ProfessionalStatisticScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  totalCases: 'totalCases',
  completedCases: 'completedCases',
  averageRating: 'averageRating',
  averageResponseTime: 'averageResponseTime',
  patientSatisfaction: 'patientSatisfaction',
  peerRating: 'peerRating',
  qualityScore: 'qualityScore',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProfessionalLevel = exports.$Enums.ProfessionalLevel = {
  RESIDENT: 'RESIDENT',
  FELLOW: 'FELLOW',
  ATTENDING: 'ATTENDING',
  PROFESSOR: 'PROFESSOR',
  EMERITUS: 'EMERITUS'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  IN_REVIEW: 'IN_REVIEW',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED',
  SUSPENDED: 'SUSPENDED',
  EXPIRED: 'EXPIRED'
};

exports.AvailabilityStatus = exports.$Enums.AvailabilityStatus = {
  AVAILABLE: 'AVAILABLE',
  BUSY: 'BUSY',
  AWAY: 'AWAY',
  DO_NOT_DISTURB: 'DO_NOT_DISTURB',
  OFFLINE: 'OFFLINE'
};

exports.CommunicationChannel = exports.$Enums.CommunicationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PHONE: 'PHONE',
  IN_APP: 'IN_APP'
};

exports.SpecializationLevel = exports.$Enums.SpecializationLevel = {
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  FELLOWSHIP: 'FELLOWSHIP',
  BOARD_CERTIFIED: 'BOARD_CERTIFIED'
};

exports.Prisma.ModelName = {
  Professional: 'Professional',
  User: 'User',
  ProfessionalLicense: 'ProfessionalLicense',
  ProfessionalSpecialization: 'ProfessionalSpecialization',
  ProfessionalAffiliation: 'ProfessionalAffiliation',
  ProfessionalCredential: 'ProfessionalCredential',
  ProfessionalAvailability: 'ProfessionalAvailability',
  ProfessionalReview: 'ProfessionalReview',
  UserSession: 'UserSession',
  AuditLog: 'AuditLog',
  ProfessionalStatistic: 'ProfessionalStatistic'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
