
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  caseNumber: 'caseNumber',
  customerId: 'customerId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  email: 'email',
  phone: 'phone',
  title: 'title',
  description: 'description',
  chiefComplaint: 'chiefComplaint',
  category: 'category',
  medicalHistory: 'medicalHistory',
  currentMedications: 'currentMedications',
  allergies: 'allergies',
  familyHistory: 'familyHistory',
  status: 'status',
  priority: 'priority',
  urgencyReason: 'urgencyReason',
  submittedAt: 'submittedAt',
  reviewStartedAt: 'reviewStartedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  assignedProfessionalId: 'assignedProfessionalId',
  assignedAt: 'assignedAt',
  qualityScore: 'qualityScore',
  completenessScore: 'completenessScore',
  metadata: 'metadata',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  version: 'version'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  originalFilename: 'originalFilename',
  filename: 'filename',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  fileExtension: 'fileExtension',
  documentType: 'documentType',
  category: 'category',
  description: 'description',
  cloudProvider: 'cloudProvider',
  bucketName: 'bucketName',
  objectKey: 'objectKey',
  storageRegion: 'storageRegion',
  status: 'status',
  processingStartedAt: 'processingStartedAt',
  processingCompletedAt: 'processingCompletedAt',
  processingError: 'processingError',
  textContent: 'textContent',
  ocrConfidence: 'ocrConfidence',
  pageCount: 'pageCount',
  encryptionStatus: 'encryptionStatus',
  checksumSHA256: 'checksumSHA256',
  virusScanStatus: 'virusScanStatus',
  virusScanAt: 'virusScanAt',
  isPublic: 'isPublic',
  accessPermissions: 'accessPermissions',
  metadata: 'metadata',
  uploadedByType: 'uploadedByType',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentExtractionScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  extractionType: 'extractionType',
  extractedData: 'extractedData',
  confidence: 'confidence',
  extractorName: 'extractorName',
  extractorVersion: 'extractorVersion',
  processingTime: 'processingTime',
  createdAt: 'createdAt'
};

exports.Prisma.CaseStatusHistoryScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  fromStatus: 'fromStatus',
  toStatus: 'toStatus',
  reason: 'reason',
  notes: 'notes',
  changedByType: 'changedByType',
  changedById: 'changedById',
  createdAt: 'createdAt'
};

exports.Prisma.CaseAssignmentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  professionalId: 'professionalId',
  assignmentType: 'assignmentType',
  specialization: 'specialization',
  isActive: 'isActive',
  assignedAt: 'assignedAt',
  acceptedAt: 'acceptedAt',
  completedAt: 'completedAt',
  declinedAt: 'declinedAt',
  priority: 'priority',
  estimatedHours: 'estimatedHours',
  deadlineAt: 'deadlineAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseReviewScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  reviewerId: 'reviewerId',
  reviewerType: 'reviewerType',
  reviewType: 'reviewType',
  findings: 'findings',
  diagnosis: 'diagnosis',
  recommendations: 'recommendations',
  confidenceScore: 'confidenceScore',
  reviewDuration: 'reviewDuration',
  status: 'status',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TempCaseSubmissionScalarFieldEnum = {
  id: 'id',
  patientData: 'patientData',
  caseData: 'caseData',
  documentReferences: 'documentReferences',
  submissionToken: 'submissionToken',
  expiresAt: 'expiresAt',
  convertedToCaseId: 'convertedToCaseId',
  convertedAt: 'convertedAt',
  clientIP: 'clientIP',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CaseCategory = exports.$Enums.CaseCategory = {
  ONCOLOGY: 'ONCOLOGY',
  CARDIOLOGY: 'CARDIOLOGY',
  NEUROLOGY: 'NEUROLOGY',
  ORTHOPEDICS: 'ORTHOPEDICS',
  DERMATOLOGY: 'DERMATOLOGY',
  RADIOLOGY: 'RADIOLOGY',
  PATHOLOGY: 'PATHOLOGY',
  GENERAL_MEDICINE: 'GENERAL_MEDICINE',
  PEDIATRICS: 'PEDIATRICS',
  SURGERY: 'SURGERY',
  OTHER: 'OTHER'
};

exports.CaseStatus = exports.$Enums.CaseStatus = {
  DRAFT: 'DRAFT',
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ASSIGNED: 'ASSIGNED',
  IN_ANALYSIS: 'IN_ANALYSIS',
  AWAITING_PROFESSIONAL: 'AWAITING_PROFESSIONAL',
  PROFESSIONAL_REVIEWING: 'PROFESSIONAL_REVIEWING',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.CasePriority = exports.$Enums.CasePriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  MEDICAL_RECORD: 'MEDICAL_RECORD',
  LAB_RESULT: 'LAB_RESULT',
  IMAGING_STUDY: 'IMAGING_STUDY',
  PATHOLOGY_REPORT: 'PATHOLOGY_REPORT',
  PRESCRIPTION: 'PRESCRIPTION',
  DISCHARGE_SUMMARY: 'DISCHARGE_SUMMARY',
  CONSULTATION_REPORT: 'CONSULTATION_REPORT',
  OTHER: 'OTHER'
};

exports.DocumentStatus = exports.$Enums.DocumentStatus = {
  UPLOADED: 'UPLOADED',
  PROCESSING: 'PROCESSING',
  PROCESSED: 'PROCESSED',
  FAILED: 'FAILED',
  ARCHIVED: 'ARCHIVED'
};

exports.Prisma.ModelName = {
  Case: 'Case',
  Document: 'Document',
  DocumentExtraction: 'DocumentExtraction',
  CaseStatusHistory: 'CaseStatusHistory',
  CaseAssignment: 'CaseAssignment',
  CaseReview: 'CaseReview',
  TempCaseSubmission: 'TempCaseSubmission'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
