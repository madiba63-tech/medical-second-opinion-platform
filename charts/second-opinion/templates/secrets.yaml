# Kubernetes Secrets template for sensitive configuration
# Following v2.0 Architecture requirements for security and secrets management

apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-database-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: database-secret
type: Opaque
stringData:
  # PostgreSQL credentials
  DATABASE_URL: "postgresql://{{ .Values.postgresql.auth.username }}:{{ .Values.postgresql.auth.password }}@{{ include "postgresql.primary.fullname" .Subcharts.postgresql }}:5432/{{ .Values.postgresql.auth.database }}"
  POSTGRES_USER: {{ .Values.postgresql.auth.username | quote }}
  POSTGRES_PASSWORD: {{ .Values.postgresql.auth.password | quote }}
  POSTGRES_DB: {{ .Values.postgresql.auth.database | quote }}

{{- if .Values.redis.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-redis-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis-secret
type: Opaque
stringData:
  REDIS_URL: "redis://:{{ .Values.redis.auth.password }}@{{ include "redis.fullname" .Subcharts.redis }}-master:6379"
  REDIS_PASSWORD: {{ .Values.redis.auth.password | quote }}
{{- end }}

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-application-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: app-secret
type: Opaque
stringData:
  # Authentication secrets
  JWT_SECRET: {{ randAlphaNum 32 | b64enc | quote }}
  NEXTAUTH_SECRET: {{ randAlphaNum 32 | b64enc | quote }}
  NEXTAUTH_URL: "https://{{ (index .Values.app.ingress.hosts 0).host }}"
  
  # Encryption keys
  ENCRYPTION_KEY: {{ randAlphaNum 32 | quote }}
  
  # External API keys (to be set during deployment)
  OPENAI_API_KEY: ""
  ANTHROPIC_API_KEY: ""
  
  # Cloud provider credentials (managed by external secret operator in production)
  {{- if eq .Values.global.cloudProvider "aws" }}
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  {{- else if eq .Values.global.cloudProvider "azure" }}
  AZURE_CLIENT_ID: ""
  AZURE_CLIENT_SECRET: ""
  {{- else if eq .Values.global.cloudProvider "gcp" }}
  GCP_SERVICE_ACCOUNT_KEY: ""
  {{- end }}

{{- if .Values.monitoring.grafana.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-monitoring-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: monitoring-secret
type: Opaque
stringData:
  # Grafana admin password
  GF_SECURITY_ADMIN_PASSWORD: {{ .Values.monitoring.grafana.adminPassword | quote }}
  
  # Alert manager secrets
  SLACK_WEBHOOK_URL: ""
  PAGERDUTY_INTEGRATION_KEY: ""
  
  # SMTP credentials for alerting
  SMTP_HOST: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USERNAME: ""
  SMTP_PASSWORD: ""
{{- end }}

---
# TLS certificates (managed by cert-manager in production)
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-tls
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: tls-secret
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # Certificates will be managed by cert-manager
  tls.crt: ""
  tls.key: ""

{{- if .Values.global.imagePullSecrets }}
---
# Image pull secrets for private registry
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "second-opinion.fullname" . }}-registry-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: registry-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ include "imagePullSecret" . }}
{{- end }}