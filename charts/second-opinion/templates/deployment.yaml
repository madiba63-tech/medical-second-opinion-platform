# Kubernetes Deployment template for the main application
# Following v2.0 Architecture requirements for stateless, scalable deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "second-opinion.fullname" . }}-app
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: web
  annotations:
    deployment.kubernetes.io/revision: "{{ .Values.app.image.tag }}"
    description: "Main application deployment for the AI-Powered Medical Second Opinion Platform"
spec:
  replicas: {{ .Values.app.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "second-opinion.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        {{- include "second-opinion.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: web
        version: {{ .Values.app.image.tag | quote }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.app.service.targetPort }}"
        prometheus.io/path: "/api/metrics"
        {{- if .Values.serviceMesh.enabled }}
        sidecar.istio.io/inject: "{{ .Values.serviceMesh.istio.injection }}"
        {{- end }}
    spec:
      # Security context
      {{- if .Values.global.securityContext.enabled }}
      securityContext:
        runAsNonRoot: {{ .Values.global.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.global.securityContext.runAsUser }}
        runAsGroup: {{ .Values.global.securityContext.runAsGroup }}
        fsGroup: {{ .Values.global.securityContext.fsGroup }}
      {{- end }}
      
      # Service account
      {{- if .Values.security.serviceAccount.create }}
      serviceAccountName: {{ include "second-opinion.serviceAccountName" . }}
      {{- end }}
      
      # Image pull secrets
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Init containers for database migration
      initContainers:
        - name: db-migrate
          image: "{{ .Values.global.imageRegistry }}{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          command: ["npx", "prisma", "migrate", "deploy"]
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-database-credentials
                  key: DATABASE_URL
          {{- if .Values.global.securityContext.enabled }}
          securityContext:
            runAsNonRoot: {{ .Values.global.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.global.securityContext.runAsUser }}
            allowPrivilegeEscalation: false
          {{- end }}
      
      containers:
        - name: app
          image: "{{ .Values.global.imageRegistry }}{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
          imagePullPolicy: {{ .Values.app.image.pullPolicy }}
          
          ports:
            - name: http
              containerPort: {{ .Values.app.service.targetPort }}
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          # Environment variables
          envFrom:
            - configMapRef:
                name: {{ include "second-opinion.fullname" . }}-config
          env:
            {{- range $key, $value := .Values.app.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-database-credentials
                  key: DATABASE_URL
            {{- if .Values.redis.enabled }}
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-redis-credentials
                  key: REDIS_URL
            {{- end }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-application-secrets
                  key: JWT_SECRET
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-application-secrets
                  key: NEXTAUTH_SECRET
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "second-opinion.fullname" . }}-application-secrets
                  key: ENCRYPTION_KEY
          
          # Resource limits and requests
          resources:
            {{- toYaml .Values.app.resources | nindent 12 }}
          
          # Health checks
          {{- if .Values.app.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: {{ .Values.app.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.app.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.app.livenessProbe.successThreshold }}
          {{- end }}
          
          {{- if .Values.app.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /api/ready
              port: http
            initialDelaySeconds: {{ .Values.app.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.app.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.app.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.app.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.app.readinessProbe.successThreshold }}
          {{- end }}
          
          # Startup probe for slow-starting containers
          startupProbe:
            httpGet:
              path: /api/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          # Security context
          {{- if .Values.global.securityContext.enabled }}
          securityContext:
            runAsNonRoot: {{ .Values.global.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.global.securityContext.runAsUser }}
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Next.js needs write access for cache
            capabilities:
              drop:
                - ALL
          {{- end }}
          
          # Volume mounts
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: cache-volume
              mountPath: /app/.next/cache
      
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: cache-volume
          emptyDir: {}
      
      # Pod disruption budget
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Node selector
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Tolerations
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

---
{{- if .Values.app.autoscaling.enabled }}
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "second-opinion.fullname" . }}-app-hpa
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "second-opinion.fullname" . }}-app
  minReplicas: {{ .Values.app.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.app.autoscaling.maxReplicas }}
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.app.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.app.autoscaling.targetMemoryUtilizationPercentage }}
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max
{{- end }}

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ include "second-opinion.fullname" . }}-app-pdb
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "second-opinion.labels" . | nindent 4 }}
    app.kubernetes.io/component: disruption-budget
spec:
  minAvailable: 2
  selector:
    matchLabels:
      {{- include "second-opinion.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: web