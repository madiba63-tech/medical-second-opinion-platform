openapi: 3.0.3
info:
  title: Second Opinion Platform API Gateway
  description: |
    API Gateway for the Second Opinion Platform microservices architecture.
    
    This gateway provides unified access to all platform services including:
    - Patient Identity Service (Authentication & Authorization)
    - Case Management Service (Medical cases & documents)
    - AI Analysis Service (Medical AI insights)
    - Professional Service (Medical professionals)
    - Notification Service (Multi-channel communications)
    
    ## Authentication
    Most endpoints require JWT Bearer token authentication obtained from the identity service.
    
    ## Rate Limiting
    API endpoints are rate limited based on user type and endpoint category.
    
    ## Error Handling
    All responses follow a consistent error format with appropriate HTTP status codes.
    
  version: 1.0.0
  contact:
    name: Second Opinion Platform Team
    email: support@secondopinion.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.secondopinion.com
    description: Production server

paths:
  /:
    get:
      summary: Gateway information
      description: Returns basic information about the API Gateway
      tags:
        - Gateway
      responses:
        '200':
          description: Gateway information
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                    example: "Second Opinion API Gateway"
                  version:
                    type: string
                    example: "1.0.0"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"
                  documentation:
                    type: string
                    example: "/api/docs"
                  health:
                    type: string
                    example: "/health"
                  metrics:
                    type: string
                    example: "/metrics"

  /health:
    get:
      summary: Gateway health check
      description: Returns the health status of the gateway and all microservices
      tags:
        - Health
      responses:
        '200':
          description: All services healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '207':
          description: Some services degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Services unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /health/live:
    get:
      summary: Liveness probe
      description: Simple check that the gateway is running
      tags:
        - Health
      responses:
        '200':
          description: Gateway is alive
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "alive"
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: integer
                    example: 3600

  /health/ready:
    get:
      summary: Readiness probe
      description: Check if gateway is ready to handle requests
      tags:
        - Health
      responses:
        '200':
          description: Gateway is ready
        '503':
          description: Gateway is not ready

  /health/services:
    get:
      summary: Detailed service health
      description: Returns detailed health information for all microservices
      tags:
        - Health
      responses:
        '200':
          description: Service health information
          content:
            application/json:
              schema:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/ServiceHealth'

  /metrics:
    get:
      summary: Prometheus metrics
      description: Returns metrics in Prometheus format
      tags:
        - Monitoring
      responses:
        '200':
          description: Metrics data
          content:
            text/plain:
              schema:
                type: string

  # Identity Service Routes
  /api/v1/auth/login:
    post:
      summary: User login
      description: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Invalid request
        '401':
          description: Invalid credentials
        '429':
          description: Too many login attempts

  /api/v1/auth/register:
    post:
      summary: User registration
      description: Register a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: Registration successful
        '400':
          description: Invalid request
        '409':
          description: Email already exists

  # Case Management Routes
  /api/v1/cases:
    get:
      summary: List cases
      description: Retrieve list of medical cases
      tags:
        - Cases
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          schema:
            type: string
            enum: [DRAFT, SUBMITTED, PROFESSIONAL_REVIEWING, COMPLETED]
      responses:
        '200':
          description: Cases retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseList'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    post:
      summary: Create case
      description: Create a new medical case
      tags:
        - Cases
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCase'
      responses:
        '201':
          description: Case created successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        timestamp:
          type: string
          format: date-time
        uptime:
          type: integer
        version:
          type: string
        services:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'
        system:
          type: object
          properties:
            memory:
              type: object
              properties:
                used:
                  type: integer
                free:
                  type: integer
                percentage:
                  type: integer
            cpu:
              type: object
              properties:
                loadAverage:
                  type: array
                  items:
                    type: number

    ServiceHealth:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
        responseTime:
          type: integer
        lastCheck:
          type: string
          format: date-time
        error:
          type: string

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        accessToken:
          type: string
        user:
          type: object
          properties:
            userId:
              type: string
            email:
              type: string
            role:
              type: string

    UserRegistration:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
        - dateOfBirth
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        dateOfBirth:
          type: string
          format: date
        phone:
          type: string
        preferredChannel:
          type: string
          enum: [EMAIL, SMS, PHONE]

    CreateCase:
      type: object
      required:
        - title
        - description
        - category
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [GENERAL, CARDIOLOGY, NEUROLOGY, ONCOLOGY, ORTHOPEDIC]
        priority:
          type: string
          enum: [LOW, NORMAL, HIGH, URGENT]
          default: NORMAL
        chiefComplaint:
          type: string

    CaseList:
      type: object
      properties:
        success:
          type: boolean
        cases:
          type: array
          items:
            $ref: '#/components/schemas/Case'
        pagination:
          type: object
          properties:
            page:
              type: integer
            limit:
              type: integer
            total:
              type: integer
            pages:
              type: integer

    Case:
      type: object
      properties:
        id:
          type: string
        caseNumber:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: string
        priority:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        correlationId:
          type: string

tags:
  - name: Gateway
    description: API Gateway information and configuration
  - name: Health
    description: Health check and monitoring endpoints
  - name: Monitoring
    description: Metrics and observability
  - name: Authentication
    description: User authentication and authorization
  - name: Cases
    description: Medical case management
  - name: AI Analysis
    description: AI-powered medical analysis
  - name: Professionals
    description: Medical professional management
  - name: Notifications
    description: Multi-channel notifications