# Kubernetes Deployment for the main application
# Following v2.0 Architecture requirements for stateless, scalable deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: second-opinion-app
  namespace: second-opinion
  labels:
    app: second-opinion-app
    component: web
    version: v2.0
  annotations:
    deployment.kubernetes.io/revision: "1"
    description: "Main application deployment for the AI-Powered Medical Second Opinion Platform"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: second-opinion-app
      component: web
  template:
    metadata:
      labels:
        app: second-opinion-app
        component: web
        version: v2.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      
      # Service account
      serviceAccountName: second-opinion-app
      
      # Image pull secrets
      imagePullSecrets:
        - name: registry-credentials
      
      # Init containers for database migration
      initContainers:
        - name: db-migrate
          image: second-opinion:latest
          command: ["npx", "prisma", "migrate", "deploy"]
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: DATABASE_URL
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
      
      containers:
        - name: app
          image: second-opinion:latest
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          # Environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: second-opinion-config
            - configMapRef:
                name: database-config
            - configMapRef:
                name: redis-config
          
          # Environment variables from Secrets
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: DATABASE_URL
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-credentials
                  key: REDIS_URL
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: JWT_SECRET
            - name: NEXTAUTH_SECRET
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: NEXTAUTH_SECRET
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: application-secrets
                  key: ENCRYPTION_KEY
          
          # Resource limits and requests
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          
          # Health checks
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          
          readinessProbe:
            httpGet:
              path: /api/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
            successThreshold: 1
          
          # Startup probe for slow-starting containers
          startupProbe:
            httpGet:
              path: /api/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
            successThreshold: 1
          
          # Security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Next.js needs write access for cache
            capabilities:
              drop:
                - ALL
          
          # Volume mounts
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
            - name: cache-volume
              mountPath: /app/.next/cache
      
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: cache-volume
          emptyDir: {}
      
      # Pod disruption budget
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - second-opinion-app
                topologyKey: kubernetes.io/hostname
      
      # Tolerations for node selection
      tolerations:
        - key: "node-role.kubernetes.io/spot"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: second-opinion-app-hpa
  namespace: second-opinion
  labels:
    app: second-opinion-app
    component: autoscaler
    version: v2.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: second-opinion-app
  minReplicas: 3
  maxReplicas: 50
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: second-opinion-app-pdb
  namespace: second-opinion
  labels:
    app: second-opinion-app
    component: disruption-budget
    version: v2.0
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: second-opinion-app
      component: web