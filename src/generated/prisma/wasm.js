
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  email: 'email',
  passwordHash: 'passwordHash',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  phone: 'phone',
  preferredContact: 'preferredContact',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseScalarFieldEnum = {
  id: 'id',
  caseNumber: 'caseNumber',
  customerId: 'customerId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  email: 'email',
  phone: 'phone',
  ethnicity: 'ethnicity',
  gender: 'gender',
  diseaseType: 'diseaseType',
  isFirstOccurrence: 'isFirstOccurrence',
  geneticFamilyHistory: 'geneticFamilyHistory',
  paymentId: 'paymentId',
  consentAccepted: 'consentAccepted',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UploadedFileScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  fileName: 'fileName',
  originalName: 'originalName',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  category: 'category',
  s3Key: 's3Key',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.MedicalProfessionalScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phone: 'phone',
  licenseNumber: 'licenseNumber',
  specialty: 'specialty',
  yearsExperience: 'yearsExperience',
  qualifications: 'qualifications',
  vettingStatus: 'vettingStatus',
  vettedBy: 'vettedBy',
  vettedAt: 'vettedAt',
  appliedAt: 'appliedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseAssignmentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  professionalId: 'professionalId',
  assignedBy: 'assignedBy',
  assignedAt: 'assignedAt',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt'
};

exports.Prisma.AIAnalysisScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  analysisType: 'analysisType',
  findings: 'findings',
  confidence: 'confidence',
  initiatedAt: 'initiatedAt',
  completedAt: 'completedAt'
};

exports.Prisma.MedicalOpinionScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  primaryProfessionalId: 'primaryProfessionalId',
  reviewerProfessionalId: 'reviewerProfessionalId',
  diagnosis: 'diagnosis',
  recommendations: 'recommendations',
  riskAssessment: 'riskAssessment',
  additionalTests: 'additionalTests',
  notes: 'notes',
  status: 'status',
  peerReviewNotes: 'peerReviewNotes',
  createdAt: 'createdAt',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  approvedAt: 'approvedAt',
  deliveredAt: 'deliveredAt'
};

exports.Prisma.ProfessionalPaymentScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  caseId: 'caseId',
  amount: 'amount',
  currency: 'currency',
  paymentType: 'paymentType',
  paymentMethod: 'paymentMethod',
  status: 'status',
  transactionId: 'transactionId',
  initiatedAt: 'initiatedAt',
  processedAt: 'processedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Customer: 'Customer',
  Case: 'Case',
  UploadedFile: 'UploadedFile',
  MedicalProfessional: 'MedicalProfessional',
  CaseAssignment: 'CaseAssignment',
  AIAnalysis: 'AIAnalysis',
  MedicalOpinion: 'MedicalOpinion',
  ProfessionalPayment: 'ProfessionalPayment',
  Admin: 'Admin'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
