
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hashedPassword: 'hashedPassword',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  email: 'email',
  phone: 'phone',
  hashedPassword: 'hashedPassword',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  twoFactorEnabled: 'twoFactorEnabled',
  twoFactorMethod: 'twoFactorMethod',
  twoFactorSecret: 'twoFactorSecret',
  preferredLanguage: 'preferredLanguage',
  preferredChannel: 'preferredChannel',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  whatsappNotifications: 'whatsappNotifications',
  googleId: 'googleId',
  appleId: 'appleId',
  microsoftId: 'microsoftId',
  oauthProvider: 'oauthProvider',
  profileCompleted: 'profileCompleted',
  termsAccepted: 'termsAccepted',
  privacyAccepted: 'privacyAccepted',
  marketingConsent: 'marketingConsent',
  metadata: 'metadata',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TempSubmissionScalarFieldEnum = {
  id: 'id',
  payload: 'payload',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerSessionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  sessionToken: 'sessionToken',
  twoFactorVerified: 'twoFactorVerified',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  expiresAt: 'expiresAt',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerNotificationScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  type: 'type',
  channel: 'channel',
  subject: 'subject',
  message: 'message',
  language: 'language',
  status: 'status',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  readAt: 'readAt',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ServicePricingScalarFieldEnum = {
  id: 'id',
  professionalLevel: 'professionalLevel',
  urgencyLevel: 'urgencyLevel',
  basePriceEUR: 'basePriceEUR',
  currencyCode: 'currencyCode',
  isActive: 'isActive',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionnaireResponseScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  questionnaireType: 'questionnaireType',
  language: 'language',
  responses: 'responses',
  aiAnalysis: 'aiAnalysis',
  completenessScore: 'completenessScore',
  confidence: 'confidence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CasePaymentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  customerId: 'customerId',
  amount: 'amount',
  currency: 'currency',
  professionalLevel: 'professionalLevel',
  urgencyLevel: 'urgencyLevel',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  paymentDate: 'paymentDate',
  refundDate: 'refundDate',
  refundReason: 'refundReason',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalCaseScalarFieldEnum = {
  id: 'id',
  caseNumber: 'caseNumber',
  customerId: 'customerId',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  email: 'email',
  phone: 'phone',
  title: 'title',
  description: 'description',
  chiefComplaint: 'chiefComplaint',
  category: 'category',
  medicalHistory: 'medicalHistory',
  currentMedications: 'currentMedications',
  allergies: 'allergies',
  familyHistory: 'familyHistory',
  status: 'status',
  priority: 'priority',
  requestedProfessionalLevel: 'requestedProfessionalLevel',
  talentPool: 'talentPool',
  urgencyReason: 'urgencyReason',
  submittedAt: 'submittedAt',
  reviewStartedAt: 'reviewStartedAt',
  completedAt: 'completedAt',
  expiresAt: 'expiresAt',
  assignedProfessionalId: 'assignedProfessionalId',
  assignedAt: 'assignedAt',
  qualityScore: 'qualityScore',
  completenessScore: 'completenessScore',
  metadata: 'metadata',
  tags: 'tags',
  version: 'version',
  ethnicity: 'ethnicity',
  gender: 'gender',
  diseaseType: 'diseaseType',
  isFirstOccurrence: 'isFirstOccurrence',
  geneticFamilyHistory: 'geneticFamilyHistory',
  paymentId: 'paymentId',
  consentAccepted: 'consentAccepted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CaseStatusHistoryScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  fromStatus: 'fromStatus',
  toStatus: 'toStatus',
  reason: 'reason',
  notes: 'notes',
  changedByType: 'changedByType',
  changedById: 'changedById',
  createdAt: 'createdAt'
};

exports.Prisma.UploadedFileScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  filename: 'filename',
  s3Key: 's3Key',
  mimetype: 'mimetype',
  size: 'size',
  category: 'category',
  metadata: 'metadata',
  checksum: 'checksum',
  encrypted: 'encrypted',
  createdAt: 'createdAt'
};

exports.Prisma.MedicalProfessionalScalarFieldEnum = {
  id: 'id',
  proNumber: 'proNumber',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dob: 'dob',
  email: 'email',
  phone: 'phone',
  nationality: 'nationality',
  licenseNumber: 'licenseNumber',
  licenseCountry: 'licenseCountry',
  licenseExpiry: 'licenseExpiry',
  vetted: 'vetted',
  level: 'level',
  cvUrl: 'cvUrl',
  documents: 'documents',
  subspecialties: 'subspecialties',
  yearsPractice: 'yearsPractice',
  publications: 'publications',
  trialInvolved: 'trialInvolved',
  leadership: 'leadership',
  societyMemberships: 'societyMemberships',
  competencyData: 'competencyData',
  availability: 'availability',
  score: 'score',
  hashedPassword: 'hashedPassword',
  twoFactorMethod: 'twoFactorMethod',
  twoFactorSecret: 'twoFactorSecret',
  profileLastUpdated: 'profileLastUpdated',
  codeOfConductAcknowledged: 'codeOfConductAcknowledged',
  address: 'address',
  billingAddress: 'billingAddress',
  bankDetails: 'bankDetails',
  vatNumber: 'vatNumber',
  billingRate: 'billingRate',
  performanceMetrics: 'performanceMetrics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalSessionScalarFieldEnum = {
  id: 'id',
  professionalId: 'professionalId',
  sessionToken: 'sessionToken',
  twoFactorVerified: 'twoFactorVerified',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.CaseAssignmentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  professionalId: 'professionalId',
  status: 'status',
  assignedAt: 'assignedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  estimatedDuration: 'estimatedDuration',
  actualDuration: 'actualDuration',
  metadata: 'metadata'
};

exports.Prisma.AIAnalysisScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  analysisType: 'analysisType',
  results: 'results',
  confidence: 'confidence',
  processingTime: 'processingTime',
  aiProvider: 'aiProvider',
  modelVersion: 'modelVersion',
  cost: 'cost',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.MedicalOpinionScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  professionalId: 'professionalId',
  content: 'content',
  status: 'status',
  version: 'version',
  digitalSignature: 'digitalSignature',
  reviewedBy: 'reviewedBy',
  reviewedAt: 'reviewedAt',
  publishedAt: 'publishedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalPaymentScalarFieldEnum = {
  id: 'id',
  caseId: 'caseId',
  professionalId: 'professionalId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  paymentMethod: 'paymentMethod',
  transactionId: 'transactionId',
  processedAt: 'processedAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hashedPassword: 'hashedPassword',
  role: 'role',
  permissions: 'permissions',
  lastLoginAt: 'lastLoginAt',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfessionalCandidateScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  middleName: 'middleName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  nationality: 'nationality',
  email: 'email',
  phone: 'phone',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  medicalDegreeUploaded: 'medicalDegreeUploaded',
  residencyCompleted: 'residencyCompleted',
  fellowshipCompleted: 'fellowshipCompleted',
  boardCertificationNumber: 'boardCertificationNumber',
  medicalLicenseNumber: 'medicalLicenseNumber',
  licenseCountry: 'licenseCountry',
  licenseState: 'licenseState',
  licenseExpiry: 'licenseExpiry',
  certificateGoodStanding: 'certificateGoodStanding',
  yearsIndependentPractice: 'yearsIndependentPractice',
  currentAffiliation: 'currentAffiliation',
  subspecialties: 'subspecialties',
  annualPatientLoad: 'annualPatientLoad',
  secondOpinionsGiven: 'secondOpinionsGiven',
  peerReviewedPublications: 'peerReviewedPublications',
  clinicalTrialInvolvement: 'clinicalTrialInvolvement',
  clinicalTrialDetails: 'clinicalTrialDetails',
  conferencepresentations: 'conferencepresentations',
  conferenceDetails: 'conferenceDetails',
  teachingRoles: 'teachingRoles',
  teachingDetails: 'teachingDetails',
  oncologySocieties: 'oncologySocieties',
  awardsHonors: 'awardsHonors',
  leadershipRoles: 'leadershipRoles',
  professionalReferences: 'professionalReferences',
  malpracticeInsurance: 'malpracticeInsurance',
  noActiveDisciplinary: 'noActiveDisciplinary',
  dataProtectionAgreed: 'dataProtectionAgreed',
  competencyScore: 'competencyScore',
  competencyLevel: 'competencyLevel',
  scoreBreakdown: 'scoreBreakdown',
  applicationStatus: 'applicationStatus',
  submittedAt: 'submittedAt',
  reviewStartedAt: 'reviewStartedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  reviewNotes: 'reviewNotes',
  rejectionReason: 'rejectionReason',
  approvedToProfessionalId: 'approvedToProfessionalId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateDocumentScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  documentType: 'documentType',
  fileName: 'fileName',
  originalName: 'originalName',
  s3Key: 's3Key',
  mimetype: 'mimetype',
  size: 'size',
  checksum: 'checksum',
  encrypted: 'encrypted',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.ApplicationReviewScalarFieldEnum = {
  id: 'id',
  candidateId: 'candidateId',
  reviewerId: 'reviewerId',
  decision: 'decision',
  notes: 'notes',
  scoreAdjustment: 'scoreAdjustment',
  recommendedLevel: 'recommendedLevel',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.TwoFactorMethod = exports.$Enums.TwoFactorMethod = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

exports.Language = exports.$Enums.Language = {
  ENGLISH: 'ENGLISH',
  GERMAN: 'GERMAN'
};

exports.CommunicationChannel = exports.$Enums.CommunicationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

exports.CaseUrgency = exports.$Enums.CaseUrgency = {
  STANDARD: 'STANDARD',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

exports.QuestionnaireType = exports.$Enums.QuestionnaireType = {
  FAST_TRACK: 'FAST_TRACK',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.ProLevel = exports.$Enums.ProLevel = {
  JUNIOR: 'JUNIOR',
  SENIOR: 'SENIOR',
  EXPERT: 'EXPERT',
  DISTINGUISHED: 'DISTINGUISHED'
};

exports.CandidateStatus = exports.$Enums.CandidateStatus = {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ADDITIONAL_INFO_REQUIRED: 'ADDITIONAL_INFO_REQUIRED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  GOVERNMENT_ID: 'GOVERNMENT_ID',
  MEDICAL_DEGREE: 'MEDICAL_DEGREE',
  RESIDENCY_CERTIFICATE: 'RESIDENCY_CERTIFICATE',
  FELLOWSHIP_CERTIFICATE: 'FELLOWSHIP_CERTIFICATE',
  BOARD_CERTIFICATION: 'BOARD_CERTIFICATION',
  LICENSE_CERTIFICATE: 'LICENSE_CERTIFICATE',
  GOOD_STANDING_CERTIFICATE: 'GOOD_STANDING_CERTIFICATE',
  CV: 'CV',
  PUBLICATION_1: 'PUBLICATION_1',
  PUBLICATION_2: 'PUBLICATION_2',
  PUBLICATION_3: 'PUBLICATION_3',
  MALPRACTICE_INSURANCE: 'MALPRACTICE_INSURANCE',
  ADDITIONAL_DIPLOMA: 'ADDITIONAL_DIPLOMA'
};

exports.ReviewDecision = exports.$Enums.ReviewDecision = {
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  REQUEST_MORE_INFO: 'REQUEST_MORE_INFO',
  PENDING_REVIEW: 'PENDING_REVIEW'
};

exports.Prisma.ModelName = {
  User: 'User',
  Customer: 'Customer',
  TempSubmission: 'TempSubmission',
  CustomerSession: 'CustomerSession',
  CustomerNotification: 'CustomerNotification',
  ServicePricing: 'ServicePricing',
  QuestionnaireResponse: 'QuestionnaireResponse',
  CasePayment: 'CasePayment',
  MedicalCase: 'MedicalCase',
  CaseStatusHistory: 'CaseStatusHistory',
  UploadedFile: 'UploadedFile',
  MedicalProfessional: 'MedicalProfessional',
  ProfessionalSession: 'ProfessionalSession',
  CaseAssignment: 'CaseAssignment',
  AIAnalysis: 'AIAnalysis',
  MedicalOpinion: 'MedicalOpinion',
  ProfessionalPayment: 'ProfessionalPayment',
  Admin: 'Admin',
  ProfessionalCandidate: 'ProfessionalCandidate',
  CandidateDocument: 'CandidateDocument',
  ApplicationReview: 'ApplicationReview'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
