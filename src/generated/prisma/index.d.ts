
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model TempSubmission
 * 
 */
export type TempSubmission = $Result.DefaultSelection<Prisma.$TempSubmissionPayload>
/**
 * Model CustomerSession
 * 
 */
export type CustomerSession = $Result.DefaultSelection<Prisma.$CustomerSessionPayload>
/**
 * Model CustomerNotification
 * 
 */
export type CustomerNotification = $Result.DefaultSelection<Prisma.$CustomerNotificationPayload>
/**
 * Model ServicePricing
 * 
 */
export type ServicePricing = $Result.DefaultSelection<Prisma.$ServicePricingPayload>
/**
 * Model QuestionnaireResponse
 * 
 */
export type QuestionnaireResponse = $Result.DefaultSelection<Prisma.$QuestionnaireResponsePayload>
/**
 * Model CasePayment
 * 
 */
export type CasePayment = $Result.DefaultSelection<Prisma.$CasePaymentPayload>
/**
 * Model MedicalCase
 * 
 */
export type MedicalCase = $Result.DefaultSelection<Prisma.$MedicalCasePayload>
/**
 * Model CaseStatusHistory
 * 
 */
export type CaseStatusHistory = $Result.DefaultSelection<Prisma.$CaseStatusHistoryPayload>
/**
 * Model UploadedFile
 * 
 */
export type UploadedFile = $Result.DefaultSelection<Prisma.$UploadedFilePayload>
/**
 * Model MedicalProfessional
 * 
 */
export type MedicalProfessional = $Result.DefaultSelection<Prisma.$MedicalProfessionalPayload>
/**
 * Model ProfessionalSession
 * 
 */
export type ProfessionalSession = $Result.DefaultSelection<Prisma.$ProfessionalSessionPayload>
/**
 * Model CaseAssignment
 * 
 */
export type CaseAssignment = $Result.DefaultSelection<Prisma.$CaseAssignmentPayload>
/**
 * Model AIAnalysis
 * 
 */
export type AIAnalysis = $Result.DefaultSelection<Prisma.$AIAnalysisPayload>
/**
 * Model MedicalOpinion
 * 
 */
export type MedicalOpinion = $Result.DefaultSelection<Prisma.$MedicalOpinionPayload>
/**
 * Model ProfessionalPayment
 * 
 */
export type ProfessionalPayment = $Result.DefaultSelection<Prisma.$ProfessionalPaymentPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model ProfessionalCandidate
 * 
 */
export type ProfessionalCandidate = $Result.DefaultSelection<Prisma.$ProfessionalCandidatePayload>
/**
 * Model CandidateDocument
 * 
 */
export type CandidateDocument = $Result.DefaultSelection<Prisma.$CandidateDocumentPayload>
/**
 * Model ApplicationReview
 * 
 */
export type ApplicationReview = $Result.DefaultSelection<Prisma.$ApplicationReviewPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CommunicationChannel: {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

export type CommunicationChannel = (typeof CommunicationChannel)[keyof typeof CommunicationChannel]


export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Language: {
  ENGLISH: 'ENGLISH',
  GERMAN: 'GERMAN'
};

export type Language = (typeof Language)[keyof typeof Language]


export const TwoFactorMethod: {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP'
};

export type TwoFactorMethod = (typeof TwoFactorMethod)[keyof typeof TwoFactorMethod]


export const QuestionnaireType: {
  FAST_TRACK: 'FAST_TRACK',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

export type QuestionnaireType = (typeof QuestionnaireType)[keyof typeof QuestionnaireType]


export const CaseUrgency: {
  STANDARD: 'STANDARD',
  URGENT: 'URGENT',
  EMERGENCY: 'EMERGENCY'
};

export type CaseUrgency = (typeof CaseUrgency)[keyof typeof CaseUrgency]


export const PaymentStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const ProLevel: {
  JUNIOR: 'JUNIOR',
  SENIOR: 'SENIOR',
  EXPERT: 'EXPERT',
  DISTINGUISHED: 'DISTINGUISHED'
};

export type ProLevel = (typeof ProLevel)[keyof typeof ProLevel]


export const CandidateStatus: {
  SUBMITTED: 'SUBMITTED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  ADDITIONAL_INFO_REQUIRED: 'ADDITIONAL_INFO_REQUIRED',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

export type CandidateStatus = (typeof CandidateStatus)[keyof typeof CandidateStatus]


export const DocumentType: {
  GOVERNMENT_ID: 'GOVERNMENT_ID',
  MEDICAL_DEGREE: 'MEDICAL_DEGREE',
  RESIDENCY_CERTIFICATE: 'RESIDENCY_CERTIFICATE',
  FELLOWSHIP_CERTIFICATE: 'FELLOWSHIP_CERTIFICATE',
  BOARD_CERTIFICATION: 'BOARD_CERTIFICATION',
  LICENSE_CERTIFICATE: 'LICENSE_CERTIFICATE',
  GOOD_STANDING_CERTIFICATE: 'GOOD_STANDING_CERTIFICATE',
  CV: 'CV',
  PUBLICATION_1: 'PUBLICATION_1',
  PUBLICATION_2: 'PUBLICATION_2',
  PUBLICATION_3: 'PUBLICATION_3',
  MALPRACTICE_INSURANCE: 'MALPRACTICE_INSURANCE',
  ADDITIONAL_DIPLOMA: 'ADDITIONAL_DIPLOMA'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const ReviewDecision: {
  APPROVE: 'APPROVE',
  REJECT: 'REJECT',
  REQUEST_MORE_INFO: 'REQUEST_MORE_INFO',
  PENDING_REVIEW: 'PENDING_REVIEW'
};

export type ReviewDecision = (typeof ReviewDecision)[keyof typeof ReviewDecision]

}

export type CommunicationChannel = $Enums.CommunicationChannel

export const CommunicationChannel: typeof $Enums.CommunicationChannel

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

export type TwoFactorMethod = $Enums.TwoFactorMethod

export const TwoFactorMethod: typeof $Enums.TwoFactorMethod

export type QuestionnaireType = $Enums.QuestionnaireType

export const QuestionnaireType: typeof $Enums.QuestionnaireType

export type CaseUrgency = $Enums.CaseUrgency

export const CaseUrgency: typeof $Enums.CaseUrgency

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type ProLevel = $Enums.ProLevel

export const ProLevel: typeof $Enums.ProLevel

export type CandidateStatus = $Enums.CandidateStatus

export const CandidateStatus: typeof $Enums.CandidateStatus

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type ReviewDecision = $Enums.ReviewDecision

export const ReviewDecision: typeof $Enums.ReviewDecision

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tempSubmission`: Exposes CRUD operations for the **TempSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TempSubmissions
    * const tempSubmissions = await prisma.tempSubmission.findMany()
    * ```
    */
  get tempSubmission(): Prisma.TempSubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerSession`: Exposes CRUD operations for the **CustomerSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerSessions
    * const customerSessions = await prisma.customerSession.findMany()
    * ```
    */
  get customerSession(): Prisma.CustomerSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerNotification`: Exposes CRUD operations for the **CustomerNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerNotifications
    * const customerNotifications = await prisma.customerNotification.findMany()
    * ```
    */
  get customerNotification(): Prisma.CustomerNotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.servicePricing`: Exposes CRUD operations for the **ServicePricing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ServicePricings
    * const servicePricings = await prisma.servicePricing.findMany()
    * ```
    */
  get servicePricing(): Prisma.ServicePricingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionnaireResponse`: Exposes CRUD operations for the **QuestionnaireResponse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionnaireResponses
    * const questionnaireResponses = await prisma.questionnaireResponse.findMany()
    * ```
    */
  get questionnaireResponse(): Prisma.QuestionnaireResponseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.casePayment`: Exposes CRUD operations for the **CasePayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CasePayments
    * const casePayments = await prisma.casePayment.findMany()
    * ```
    */
  get casePayment(): Prisma.CasePaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalCase`: Exposes CRUD operations for the **MedicalCase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalCases
    * const medicalCases = await prisma.medicalCase.findMany()
    * ```
    */
  get medicalCase(): Prisma.MedicalCaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseStatusHistory`: Exposes CRUD operations for the **CaseStatusHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseStatusHistories
    * const caseStatusHistories = await prisma.caseStatusHistory.findMany()
    * ```
    */
  get caseStatusHistory(): Prisma.CaseStatusHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.uploadedFile`: Exposes CRUD operations for the **UploadedFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UploadedFiles
    * const uploadedFiles = await prisma.uploadedFile.findMany()
    * ```
    */
  get uploadedFile(): Prisma.UploadedFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalProfessional`: Exposes CRUD operations for the **MedicalProfessional** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalProfessionals
    * const medicalProfessionals = await prisma.medicalProfessional.findMany()
    * ```
    */
  get medicalProfessional(): Prisma.MedicalProfessionalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionalSession`: Exposes CRUD operations for the **ProfessionalSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalSessions
    * const professionalSessions = await prisma.professionalSession.findMany()
    * ```
    */
  get professionalSession(): Prisma.ProfessionalSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.caseAssignment`: Exposes CRUD operations for the **CaseAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CaseAssignments
    * const caseAssignments = await prisma.caseAssignment.findMany()
    * ```
    */
  get caseAssignment(): Prisma.CaseAssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aIAnalysis`: Exposes CRUD operations for the **AIAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIAnalyses
    * const aIAnalyses = await prisma.aIAnalysis.findMany()
    * ```
    */
  get aIAnalysis(): Prisma.AIAnalysisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medicalOpinion`: Exposes CRUD operations for the **MedicalOpinion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalOpinions
    * const medicalOpinions = await prisma.medicalOpinion.findMany()
    * ```
    */
  get medicalOpinion(): Prisma.MedicalOpinionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionalPayment`: Exposes CRUD operations for the **ProfessionalPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalPayments
    * const professionalPayments = await prisma.professionalPayment.findMany()
    * ```
    */
  get professionalPayment(): Prisma.ProfessionalPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionalCandidate`: Exposes CRUD operations for the **ProfessionalCandidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfessionalCandidates
    * const professionalCandidates = await prisma.professionalCandidate.findMany()
    * ```
    */
  get professionalCandidate(): Prisma.ProfessionalCandidateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidateDocument`: Exposes CRUD operations for the **CandidateDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateDocuments
    * const candidateDocuments = await prisma.candidateDocument.findMany()
    * ```
    */
  get candidateDocument(): Prisma.CandidateDocumentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicationReview`: Exposes CRUD operations for the **ApplicationReview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationReviews
    * const applicationReviews = await prisma.applicationReview.findMany()
    * ```
    */
  get applicationReview(): Prisma.ApplicationReviewDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Customer: 'Customer',
    TempSubmission: 'TempSubmission',
    CustomerSession: 'CustomerSession',
    CustomerNotification: 'CustomerNotification',
    ServicePricing: 'ServicePricing',
    QuestionnaireResponse: 'QuestionnaireResponse',
    CasePayment: 'CasePayment',
    MedicalCase: 'MedicalCase',
    CaseStatusHistory: 'CaseStatusHistory',
    UploadedFile: 'UploadedFile',
    MedicalProfessional: 'MedicalProfessional',
    ProfessionalSession: 'ProfessionalSession',
    CaseAssignment: 'CaseAssignment',
    AIAnalysis: 'AIAnalysis',
    MedicalOpinion: 'MedicalOpinion',
    ProfessionalPayment: 'ProfessionalPayment',
    Admin: 'Admin',
    ProfessionalCandidate: 'ProfessionalCandidate',
    CandidateDocument: 'CandidateDocument',
    ApplicationReview: 'ApplicationReview'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "customer" | "tempSubmission" | "customerSession" | "customerNotification" | "servicePricing" | "questionnaireResponse" | "casePayment" | "medicalCase" | "caseStatusHistory" | "uploadedFile" | "medicalProfessional" | "professionalSession" | "caseAssignment" | "aIAnalysis" | "medicalOpinion" | "professionalPayment" | "admin" | "professionalCandidate" | "candidateDocument" | "applicationReview"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      TempSubmission: {
        payload: Prisma.$TempSubmissionPayload<ExtArgs>
        fields: Prisma.TempSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TempSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TempSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          findFirst: {
            args: Prisma.TempSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TempSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          findMany: {
            args: Prisma.TempSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>[]
          }
          create: {
            args: Prisma.TempSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          createMany: {
            args: Prisma.TempSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TempSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>[]
          }
          delete: {
            args: Prisma.TempSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          update: {
            args: Prisma.TempSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.TempSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TempSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TempSubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>[]
          }
          upsert: {
            args: Prisma.TempSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TempSubmissionPayload>
          }
          aggregate: {
            args: Prisma.TempSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTempSubmission>
          }
          groupBy: {
            args: Prisma.TempSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TempSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TempSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<TempSubmissionCountAggregateOutputType> | number
          }
        }
      }
      CustomerSession: {
        payload: Prisma.$CustomerSessionPayload<ExtArgs>
        fields: Prisma.CustomerSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          findFirst: {
            args: Prisma.CustomerSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          findMany: {
            args: Prisma.CustomerSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>[]
          }
          create: {
            args: Prisma.CustomerSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          createMany: {
            args: Prisma.CustomerSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>[]
          }
          delete: {
            args: Prisma.CustomerSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          update: {
            args: Prisma.CustomerSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          deleteMany: {
            args: Prisma.CustomerSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>[]
          }
          upsert: {
            args: Prisma.CustomerSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerSessionPayload>
          }
          aggregate: {
            args: Prisma.CustomerSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerSession>
          }
          groupBy: {
            args: Prisma.CustomerSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerSessionCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerSessionCountAggregateOutputType> | number
          }
        }
      }
      CustomerNotification: {
        payload: Prisma.$CustomerNotificationPayload<ExtArgs>
        fields: Prisma.CustomerNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          findFirst: {
            args: Prisma.CustomerNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          findMany: {
            args: Prisma.CustomerNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>[]
          }
          create: {
            args: Prisma.CustomerNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          createMany: {
            args: Prisma.CustomerNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerNotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>[]
          }
          delete: {
            args: Prisma.CustomerNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          update: {
            args: Prisma.CustomerNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          deleteMany: {
            args: Prisma.CustomerNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerNotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>[]
          }
          upsert: {
            args: Prisma.CustomerNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerNotificationPayload>
          }
          aggregate: {
            args: Prisma.CustomerNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerNotification>
          }
          groupBy: {
            args: Prisma.CustomerNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerNotificationCountAggregateOutputType> | number
          }
        }
      }
      ServicePricing: {
        payload: Prisma.$ServicePricingPayload<ExtArgs>
        fields: Prisma.ServicePricingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicePricingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicePricingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          findFirst: {
            args: Prisma.ServicePricingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicePricingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          findMany: {
            args: Prisma.ServicePricingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>[]
          }
          create: {
            args: Prisma.ServicePricingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          createMany: {
            args: Prisma.ServicePricingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServicePricingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>[]
          }
          delete: {
            args: Prisma.ServicePricingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          update: {
            args: Prisma.ServicePricingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          deleteMany: {
            args: Prisma.ServicePricingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServicePricingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServicePricingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>[]
          }
          upsert: {
            args: Prisma.ServicePricingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePricingPayload>
          }
          aggregate: {
            args: Prisma.ServicePricingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateServicePricing>
          }
          groupBy: {
            args: Prisma.ServicePricingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServicePricingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicePricingCountArgs<ExtArgs>
            result: $Utils.Optional<ServicePricingCountAggregateOutputType> | number
          }
        }
      }
      QuestionnaireResponse: {
        payload: Prisma.$QuestionnaireResponsePayload<ExtArgs>
        fields: Prisma.QuestionnaireResponseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionnaireResponseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionnaireResponseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          findFirst: {
            args: Prisma.QuestionnaireResponseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionnaireResponseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          findMany: {
            args: Prisma.QuestionnaireResponseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>[]
          }
          create: {
            args: Prisma.QuestionnaireResponseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          createMany: {
            args: Prisma.QuestionnaireResponseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionnaireResponseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>[]
          }
          delete: {
            args: Prisma.QuestionnaireResponseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          update: {
            args: Prisma.QuestionnaireResponseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          deleteMany: {
            args: Prisma.QuestionnaireResponseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionnaireResponseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionnaireResponseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>[]
          }
          upsert: {
            args: Prisma.QuestionnaireResponseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionnaireResponsePayload>
          }
          aggregate: {
            args: Prisma.QuestionnaireResponseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionnaireResponse>
          }
          groupBy: {
            args: Prisma.QuestionnaireResponseGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionnaireResponseGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionnaireResponseCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionnaireResponseCountAggregateOutputType> | number
          }
        }
      }
      CasePayment: {
        payload: Prisma.$CasePaymentPayload<ExtArgs>
        fields: Prisma.CasePaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CasePaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CasePaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          findFirst: {
            args: Prisma.CasePaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CasePaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          findMany: {
            args: Prisma.CasePaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>[]
          }
          create: {
            args: Prisma.CasePaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          createMany: {
            args: Prisma.CasePaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CasePaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>[]
          }
          delete: {
            args: Prisma.CasePaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          update: {
            args: Prisma.CasePaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          deleteMany: {
            args: Prisma.CasePaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CasePaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CasePaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>[]
          }
          upsert: {
            args: Prisma.CasePaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CasePaymentPayload>
          }
          aggregate: {
            args: Prisma.CasePaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCasePayment>
          }
          groupBy: {
            args: Prisma.CasePaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CasePaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CasePaymentCountArgs<ExtArgs>
            result: $Utils.Optional<CasePaymentCountAggregateOutputType> | number
          }
        }
      }
      MedicalCase: {
        payload: Prisma.$MedicalCasePayload<ExtArgs>
        fields: Prisma.MedicalCaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalCaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalCaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          findFirst: {
            args: Prisma.MedicalCaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalCaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          findMany: {
            args: Prisma.MedicalCaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>[]
          }
          create: {
            args: Prisma.MedicalCaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          createMany: {
            args: Prisma.MedicalCaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalCaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>[]
          }
          delete: {
            args: Prisma.MedicalCaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          update: {
            args: Prisma.MedicalCaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          deleteMany: {
            args: Prisma.MedicalCaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalCaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalCaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>[]
          }
          upsert: {
            args: Prisma.MedicalCaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalCasePayload>
          }
          aggregate: {
            args: Prisma.MedicalCaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalCase>
          }
          groupBy: {
            args: Prisma.MedicalCaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalCaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalCaseCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalCaseCountAggregateOutputType> | number
          }
        }
      }
      CaseStatusHistory: {
        payload: Prisma.$CaseStatusHistoryPayload<ExtArgs>
        fields: Prisma.CaseStatusHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseStatusHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseStatusHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          findFirst: {
            args: Prisma.CaseStatusHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseStatusHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          findMany: {
            args: Prisma.CaseStatusHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>[]
          }
          create: {
            args: Prisma.CaseStatusHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          createMany: {
            args: Prisma.CaseStatusHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseStatusHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>[]
          }
          delete: {
            args: Prisma.CaseStatusHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          update: {
            args: Prisma.CaseStatusHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          deleteMany: {
            args: Prisma.CaseStatusHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseStatusHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseStatusHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>[]
          }
          upsert: {
            args: Prisma.CaseStatusHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseStatusHistoryPayload>
          }
          aggregate: {
            args: Prisma.CaseStatusHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseStatusHistory>
          }
          groupBy: {
            args: Prisma.CaseStatusHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseStatusHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseStatusHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<CaseStatusHistoryCountAggregateOutputType> | number
          }
        }
      }
      UploadedFile: {
        payload: Prisma.$UploadedFilePayload<ExtArgs>
        fields: Prisma.UploadedFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UploadedFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UploadedFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          findFirst: {
            args: Prisma.UploadedFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UploadedFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          findMany: {
            args: Prisma.UploadedFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>[]
          }
          create: {
            args: Prisma.UploadedFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          createMany: {
            args: Prisma.UploadedFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UploadedFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>[]
          }
          delete: {
            args: Prisma.UploadedFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          update: {
            args: Prisma.UploadedFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          deleteMany: {
            args: Prisma.UploadedFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UploadedFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UploadedFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>[]
          }
          upsert: {
            args: Prisma.UploadedFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadedFilePayload>
          }
          aggregate: {
            args: Prisma.UploadedFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUploadedFile>
          }
          groupBy: {
            args: Prisma.UploadedFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UploadedFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UploadedFileCountArgs<ExtArgs>
            result: $Utils.Optional<UploadedFileCountAggregateOutputType> | number
          }
        }
      }
      MedicalProfessional: {
        payload: Prisma.$MedicalProfessionalPayload<ExtArgs>
        fields: Prisma.MedicalProfessionalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalProfessionalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalProfessionalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          findFirst: {
            args: Prisma.MedicalProfessionalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalProfessionalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          findMany: {
            args: Prisma.MedicalProfessionalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>[]
          }
          create: {
            args: Prisma.MedicalProfessionalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          createMany: {
            args: Prisma.MedicalProfessionalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalProfessionalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>[]
          }
          delete: {
            args: Prisma.MedicalProfessionalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          update: {
            args: Prisma.MedicalProfessionalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          deleteMany: {
            args: Prisma.MedicalProfessionalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalProfessionalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalProfessionalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>[]
          }
          upsert: {
            args: Prisma.MedicalProfessionalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalProfessionalPayload>
          }
          aggregate: {
            args: Prisma.MedicalProfessionalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalProfessional>
          }
          groupBy: {
            args: Prisma.MedicalProfessionalGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalProfessionalGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalProfessionalCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalProfessionalCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalSession: {
        payload: Prisma.$ProfessionalSessionPayload<ExtArgs>
        fields: Prisma.ProfessionalSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          findMany: {
            args: Prisma.ProfessionalSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>[]
          }
          create: {
            args: Prisma.ProfessionalSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          createMany: {
            args: Prisma.ProfessionalSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>[]
          }
          delete: {
            args: Prisma.ProfessionalSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          update: {
            args: Prisma.ProfessionalSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionalSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionalSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalSessionPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionalSession>
          }
          groupBy: {
            args: Prisma.ProfessionalSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalSessionCountAggregateOutputType> | number
          }
        }
      }
      CaseAssignment: {
        payload: Prisma.$CaseAssignmentPayload<ExtArgs>
        fields: Prisma.CaseAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CaseAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CaseAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          findFirst: {
            args: Prisma.CaseAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CaseAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          findMany: {
            args: Prisma.CaseAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>[]
          }
          create: {
            args: Prisma.CaseAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          createMany: {
            args: Prisma.CaseAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CaseAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>[]
          }
          delete: {
            args: Prisma.CaseAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          update: {
            args: Prisma.CaseAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.CaseAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CaseAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CaseAssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>[]
          }
          upsert: {
            args: Prisma.CaseAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CaseAssignmentPayload>
          }
          aggregate: {
            args: Prisma.CaseAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCaseAssignment>
          }
          groupBy: {
            args: Prisma.CaseAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CaseAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CaseAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<CaseAssignmentCountAggregateOutputType> | number
          }
        }
      }
      AIAnalysis: {
        payload: Prisma.$AIAnalysisPayload<ExtArgs>
        fields: Prisma.AIAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          findFirst: {
            args: Prisma.AIAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          findMany: {
            args: Prisma.AIAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>[]
          }
          create: {
            args: Prisma.AIAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          createMany: {
            args: Prisma.AIAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>[]
          }
          delete: {
            args: Prisma.AIAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          update: {
            args: Prisma.AIAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.AIAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AIAnalysisUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>[]
          }
          upsert: {
            args: Prisma.AIAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIAnalysisPayload>
          }
          aggregate: {
            args: Prisma.AIAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIAnalysis>
          }
          groupBy: {
            args: Prisma.AIAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<AIAnalysisCountAggregateOutputType> | number
          }
        }
      }
      MedicalOpinion: {
        payload: Prisma.$MedicalOpinionPayload<ExtArgs>
        fields: Prisma.MedicalOpinionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalOpinionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalOpinionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          findFirst: {
            args: Prisma.MedicalOpinionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalOpinionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          findMany: {
            args: Prisma.MedicalOpinionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>[]
          }
          create: {
            args: Prisma.MedicalOpinionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          createMany: {
            args: Prisma.MedicalOpinionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicalOpinionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>[]
          }
          delete: {
            args: Prisma.MedicalOpinionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          update: {
            args: Prisma.MedicalOpinionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          deleteMany: {
            args: Prisma.MedicalOpinionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalOpinionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicalOpinionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>[]
          }
          upsert: {
            args: Prisma.MedicalOpinionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicalOpinionPayload>
          }
          aggregate: {
            args: Prisma.MedicalOpinionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicalOpinion>
          }
          groupBy: {
            args: Prisma.MedicalOpinionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicalOpinionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalOpinionCountArgs<ExtArgs>
            result: $Utils.Optional<MedicalOpinionCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalPayment: {
        payload: Prisma.$ProfessionalPaymentPayload<ExtArgs>
        fields: Prisma.ProfessionalPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          findFirst: {
            args: Prisma.ProfessionalPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          findMany: {
            args: Prisma.ProfessionalPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>[]
          }
          create: {
            args: Prisma.ProfessionalPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          createMany: {
            args: Prisma.ProfessionalPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalPaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>[]
          }
          delete: {
            args: Prisma.ProfessionalPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          update: {
            args: Prisma.ProfessionalPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionalPaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>[]
          }
          upsert: {
            args: Prisma.ProfessionalPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalPaymentPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionalPayment>
          }
          groupBy: {
            args: Prisma.ProfessionalPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalPaymentCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      ProfessionalCandidate: {
        payload: Prisma.$ProfessionalCandidatePayload<ExtArgs>
        fields: Prisma.ProfessionalCandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfessionalCandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfessionalCandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          findFirst: {
            args: Prisma.ProfessionalCandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfessionalCandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          findMany: {
            args: Prisma.ProfessionalCandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>[]
          }
          create: {
            args: Prisma.ProfessionalCandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          createMany: {
            args: Prisma.ProfessionalCandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfessionalCandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>[]
          }
          delete: {
            args: Prisma.ProfessionalCandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          update: {
            args: Prisma.ProfessionalCandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          deleteMany: {
            args: Prisma.ProfessionalCandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfessionalCandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfessionalCandidateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>[]
          }
          upsert: {
            args: Prisma.ProfessionalCandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfessionalCandidatePayload>
          }
          aggregate: {
            args: Prisma.ProfessionalCandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionalCandidate>
          }
          groupBy: {
            args: Prisma.ProfessionalCandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalCandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfessionalCandidateCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalCandidateCountAggregateOutputType> | number
          }
        }
      }
      CandidateDocument: {
        payload: Prisma.$CandidateDocumentPayload<ExtArgs>
        fields: Prisma.CandidateDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          findFirst: {
            args: Prisma.CandidateDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          findMany: {
            args: Prisma.CandidateDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>[]
          }
          create: {
            args: Prisma.CandidateDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          createMany: {
            args: Prisma.CandidateDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>[]
          }
          delete: {
            args: Prisma.CandidateDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          update: {
            args: Prisma.CandidateDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          deleteMany: {
            args: Prisma.CandidateDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateDocumentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>[]
          }
          upsert: {
            args: Prisma.CandidateDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateDocumentPayload>
          }
          aggregate: {
            args: Prisma.CandidateDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidateDocument>
          }
          groupBy: {
            args: Prisma.CandidateDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateDocumentCountAggregateOutputType> | number
          }
        }
      }
      ApplicationReview: {
        payload: Prisma.$ApplicationReviewPayload<ExtArgs>
        fields: Prisma.ApplicationReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          findFirst: {
            args: Prisma.ApplicationReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          findMany: {
            args: Prisma.ApplicationReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>[]
          }
          create: {
            args: Prisma.ApplicationReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          createMany: {
            args: Prisma.ApplicationReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>[]
          }
          delete: {
            args: Prisma.ApplicationReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          update: {
            args: Prisma.ApplicationReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationReviewPayload>
          }
          aggregate: {
            args: Prisma.ApplicationReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationReview>
          }
          groupBy: {
            args: Prisma.ApplicationReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationReviewCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    customer?: CustomerOmit
    tempSubmission?: TempSubmissionOmit
    customerSession?: CustomerSessionOmit
    customerNotification?: CustomerNotificationOmit
    servicePricing?: ServicePricingOmit
    questionnaireResponse?: QuestionnaireResponseOmit
    casePayment?: CasePaymentOmit
    medicalCase?: MedicalCaseOmit
    caseStatusHistory?: CaseStatusHistoryOmit
    uploadedFile?: UploadedFileOmit
    medicalProfessional?: MedicalProfessionalOmit
    professionalSession?: ProfessionalSessionOmit
    caseAssignment?: CaseAssignmentOmit
    aIAnalysis?: AIAnalysisOmit
    medicalOpinion?: MedicalOpinionOmit
    professionalPayment?: ProfessionalPaymentOmit
    admin?: AdminOmit
    professionalCandidate?: ProfessionalCandidateOmit
    candidateDocument?: CandidateDocumentOmit
    applicationReview?: ApplicationReviewOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    cases: number
    customerSessions: number
    notifications: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | CustomerCountOutputTypeCountCasesArgs
    customerSessions?: boolean | CustomerCountOutputTypeCountCustomerSessionsArgs
    notifications?: boolean | CustomerCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalCaseWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountCustomerSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSessionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerNotificationWhereInput
  }


  /**
   * Count Type MedicalCaseCountOutputType
   */

  export type MedicalCaseCountOutputType = {
    uploadedFiles: number
    statusHistory: number
    caseAssignments: number
    aiAnalyses: number
    medicalOpinions: number
    professionalPayments: number
  }

  export type MedicalCaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploadedFiles?: boolean | MedicalCaseCountOutputTypeCountUploadedFilesArgs
    statusHistory?: boolean | MedicalCaseCountOutputTypeCountStatusHistoryArgs
    caseAssignments?: boolean | MedicalCaseCountOutputTypeCountCaseAssignmentsArgs
    aiAnalyses?: boolean | MedicalCaseCountOutputTypeCountAiAnalysesArgs
    medicalOpinions?: boolean | MedicalCaseCountOutputTypeCountMedicalOpinionsArgs
    professionalPayments?: boolean | MedicalCaseCountOutputTypeCountProfessionalPaymentsArgs
  }

  // Custom InputTypes
  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCaseCountOutputType
     */
    select?: MedicalCaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UploadedFileWhereInput
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountStatusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseStatusHistoryWhereInput
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountCaseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseAssignmentWhereInput
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountAiAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIAnalysisWhereInput
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountMedicalOpinionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalOpinionWhereInput
  }

  /**
   * MedicalCaseCountOutputType without action
   */
  export type MedicalCaseCountOutputTypeCountProfessionalPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalPaymentWhereInput
  }


  /**
   * Count Type MedicalProfessionalCountOutputType
   */

  export type MedicalProfessionalCountOutputType = {
    caseAssignments: number
    medicalOpinions: number
    professionalPayments: number
    professionalSessions: number
  }

  export type MedicalProfessionalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    caseAssignments?: boolean | MedicalProfessionalCountOutputTypeCountCaseAssignmentsArgs
    medicalOpinions?: boolean | MedicalProfessionalCountOutputTypeCountMedicalOpinionsArgs
    professionalPayments?: boolean | MedicalProfessionalCountOutputTypeCountProfessionalPaymentsArgs
    professionalSessions?: boolean | MedicalProfessionalCountOutputTypeCountProfessionalSessionsArgs
  }

  // Custom InputTypes
  /**
   * MedicalProfessionalCountOutputType without action
   */
  export type MedicalProfessionalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessionalCountOutputType
     */
    select?: MedicalProfessionalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicalProfessionalCountOutputType without action
   */
  export type MedicalProfessionalCountOutputTypeCountCaseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseAssignmentWhereInput
  }

  /**
   * MedicalProfessionalCountOutputType without action
   */
  export type MedicalProfessionalCountOutputTypeCountMedicalOpinionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalOpinionWhereInput
  }

  /**
   * MedicalProfessionalCountOutputType without action
   */
  export type MedicalProfessionalCountOutputTypeCountProfessionalPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalPaymentWhereInput
  }

  /**
   * MedicalProfessionalCountOutputType without action
   */
  export type MedicalProfessionalCountOutputTypeCountProfessionalSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalSessionWhereInput
  }


  /**
   * Count Type ProfessionalCandidateCountOutputType
   */

  export type ProfessionalCandidateCountOutputType = {
    documents: number
    reviews: number
  }

  export type ProfessionalCandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | ProfessionalCandidateCountOutputTypeCountDocumentsArgs
    reviews?: boolean | ProfessionalCandidateCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * ProfessionalCandidateCountOutputType without action
   */
  export type ProfessionalCandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidateCountOutputType
     */
    select?: ProfessionalCandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionalCandidateCountOutputType without action
   */
  export type ProfessionalCandidateCountOutputTypeCountDocumentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateDocumentWhereInput
  }

  /**
   * ProfessionalCandidateCountOutputType without action
   */
  export type ProfessionalCandidateCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationReviewWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    hashedPassword: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    hashedPassword: string
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | User$customerArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "hashedPassword" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | User$customerArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      hashedPassword: string
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends User$customerArgs<ExtArgs> = {}>(args?: Subset<T, User$customerArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly metadata: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.customer
   */
  export type User$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    where?: CustomerWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    email: string | null
    phone: string | null
    hashedPassword: string | null
    emailVerified: boolean | null
    phoneVerified: boolean | null
    twoFactorEnabled: boolean | null
    twoFactorMethod: $Enums.TwoFactorMethod | null
    twoFactorSecret: string | null
    preferredLanguage: $Enums.Language | null
    preferredChannel: $Enums.CommunicationChannel | null
    emailNotifications: boolean | null
    smsNotifications: boolean | null
    whatsappNotifications: boolean | null
    googleId: string | null
    appleId: string | null
    microsoftId: string | null
    oauthProvider: string | null
    profileCompleted: boolean | null
    termsAccepted: boolean | null
    privacyAccepted: boolean | null
    marketingConsent: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    email: string | null
    phone: string | null
    hashedPassword: string | null
    emailVerified: boolean | null
    phoneVerified: boolean | null
    twoFactorEnabled: boolean | null
    twoFactorMethod: $Enums.TwoFactorMethod | null
    twoFactorSecret: string | null
    preferredLanguage: $Enums.Language | null
    preferredChannel: $Enums.CommunicationChannel | null
    emailNotifications: boolean | null
    smsNotifications: boolean | null
    whatsappNotifications: boolean | null
    googleId: string | null
    appleId: string | null
    microsoftId: string | null
    oauthProvider: string | null
    profileCompleted: boolean | null
    termsAccepted: boolean | null
    privacyAccepted: boolean | null
    marketingConsent: boolean | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    firstName: number
    middleName: number
    lastName: number
    dateOfBirth: number
    gender: number
    email: number
    phone: number
    hashedPassword: number
    emailVerified: number
    phoneVerified: number
    twoFactorEnabled: number
    twoFactorMethod: number
    twoFactorSecret: number
    preferredLanguage: number
    preferredChannel: number
    emailNotifications: number
    smsNotifications: number
    whatsappNotifications: number
    googleId: number
    appleId: number
    microsoftId: number
    oauthProvider: number
    profileCompleted: number
    termsAccepted: number
    privacyAccepted: number
    marketingConsent: number
    metadata: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerMinAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    email?: true
    phone?: true
    hashedPassword?: true
    emailVerified?: true
    phoneVerified?: true
    twoFactorEnabled?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    preferredLanguage?: true
    preferredChannel?: true
    emailNotifications?: true
    smsNotifications?: true
    whatsappNotifications?: true
    googleId?: true
    appleId?: true
    microsoftId?: true
    oauthProvider?: true
    profileCompleted?: true
    termsAccepted?: true
    privacyAccepted?: true
    marketingConsent?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    email?: true
    phone?: true
    hashedPassword?: true
    emailVerified?: true
    phoneVerified?: true
    twoFactorEnabled?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    preferredLanguage?: true
    preferredChannel?: true
    emailNotifications?: true
    smsNotifications?: true
    whatsappNotifications?: true
    googleId?: true
    appleId?: true
    microsoftId?: true
    oauthProvider?: true
    profileCompleted?: true
    termsAccepted?: true
    privacyAccepted?: true
    marketingConsent?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    gender?: true
    email?: true
    phone?: true
    hashedPassword?: true
    emailVerified?: true
    phoneVerified?: true
    twoFactorEnabled?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    preferredLanguage?: true
    preferredChannel?: true
    emailNotifications?: true
    smsNotifications?: true
    whatsappNotifications?: true
    googleId?: true
    appleId?: true
    microsoftId?: true
    oauthProvider?: true
    profileCompleted?: true
    termsAccepted?: true
    privacyAccepted?: true
    marketingConsent?: true
    metadata?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    firstName: string
    middleName: string | null
    lastName: string
    dateOfBirth: Date | null
    gender: $Enums.Gender | null
    email: string
    phone: string | null
    hashedPassword: string
    emailVerified: boolean
    phoneVerified: boolean
    twoFactorEnabled: boolean
    twoFactorMethod: $Enums.TwoFactorMethod
    twoFactorSecret: string | null
    preferredLanguage: $Enums.Language
    preferredChannel: $Enums.CommunicationChannel
    emailNotifications: boolean
    smsNotifications: boolean
    whatsappNotifications: boolean
    googleId: string | null
    appleId: string | null
    microsoftId: string | null
    oauthProvider: string | null
    profileCompleted: boolean
    termsAccepted: boolean
    privacyAccepted: boolean
    marketingConsent: boolean
    metadata: JsonValue | null
    userId: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    hashedPassword?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    preferredLanguage?: boolean
    preferredChannel?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: boolean
    appleId?: boolean
    microsoftId?: boolean
    oauthProvider?: boolean
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Customer$userArgs<ExtArgs>
    cases?: boolean | Customer$casesArgs<ExtArgs>
    customerSessions?: boolean | Customer$customerSessionsArgs<ExtArgs>
    notifications?: boolean | Customer$notificationsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    hashedPassword?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    preferredLanguage?: boolean
    preferredChannel?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: boolean
    appleId?: boolean
    microsoftId?: boolean
    oauthProvider?: boolean
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Customer$userArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    hashedPassword?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    preferredLanguage?: boolean
    preferredChannel?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: boolean
    appleId?: boolean
    microsoftId?: boolean
    oauthProvider?: boolean
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Customer$userArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    email?: boolean
    phone?: boolean
    hashedPassword?: boolean
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    preferredLanguage?: boolean
    preferredChannel?: boolean
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: boolean
    appleId?: boolean
    microsoftId?: boolean
    oauthProvider?: boolean
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "middleName" | "lastName" | "dateOfBirth" | "gender" | "email" | "phone" | "hashedPassword" | "emailVerified" | "phoneVerified" | "twoFactorEnabled" | "twoFactorMethod" | "twoFactorSecret" | "preferredLanguage" | "preferredChannel" | "emailNotifications" | "smsNotifications" | "whatsappNotifications" | "googleId" | "appleId" | "microsoftId" | "oauthProvider" | "profileCompleted" | "termsAccepted" | "privacyAccepted" | "marketingConsent" | "metadata" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Customer$userArgs<ExtArgs>
    cases?: boolean | Customer$casesArgs<ExtArgs>
    customerSessions?: boolean | Customer$customerSessionsArgs<ExtArgs>
    notifications?: boolean | Customer$notificationsArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Customer$userArgs<ExtArgs>
  }
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Customer$userArgs<ExtArgs>
  }

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      cases: Prisma.$MedicalCasePayload<ExtArgs>[]
      customerSessions: Prisma.$CustomerSessionPayload<ExtArgs>[]
      notifications: Prisma.$CustomerNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      middleName: string | null
      lastName: string
      dateOfBirth: Date | null
      gender: $Enums.Gender | null
      email: string
      phone: string | null
      hashedPassword: string
      emailVerified: boolean
      phoneVerified: boolean
      twoFactorEnabled: boolean
      twoFactorMethod: $Enums.TwoFactorMethod
      twoFactorSecret: string | null
      preferredLanguage: $Enums.Language
      preferredChannel: $Enums.CommunicationChannel
      emailNotifications: boolean
      smsNotifications: boolean
      whatsappNotifications: boolean
      googleId: string | null
      appleId: string | null
      microsoftId: string | null
      oauthProvider: string | null
      profileCompleted: boolean
      termsAccepted: boolean
      privacyAccepted: boolean
      marketingConsent: boolean
      metadata: Prisma.JsonValue | null
      userId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Customer$userArgs<ExtArgs> = {}>(args?: Subset<T, Customer$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    cases<T extends Customer$casesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customerSessions<T extends Customer$customerSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$customerSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Customer$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly firstName: FieldRef<"Customer", 'String'>
    readonly middleName: FieldRef<"Customer", 'String'>
    readonly lastName: FieldRef<"Customer", 'String'>
    readonly dateOfBirth: FieldRef<"Customer", 'DateTime'>
    readonly gender: FieldRef<"Customer", 'Gender'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly hashedPassword: FieldRef<"Customer", 'String'>
    readonly emailVerified: FieldRef<"Customer", 'Boolean'>
    readonly phoneVerified: FieldRef<"Customer", 'Boolean'>
    readonly twoFactorEnabled: FieldRef<"Customer", 'Boolean'>
    readonly twoFactorMethod: FieldRef<"Customer", 'TwoFactorMethod'>
    readonly twoFactorSecret: FieldRef<"Customer", 'String'>
    readonly preferredLanguage: FieldRef<"Customer", 'Language'>
    readonly preferredChannel: FieldRef<"Customer", 'CommunicationChannel'>
    readonly emailNotifications: FieldRef<"Customer", 'Boolean'>
    readonly smsNotifications: FieldRef<"Customer", 'Boolean'>
    readonly whatsappNotifications: FieldRef<"Customer", 'Boolean'>
    readonly googleId: FieldRef<"Customer", 'String'>
    readonly appleId: FieldRef<"Customer", 'String'>
    readonly microsoftId: FieldRef<"Customer", 'String'>
    readonly oauthProvider: FieldRef<"Customer", 'String'>
    readonly profileCompleted: FieldRef<"Customer", 'Boolean'>
    readonly termsAccepted: FieldRef<"Customer", 'Boolean'>
    readonly privacyAccepted: FieldRef<"Customer", 'Boolean'>
    readonly marketingConsent: FieldRef<"Customer", 'Boolean'>
    readonly metadata: FieldRef<"Customer", 'Json'>
    readonly userId: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.user
   */
  export type Customer$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Customer.cases
   */
  export type Customer$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    where?: MedicalCaseWhereInput
    orderBy?: MedicalCaseOrderByWithRelationInput | MedicalCaseOrderByWithRelationInput[]
    cursor?: MedicalCaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalCaseScalarFieldEnum | MedicalCaseScalarFieldEnum[]
  }

  /**
   * Customer.customerSessions
   */
  export type Customer$customerSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    where?: CustomerSessionWhereInput
    orderBy?: CustomerSessionOrderByWithRelationInput | CustomerSessionOrderByWithRelationInput[]
    cursor?: CustomerSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerSessionScalarFieldEnum | CustomerSessionScalarFieldEnum[]
  }

  /**
   * Customer.notifications
   */
  export type Customer$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    where?: CustomerNotificationWhereInput
    orderBy?: CustomerNotificationOrderByWithRelationInput | CustomerNotificationOrderByWithRelationInput[]
    cursor?: CustomerNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerNotificationScalarFieldEnum | CustomerNotificationScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model TempSubmission
   */

  export type AggregateTempSubmission = {
    _count: TempSubmissionCountAggregateOutputType | null
    _min: TempSubmissionMinAggregateOutputType | null
    _max: TempSubmissionMaxAggregateOutputType | null
  }

  export type TempSubmissionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type TempSubmissionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type TempSubmissionCountAggregateOutputType = {
    id: number
    payload: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type TempSubmissionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    createdAt?: true
  }

  export type TempSubmissionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    createdAt?: true
  }

  export type TempSubmissionCountAggregateInputType = {
    id?: true
    payload?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type TempSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TempSubmission to aggregate.
     */
    where?: TempSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TempSubmissions to fetch.
     */
    orderBy?: TempSubmissionOrderByWithRelationInput | TempSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TempSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TempSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TempSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TempSubmissions
    **/
    _count?: true | TempSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TempSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TempSubmissionMaxAggregateInputType
  }

  export type GetTempSubmissionAggregateType<T extends TempSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateTempSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTempSubmission[P]>
      : GetScalarType<T[P], AggregateTempSubmission[P]>
  }




  export type TempSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TempSubmissionWhereInput
    orderBy?: TempSubmissionOrderByWithAggregationInput | TempSubmissionOrderByWithAggregationInput[]
    by: TempSubmissionScalarFieldEnum[] | TempSubmissionScalarFieldEnum
    having?: TempSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TempSubmissionCountAggregateInputType | true
    _min?: TempSubmissionMinAggregateInputType
    _max?: TempSubmissionMaxAggregateInputType
  }

  export type TempSubmissionGroupByOutputType = {
    id: string
    payload: JsonValue
    expiresAt: Date
    createdAt: Date
    _count: TempSubmissionCountAggregateOutputType | null
    _min: TempSubmissionMinAggregateOutputType | null
    _max: TempSubmissionMaxAggregateOutputType | null
  }

  type GetTempSubmissionGroupByPayload<T extends TempSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TempSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TempSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TempSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], TempSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type TempSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payload?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tempSubmission"]>

  export type TempSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payload?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tempSubmission"]>

  export type TempSubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payload?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["tempSubmission"]>

  export type TempSubmissionSelectScalar = {
    id?: boolean
    payload?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type TempSubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "payload" | "expiresAt" | "createdAt", ExtArgs["result"]["tempSubmission"]>

  export type $TempSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TempSubmission"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      payload: Prisma.JsonValue
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["tempSubmission"]>
    composites: {}
  }

  type TempSubmissionGetPayload<S extends boolean | null | undefined | TempSubmissionDefaultArgs> = $Result.GetResult<Prisma.$TempSubmissionPayload, S>

  type TempSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TempSubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TempSubmissionCountAggregateInputType | true
    }

  export interface TempSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TempSubmission'], meta: { name: 'TempSubmission' } }
    /**
     * Find zero or one TempSubmission that matches the filter.
     * @param {TempSubmissionFindUniqueArgs} args - Arguments to find a TempSubmission
     * @example
     * // Get one TempSubmission
     * const tempSubmission = await prisma.tempSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TempSubmissionFindUniqueArgs>(args: SelectSubset<T, TempSubmissionFindUniqueArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TempSubmission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TempSubmissionFindUniqueOrThrowArgs} args - Arguments to find a TempSubmission
     * @example
     * // Get one TempSubmission
     * const tempSubmission = await prisma.tempSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TempSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, TempSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TempSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionFindFirstArgs} args - Arguments to find a TempSubmission
     * @example
     * // Get one TempSubmission
     * const tempSubmission = await prisma.tempSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TempSubmissionFindFirstArgs>(args?: SelectSubset<T, TempSubmissionFindFirstArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TempSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionFindFirstOrThrowArgs} args - Arguments to find a TempSubmission
     * @example
     * // Get one TempSubmission
     * const tempSubmission = await prisma.tempSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TempSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, TempSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TempSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TempSubmissions
     * const tempSubmissions = await prisma.tempSubmission.findMany()
     * 
     * // Get first 10 TempSubmissions
     * const tempSubmissions = await prisma.tempSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tempSubmissionWithIdOnly = await prisma.tempSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TempSubmissionFindManyArgs>(args?: SelectSubset<T, TempSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TempSubmission.
     * @param {TempSubmissionCreateArgs} args - Arguments to create a TempSubmission.
     * @example
     * // Create one TempSubmission
     * const TempSubmission = await prisma.tempSubmission.create({
     *   data: {
     *     // ... data to create a TempSubmission
     *   }
     * })
     * 
     */
    create<T extends TempSubmissionCreateArgs>(args: SelectSubset<T, TempSubmissionCreateArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TempSubmissions.
     * @param {TempSubmissionCreateManyArgs} args - Arguments to create many TempSubmissions.
     * @example
     * // Create many TempSubmissions
     * const tempSubmission = await prisma.tempSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TempSubmissionCreateManyArgs>(args?: SelectSubset<T, TempSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TempSubmissions and returns the data saved in the database.
     * @param {TempSubmissionCreateManyAndReturnArgs} args - Arguments to create many TempSubmissions.
     * @example
     * // Create many TempSubmissions
     * const tempSubmission = await prisma.tempSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TempSubmissions and only return the `id`
     * const tempSubmissionWithIdOnly = await prisma.tempSubmission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TempSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, TempSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TempSubmission.
     * @param {TempSubmissionDeleteArgs} args - Arguments to delete one TempSubmission.
     * @example
     * // Delete one TempSubmission
     * const TempSubmission = await prisma.tempSubmission.delete({
     *   where: {
     *     // ... filter to delete one TempSubmission
     *   }
     * })
     * 
     */
    delete<T extends TempSubmissionDeleteArgs>(args: SelectSubset<T, TempSubmissionDeleteArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TempSubmission.
     * @param {TempSubmissionUpdateArgs} args - Arguments to update one TempSubmission.
     * @example
     * // Update one TempSubmission
     * const tempSubmission = await prisma.tempSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TempSubmissionUpdateArgs>(args: SelectSubset<T, TempSubmissionUpdateArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TempSubmissions.
     * @param {TempSubmissionDeleteManyArgs} args - Arguments to filter TempSubmissions to delete.
     * @example
     * // Delete a few TempSubmissions
     * const { count } = await prisma.tempSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TempSubmissionDeleteManyArgs>(args?: SelectSubset<T, TempSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TempSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TempSubmissions
     * const tempSubmission = await prisma.tempSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TempSubmissionUpdateManyArgs>(args: SelectSubset<T, TempSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TempSubmissions and returns the data updated in the database.
     * @param {TempSubmissionUpdateManyAndReturnArgs} args - Arguments to update many TempSubmissions.
     * @example
     * // Update many TempSubmissions
     * const tempSubmission = await prisma.tempSubmission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TempSubmissions and only return the `id`
     * const tempSubmissionWithIdOnly = await prisma.tempSubmission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TempSubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, TempSubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TempSubmission.
     * @param {TempSubmissionUpsertArgs} args - Arguments to update or create a TempSubmission.
     * @example
     * // Update or create a TempSubmission
     * const tempSubmission = await prisma.tempSubmission.upsert({
     *   create: {
     *     // ... data to create a TempSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TempSubmission we want to update
     *   }
     * })
     */
    upsert<T extends TempSubmissionUpsertArgs>(args: SelectSubset<T, TempSubmissionUpsertArgs<ExtArgs>>): Prisma__TempSubmissionClient<$Result.GetResult<Prisma.$TempSubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TempSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionCountArgs} args - Arguments to filter TempSubmissions to count.
     * @example
     * // Count the number of TempSubmissions
     * const count = await prisma.tempSubmission.count({
     *   where: {
     *     // ... the filter for the TempSubmissions we want to count
     *   }
     * })
    **/
    count<T extends TempSubmissionCountArgs>(
      args?: Subset<T, TempSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TempSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TempSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TempSubmissionAggregateArgs>(args: Subset<T, TempSubmissionAggregateArgs>): Prisma.PrismaPromise<GetTempSubmissionAggregateType<T>>

    /**
     * Group by TempSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TempSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TempSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TempSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: TempSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TempSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTempSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TempSubmission model
   */
  readonly fields: TempSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TempSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TempSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TempSubmission model
   */
  interface TempSubmissionFieldRefs {
    readonly id: FieldRef<"TempSubmission", 'String'>
    readonly payload: FieldRef<"TempSubmission", 'Json'>
    readonly expiresAt: FieldRef<"TempSubmission", 'DateTime'>
    readonly createdAt: FieldRef<"TempSubmission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TempSubmission findUnique
   */
  export type TempSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which TempSubmission to fetch.
     */
    where: TempSubmissionWhereUniqueInput
  }

  /**
   * TempSubmission findUniqueOrThrow
   */
  export type TempSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which TempSubmission to fetch.
     */
    where: TempSubmissionWhereUniqueInput
  }

  /**
   * TempSubmission findFirst
   */
  export type TempSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which TempSubmission to fetch.
     */
    where?: TempSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TempSubmissions to fetch.
     */
    orderBy?: TempSubmissionOrderByWithRelationInput | TempSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TempSubmissions.
     */
    cursor?: TempSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TempSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TempSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TempSubmissions.
     */
    distinct?: TempSubmissionScalarFieldEnum | TempSubmissionScalarFieldEnum[]
  }

  /**
   * TempSubmission findFirstOrThrow
   */
  export type TempSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which TempSubmission to fetch.
     */
    where?: TempSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TempSubmissions to fetch.
     */
    orderBy?: TempSubmissionOrderByWithRelationInput | TempSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TempSubmissions.
     */
    cursor?: TempSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TempSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TempSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TempSubmissions.
     */
    distinct?: TempSubmissionScalarFieldEnum | TempSubmissionScalarFieldEnum[]
  }

  /**
   * TempSubmission findMany
   */
  export type TempSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter, which TempSubmissions to fetch.
     */
    where?: TempSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TempSubmissions to fetch.
     */
    orderBy?: TempSubmissionOrderByWithRelationInput | TempSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TempSubmissions.
     */
    cursor?: TempSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TempSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TempSubmissions.
     */
    skip?: number
    distinct?: TempSubmissionScalarFieldEnum | TempSubmissionScalarFieldEnum[]
  }

  /**
   * TempSubmission create
   */
  export type TempSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * The data needed to create a TempSubmission.
     */
    data: XOR<TempSubmissionCreateInput, TempSubmissionUncheckedCreateInput>
  }

  /**
   * TempSubmission createMany
   */
  export type TempSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TempSubmissions.
     */
    data: TempSubmissionCreateManyInput | TempSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TempSubmission createManyAndReturn
   */
  export type TempSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many TempSubmissions.
     */
    data: TempSubmissionCreateManyInput | TempSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TempSubmission update
   */
  export type TempSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * The data needed to update a TempSubmission.
     */
    data: XOR<TempSubmissionUpdateInput, TempSubmissionUncheckedUpdateInput>
    /**
     * Choose, which TempSubmission to update.
     */
    where: TempSubmissionWhereUniqueInput
  }

  /**
   * TempSubmission updateMany
   */
  export type TempSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TempSubmissions.
     */
    data: XOR<TempSubmissionUpdateManyMutationInput, TempSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which TempSubmissions to update
     */
    where?: TempSubmissionWhereInput
    /**
     * Limit how many TempSubmissions to update.
     */
    limit?: number
  }

  /**
   * TempSubmission updateManyAndReturn
   */
  export type TempSubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * The data used to update TempSubmissions.
     */
    data: XOR<TempSubmissionUpdateManyMutationInput, TempSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which TempSubmissions to update
     */
    where?: TempSubmissionWhereInput
    /**
     * Limit how many TempSubmissions to update.
     */
    limit?: number
  }

  /**
   * TempSubmission upsert
   */
  export type TempSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * The filter to search for the TempSubmission to update in case it exists.
     */
    where: TempSubmissionWhereUniqueInput
    /**
     * In case the TempSubmission found by the `where` argument doesn't exist, create a new TempSubmission with this data.
     */
    create: XOR<TempSubmissionCreateInput, TempSubmissionUncheckedCreateInput>
    /**
     * In case the TempSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TempSubmissionUpdateInput, TempSubmissionUncheckedUpdateInput>
  }

  /**
   * TempSubmission delete
   */
  export type TempSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
    /**
     * Filter which TempSubmission to delete.
     */
    where: TempSubmissionWhereUniqueInput
  }

  /**
   * TempSubmission deleteMany
   */
  export type TempSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TempSubmissions to delete
     */
    where?: TempSubmissionWhereInput
    /**
     * Limit how many TempSubmissions to delete.
     */
    limit?: number
  }

  /**
   * TempSubmission without action
   */
  export type TempSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TempSubmission
     */
    select?: TempSubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TempSubmission
     */
    omit?: TempSubmissionOmit<ExtArgs> | null
  }


  /**
   * Model CustomerSession
   */

  export type AggregateCustomerSession = {
    _count: CustomerSessionCountAggregateOutputType | null
    _min: CustomerSessionMinAggregateOutputType | null
    _max: CustomerSessionMaxAggregateOutputType | null
  }

  export type CustomerSessionMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    sessionToken: string | null
    twoFactorVerified: boolean | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    lastActivity: Date | null
    createdAt: Date | null
  }

  export type CustomerSessionMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    sessionToken: string | null
    twoFactorVerified: boolean | null
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date | null
    lastActivity: Date | null
    createdAt: Date | null
  }

  export type CustomerSessionCountAggregateOutputType = {
    id: number
    customerId: number
    sessionToken: number
    twoFactorVerified: number
    ipAddress: number
    userAgent: number
    expiresAt: number
    lastActivity: number
    createdAt: number
    _all: number
  }


  export type CustomerSessionMinAggregateInputType = {
    id?: true
    customerId?: true
    sessionToken?: true
    twoFactorVerified?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
  }

  export type CustomerSessionMaxAggregateInputType = {
    id?: true
    customerId?: true
    sessionToken?: true
    twoFactorVerified?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
  }

  export type CustomerSessionCountAggregateInputType = {
    id?: true
    customerId?: true
    sessionToken?: true
    twoFactorVerified?: true
    ipAddress?: true
    userAgent?: true
    expiresAt?: true
    lastActivity?: true
    createdAt?: true
    _all?: true
  }

  export type CustomerSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerSession to aggregate.
     */
    where?: CustomerSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSessions to fetch.
     */
    orderBy?: CustomerSessionOrderByWithRelationInput | CustomerSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerSessions
    **/
    _count?: true | CustomerSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerSessionMaxAggregateInputType
  }

  export type GetCustomerSessionAggregateType<T extends CustomerSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerSession[P]>
      : GetScalarType<T[P], AggregateCustomerSession[P]>
  }




  export type CustomerSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerSessionWhereInput
    orderBy?: CustomerSessionOrderByWithAggregationInput | CustomerSessionOrderByWithAggregationInput[]
    by: CustomerSessionScalarFieldEnum[] | CustomerSessionScalarFieldEnum
    having?: CustomerSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerSessionCountAggregateInputType | true
    _min?: CustomerSessionMinAggregateInputType
    _max?: CustomerSessionMaxAggregateInputType
  }

  export type CustomerSessionGroupByOutputType = {
    id: string
    customerId: string
    sessionToken: string
    twoFactorVerified: boolean
    ipAddress: string | null
    userAgent: string | null
    expiresAt: Date
    lastActivity: Date
    createdAt: Date
    _count: CustomerSessionCountAggregateOutputType | null
    _min: CustomerSessionMinAggregateOutputType | null
    _max: CustomerSessionMaxAggregateOutputType | null
  }

  type GetCustomerSessionGroupByPayload<T extends CustomerSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerSessionGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerSessionGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSession"]>

  export type CustomerSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSession"]>

  export type CustomerSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerSession"]>

  export type CustomerSessionSelectScalar = {
    id?: boolean
    customerId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    expiresAt?: boolean
    lastActivity?: boolean
    createdAt?: boolean
  }

  export type CustomerSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "sessionToken" | "twoFactorVerified" | "ipAddress" | "userAgent" | "expiresAt" | "lastActivity" | "createdAt", ExtArgs["result"]["customerSession"]>
  export type CustomerSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerSession"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      sessionToken: string
      twoFactorVerified: boolean
      ipAddress: string | null
      userAgent: string | null
      expiresAt: Date
      lastActivity: Date
      createdAt: Date
    }, ExtArgs["result"]["customerSession"]>
    composites: {}
  }

  type CustomerSessionGetPayload<S extends boolean | null | undefined | CustomerSessionDefaultArgs> = $Result.GetResult<Prisma.$CustomerSessionPayload, S>

  type CustomerSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerSessionCountAggregateInputType | true
    }

  export interface CustomerSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerSession'], meta: { name: 'CustomerSession' } }
    /**
     * Find zero or one CustomerSession that matches the filter.
     * @param {CustomerSessionFindUniqueArgs} args - Arguments to find a CustomerSession
     * @example
     * // Get one CustomerSession
     * const customerSession = await prisma.customerSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerSessionFindUniqueArgs>(args: SelectSubset<T, CustomerSessionFindUniqueArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerSessionFindUniqueOrThrowArgs} args - Arguments to find a CustomerSession
     * @example
     * // Get one CustomerSession
     * const customerSession = await prisma.customerSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionFindFirstArgs} args - Arguments to find a CustomerSession
     * @example
     * // Get one CustomerSession
     * const customerSession = await prisma.customerSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerSessionFindFirstArgs>(args?: SelectSubset<T, CustomerSessionFindFirstArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionFindFirstOrThrowArgs} args - Arguments to find a CustomerSession
     * @example
     * // Get one CustomerSession
     * const customerSession = await prisma.customerSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerSessions
     * const customerSessions = await prisma.customerSession.findMany()
     * 
     * // Get first 10 CustomerSessions
     * const customerSessions = await prisma.customerSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerSessionWithIdOnly = await prisma.customerSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerSessionFindManyArgs>(args?: SelectSubset<T, CustomerSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerSession.
     * @param {CustomerSessionCreateArgs} args - Arguments to create a CustomerSession.
     * @example
     * // Create one CustomerSession
     * const CustomerSession = await prisma.customerSession.create({
     *   data: {
     *     // ... data to create a CustomerSession
     *   }
     * })
     * 
     */
    create<T extends CustomerSessionCreateArgs>(args: SelectSubset<T, CustomerSessionCreateArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerSessions.
     * @param {CustomerSessionCreateManyArgs} args - Arguments to create many CustomerSessions.
     * @example
     * // Create many CustomerSessions
     * const customerSession = await prisma.customerSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerSessionCreateManyArgs>(args?: SelectSubset<T, CustomerSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerSessions and returns the data saved in the database.
     * @param {CustomerSessionCreateManyAndReturnArgs} args - Arguments to create many CustomerSessions.
     * @example
     * // Create many CustomerSessions
     * const customerSession = await prisma.customerSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerSessions and only return the `id`
     * const customerSessionWithIdOnly = await prisma.customerSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerSession.
     * @param {CustomerSessionDeleteArgs} args - Arguments to delete one CustomerSession.
     * @example
     * // Delete one CustomerSession
     * const CustomerSession = await prisma.customerSession.delete({
     *   where: {
     *     // ... filter to delete one CustomerSession
     *   }
     * })
     * 
     */
    delete<T extends CustomerSessionDeleteArgs>(args: SelectSubset<T, CustomerSessionDeleteArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerSession.
     * @param {CustomerSessionUpdateArgs} args - Arguments to update one CustomerSession.
     * @example
     * // Update one CustomerSession
     * const customerSession = await prisma.customerSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerSessionUpdateArgs>(args: SelectSubset<T, CustomerSessionUpdateArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerSessions.
     * @param {CustomerSessionDeleteManyArgs} args - Arguments to filter CustomerSessions to delete.
     * @example
     * // Delete a few CustomerSessions
     * const { count } = await prisma.customerSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerSessionDeleteManyArgs>(args?: SelectSubset<T, CustomerSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerSessions
     * const customerSession = await prisma.customerSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerSessionUpdateManyArgs>(args: SelectSubset<T, CustomerSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerSessions and returns the data updated in the database.
     * @param {CustomerSessionUpdateManyAndReturnArgs} args - Arguments to update many CustomerSessions.
     * @example
     * // Update many CustomerSessions
     * const customerSession = await prisma.customerSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerSessions and only return the `id`
     * const customerSessionWithIdOnly = await prisma.customerSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerSession.
     * @param {CustomerSessionUpsertArgs} args - Arguments to update or create a CustomerSession.
     * @example
     * // Update or create a CustomerSession
     * const customerSession = await prisma.customerSession.upsert({
     *   create: {
     *     // ... data to create a CustomerSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerSession we want to update
     *   }
     * })
     */
    upsert<T extends CustomerSessionUpsertArgs>(args: SelectSubset<T, CustomerSessionUpsertArgs<ExtArgs>>): Prisma__CustomerSessionClient<$Result.GetResult<Prisma.$CustomerSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionCountArgs} args - Arguments to filter CustomerSessions to count.
     * @example
     * // Count the number of CustomerSessions
     * const count = await prisma.customerSession.count({
     *   where: {
     *     // ... the filter for the CustomerSessions we want to count
     *   }
     * })
    **/
    count<T extends CustomerSessionCountArgs>(
      args?: Subset<T, CustomerSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerSessionAggregateArgs>(args: Subset<T, CustomerSessionAggregateArgs>): Prisma.PrismaPromise<GetCustomerSessionAggregateType<T>>

    /**
     * Group by CustomerSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerSessionGroupByArgs['orderBy'] }
        : { orderBy?: CustomerSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerSession model
   */
  readonly fields: CustomerSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerSession model
   */
  interface CustomerSessionFieldRefs {
    readonly id: FieldRef<"CustomerSession", 'String'>
    readonly customerId: FieldRef<"CustomerSession", 'String'>
    readonly sessionToken: FieldRef<"CustomerSession", 'String'>
    readonly twoFactorVerified: FieldRef<"CustomerSession", 'Boolean'>
    readonly ipAddress: FieldRef<"CustomerSession", 'String'>
    readonly userAgent: FieldRef<"CustomerSession", 'String'>
    readonly expiresAt: FieldRef<"CustomerSession", 'DateTime'>
    readonly lastActivity: FieldRef<"CustomerSession", 'DateTime'>
    readonly createdAt: FieldRef<"CustomerSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerSession findUnique
   */
  export type CustomerSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSession to fetch.
     */
    where: CustomerSessionWhereUniqueInput
  }

  /**
   * CustomerSession findUniqueOrThrow
   */
  export type CustomerSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSession to fetch.
     */
    where: CustomerSessionWhereUniqueInput
  }

  /**
   * CustomerSession findFirst
   */
  export type CustomerSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSession to fetch.
     */
    where?: CustomerSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSessions to fetch.
     */
    orderBy?: CustomerSessionOrderByWithRelationInput | CustomerSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSessions.
     */
    cursor?: CustomerSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSessions.
     */
    distinct?: CustomerSessionScalarFieldEnum | CustomerSessionScalarFieldEnum[]
  }

  /**
   * CustomerSession findFirstOrThrow
   */
  export type CustomerSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSession to fetch.
     */
    where?: CustomerSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSessions to fetch.
     */
    orderBy?: CustomerSessionOrderByWithRelationInput | CustomerSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerSessions.
     */
    cursor?: CustomerSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerSessions.
     */
    distinct?: CustomerSessionScalarFieldEnum | CustomerSessionScalarFieldEnum[]
  }

  /**
   * CustomerSession findMany
   */
  export type CustomerSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter, which CustomerSessions to fetch.
     */
    where?: CustomerSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerSessions to fetch.
     */
    orderBy?: CustomerSessionOrderByWithRelationInput | CustomerSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerSessions.
     */
    cursor?: CustomerSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerSessions.
     */
    skip?: number
    distinct?: CustomerSessionScalarFieldEnum | CustomerSessionScalarFieldEnum[]
  }

  /**
   * CustomerSession create
   */
  export type CustomerSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerSession.
     */
    data: XOR<CustomerSessionCreateInput, CustomerSessionUncheckedCreateInput>
  }

  /**
   * CustomerSession createMany
   */
  export type CustomerSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerSessions.
     */
    data: CustomerSessionCreateManyInput | CustomerSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerSession createManyAndReturn
   */
  export type CustomerSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerSessions.
     */
    data: CustomerSessionCreateManyInput | CustomerSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerSession update
   */
  export type CustomerSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerSession.
     */
    data: XOR<CustomerSessionUpdateInput, CustomerSessionUncheckedUpdateInput>
    /**
     * Choose, which CustomerSession to update.
     */
    where: CustomerSessionWhereUniqueInput
  }

  /**
   * CustomerSession updateMany
   */
  export type CustomerSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerSessions.
     */
    data: XOR<CustomerSessionUpdateManyMutationInput, CustomerSessionUncheckedUpdateManyInput>
    /**
     * Filter which CustomerSessions to update
     */
    where?: CustomerSessionWhereInput
    /**
     * Limit how many CustomerSessions to update.
     */
    limit?: number
  }

  /**
   * CustomerSession updateManyAndReturn
   */
  export type CustomerSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * The data used to update CustomerSessions.
     */
    data: XOR<CustomerSessionUpdateManyMutationInput, CustomerSessionUncheckedUpdateManyInput>
    /**
     * Filter which CustomerSessions to update
     */
    where?: CustomerSessionWhereInput
    /**
     * Limit how many CustomerSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerSession upsert
   */
  export type CustomerSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerSession to update in case it exists.
     */
    where: CustomerSessionWhereUniqueInput
    /**
     * In case the CustomerSession found by the `where` argument doesn't exist, create a new CustomerSession with this data.
     */
    create: XOR<CustomerSessionCreateInput, CustomerSessionUncheckedCreateInput>
    /**
     * In case the CustomerSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerSessionUpdateInput, CustomerSessionUncheckedUpdateInput>
  }

  /**
   * CustomerSession delete
   */
  export type CustomerSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
    /**
     * Filter which CustomerSession to delete.
     */
    where: CustomerSessionWhereUniqueInput
  }

  /**
   * CustomerSession deleteMany
   */
  export type CustomerSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerSessions to delete
     */
    where?: CustomerSessionWhereInput
    /**
     * Limit how many CustomerSessions to delete.
     */
    limit?: number
  }

  /**
   * CustomerSession without action
   */
  export type CustomerSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerSession
     */
    select?: CustomerSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerSession
     */
    omit?: CustomerSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerSessionInclude<ExtArgs> | null
  }


  /**
   * Model CustomerNotification
   */

  export type AggregateCustomerNotification = {
    _count: CustomerNotificationCountAggregateOutputType | null
    _min: CustomerNotificationMinAggregateOutputType | null
    _max: CustomerNotificationMaxAggregateOutputType | null
  }

  export type CustomerNotificationMinAggregateOutputType = {
    id: string | null
    customerId: string | null
    type: string | null
    channel: $Enums.CommunicationChannel | null
    subject: string | null
    message: string | null
    language: $Enums.Language | null
    status: string | null
    scheduledFor: Date | null
    sentAt: Date | null
    readAt: Date | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type CustomerNotificationMaxAggregateOutputType = {
    id: string | null
    customerId: string | null
    type: string | null
    channel: $Enums.CommunicationChannel | null
    subject: string | null
    message: string | null
    language: $Enums.Language | null
    status: string | null
    scheduledFor: Date | null
    sentAt: Date | null
    readAt: Date | null
    errorMessage: string | null
    createdAt: Date | null
  }

  export type CustomerNotificationCountAggregateOutputType = {
    id: number
    customerId: number
    type: number
    channel: number
    subject: number
    message: number
    language: number
    status: number
    scheduledFor: number
    sentAt: number
    readAt: number
    errorMessage: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type CustomerNotificationMinAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    channel?: true
    subject?: true
    message?: true
    language?: true
    status?: true
    scheduledFor?: true
    sentAt?: true
    readAt?: true
    errorMessage?: true
    createdAt?: true
  }

  export type CustomerNotificationMaxAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    channel?: true
    subject?: true
    message?: true
    language?: true
    status?: true
    scheduledFor?: true
    sentAt?: true
    readAt?: true
    errorMessage?: true
    createdAt?: true
  }

  export type CustomerNotificationCountAggregateInputType = {
    id?: true
    customerId?: true
    type?: true
    channel?: true
    subject?: true
    message?: true
    language?: true
    status?: true
    scheduledFor?: true
    sentAt?: true
    readAt?: true
    errorMessage?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type CustomerNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerNotification to aggregate.
     */
    where?: CustomerNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerNotifications to fetch.
     */
    orderBy?: CustomerNotificationOrderByWithRelationInput | CustomerNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerNotifications
    **/
    _count?: true | CustomerNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerNotificationMaxAggregateInputType
  }

  export type GetCustomerNotificationAggregateType<T extends CustomerNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerNotification[P]>
      : GetScalarType<T[P], AggregateCustomerNotification[P]>
  }




  export type CustomerNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerNotificationWhereInput
    orderBy?: CustomerNotificationOrderByWithAggregationInput | CustomerNotificationOrderByWithAggregationInput[]
    by: CustomerNotificationScalarFieldEnum[] | CustomerNotificationScalarFieldEnum
    having?: CustomerNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerNotificationCountAggregateInputType | true
    _min?: CustomerNotificationMinAggregateInputType
    _max?: CustomerNotificationMaxAggregateInputType
  }

  export type CustomerNotificationGroupByOutputType = {
    id: string
    customerId: string
    type: string
    channel: $Enums.CommunicationChannel
    subject: string | null
    message: string
    language: $Enums.Language
    status: string
    scheduledFor: Date | null
    sentAt: Date | null
    readAt: Date | null
    errorMessage: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: CustomerNotificationCountAggregateOutputType | null
    _min: CustomerNotificationMinAggregateOutputType | null
    _max: CustomerNotificationMaxAggregateOutputType | null
  }

  type GetCustomerNotificationGroupByPayload<T extends CustomerNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerNotificationGroupByOutputType[P]>
        }
      >
    >


  export type CustomerNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    channel?: boolean
    subject?: boolean
    message?: boolean
    language?: boolean
    status?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    readAt?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerNotification"]>

  export type CustomerNotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    channel?: boolean
    subject?: boolean
    message?: boolean
    language?: boolean
    status?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    readAt?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerNotification"]>

  export type CustomerNotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    type?: boolean
    channel?: boolean
    subject?: boolean
    message?: boolean
    language?: boolean
    status?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    readAt?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerNotification"]>

  export type CustomerNotificationSelectScalar = {
    id?: boolean
    customerId?: boolean
    type?: boolean
    channel?: boolean
    subject?: boolean
    message?: boolean
    language?: boolean
    status?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    readAt?: boolean
    errorMessage?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type CustomerNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "type" | "channel" | "subject" | "message" | "language" | "status" | "scheduledFor" | "sentAt" | "readAt" | "errorMessage" | "metadata" | "createdAt", ExtArgs["result"]["customerNotification"]>
  export type CustomerNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerNotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type CustomerNotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $CustomerNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerNotification"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      customerId: string
      type: string
      channel: $Enums.CommunicationChannel
      subject: string | null
      message: string
      language: $Enums.Language
      status: string
      scheduledFor: Date | null
      sentAt: Date | null
      readAt: Date | null
      errorMessage: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["customerNotification"]>
    composites: {}
  }

  type CustomerNotificationGetPayload<S extends boolean | null | undefined | CustomerNotificationDefaultArgs> = $Result.GetResult<Prisma.$CustomerNotificationPayload, S>

  type CustomerNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerNotificationCountAggregateInputType | true
    }

  export interface CustomerNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerNotification'], meta: { name: 'CustomerNotification' } }
    /**
     * Find zero or one CustomerNotification that matches the filter.
     * @param {CustomerNotificationFindUniqueArgs} args - Arguments to find a CustomerNotification
     * @example
     * // Get one CustomerNotification
     * const customerNotification = await prisma.customerNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerNotificationFindUniqueArgs>(args: SelectSubset<T, CustomerNotificationFindUniqueArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerNotificationFindUniqueOrThrowArgs} args - Arguments to find a CustomerNotification
     * @example
     * // Get one CustomerNotification
     * const customerNotification = await prisma.customerNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationFindFirstArgs} args - Arguments to find a CustomerNotification
     * @example
     * // Get one CustomerNotification
     * const customerNotification = await prisma.customerNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerNotificationFindFirstArgs>(args?: SelectSubset<T, CustomerNotificationFindFirstArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationFindFirstOrThrowArgs} args - Arguments to find a CustomerNotification
     * @example
     * // Get one CustomerNotification
     * const customerNotification = await prisma.customerNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerNotifications
     * const customerNotifications = await prisma.customerNotification.findMany()
     * 
     * // Get first 10 CustomerNotifications
     * const customerNotifications = await prisma.customerNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerNotificationWithIdOnly = await prisma.customerNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerNotificationFindManyArgs>(args?: SelectSubset<T, CustomerNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerNotification.
     * @param {CustomerNotificationCreateArgs} args - Arguments to create a CustomerNotification.
     * @example
     * // Create one CustomerNotification
     * const CustomerNotification = await prisma.customerNotification.create({
     *   data: {
     *     // ... data to create a CustomerNotification
     *   }
     * })
     * 
     */
    create<T extends CustomerNotificationCreateArgs>(args: SelectSubset<T, CustomerNotificationCreateArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerNotifications.
     * @param {CustomerNotificationCreateManyArgs} args - Arguments to create many CustomerNotifications.
     * @example
     * // Create many CustomerNotifications
     * const customerNotification = await prisma.customerNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerNotificationCreateManyArgs>(args?: SelectSubset<T, CustomerNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerNotifications and returns the data saved in the database.
     * @param {CustomerNotificationCreateManyAndReturnArgs} args - Arguments to create many CustomerNotifications.
     * @example
     * // Create many CustomerNotifications
     * const customerNotification = await prisma.customerNotification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerNotifications and only return the `id`
     * const customerNotificationWithIdOnly = await prisma.customerNotification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerNotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerNotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerNotification.
     * @param {CustomerNotificationDeleteArgs} args - Arguments to delete one CustomerNotification.
     * @example
     * // Delete one CustomerNotification
     * const CustomerNotification = await prisma.customerNotification.delete({
     *   where: {
     *     // ... filter to delete one CustomerNotification
     *   }
     * })
     * 
     */
    delete<T extends CustomerNotificationDeleteArgs>(args: SelectSubset<T, CustomerNotificationDeleteArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerNotification.
     * @param {CustomerNotificationUpdateArgs} args - Arguments to update one CustomerNotification.
     * @example
     * // Update one CustomerNotification
     * const customerNotification = await prisma.customerNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerNotificationUpdateArgs>(args: SelectSubset<T, CustomerNotificationUpdateArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerNotifications.
     * @param {CustomerNotificationDeleteManyArgs} args - Arguments to filter CustomerNotifications to delete.
     * @example
     * // Delete a few CustomerNotifications
     * const { count } = await prisma.customerNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerNotificationDeleteManyArgs>(args?: SelectSubset<T, CustomerNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerNotifications
     * const customerNotification = await prisma.customerNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerNotificationUpdateManyArgs>(args: SelectSubset<T, CustomerNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerNotifications and returns the data updated in the database.
     * @param {CustomerNotificationUpdateManyAndReturnArgs} args - Arguments to update many CustomerNotifications.
     * @example
     * // Update many CustomerNotifications
     * const customerNotification = await prisma.customerNotification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerNotifications and only return the `id`
     * const customerNotificationWithIdOnly = await prisma.customerNotification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerNotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerNotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerNotification.
     * @param {CustomerNotificationUpsertArgs} args - Arguments to update or create a CustomerNotification.
     * @example
     * // Update or create a CustomerNotification
     * const customerNotification = await prisma.customerNotification.upsert({
     *   create: {
     *     // ... data to create a CustomerNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerNotification we want to update
     *   }
     * })
     */
    upsert<T extends CustomerNotificationUpsertArgs>(args: SelectSubset<T, CustomerNotificationUpsertArgs<ExtArgs>>): Prisma__CustomerNotificationClient<$Result.GetResult<Prisma.$CustomerNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationCountArgs} args - Arguments to filter CustomerNotifications to count.
     * @example
     * // Count the number of CustomerNotifications
     * const count = await prisma.customerNotification.count({
     *   where: {
     *     // ... the filter for the CustomerNotifications we want to count
     *   }
     * })
    **/
    count<T extends CustomerNotificationCountArgs>(
      args?: Subset<T, CustomerNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerNotificationAggregateArgs>(args: Subset<T, CustomerNotificationAggregateArgs>): Prisma.PrismaPromise<GetCustomerNotificationAggregateType<T>>

    /**
     * Group by CustomerNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerNotificationGroupByArgs['orderBy'] }
        : { orderBy?: CustomerNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerNotification model
   */
  readonly fields: CustomerNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerNotification model
   */
  interface CustomerNotificationFieldRefs {
    readonly id: FieldRef<"CustomerNotification", 'String'>
    readonly customerId: FieldRef<"CustomerNotification", 'String'>
    readonly type: FieldRef<"CustomerNotification", 'String'>
    readonly channel: FieldRef<"CustomerNotification", 'CommunicationChannel'>
    readonly subject: FieldRef<"CustomerNotification", 'String'>
    readonly message: FieldRef<"CustomerNotification", 'String'>
    readonly language: FieldRef<"CustomerNotification", 'Language'>
    readonly status: FieldRef<"CustomerNotification", 'String'>
    readonly scheduledFor: FieldRef<"CustomerNotification", 'DateTime'>
    readonly sentAt: FieldRef<"CustomerNotification", 'DateTime'>
    readonly readAt: FieldRef<"CustomerNotification", 'DateTime'>
    readonly errorMessage: FieldRef<"CustomerNotification", 'String'>
    readonly metadata: FieldRef<"CustomerNotification", 'Json'>
    readonly createdAt: FieldRef<"CustomerNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerNotification findUnique
   */
  export type CustomerNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter, which CustomerNotification to fetch.
     */
    where: CustomerNotificationWhereUniqueInput
  }

  /**
   * CustomerNotification findUniqueOrThrow
   */
  export type CustomerNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter, which CustomerNotification to fetch.
     */
    where: CustomerNotificationWhereUniqueInput
  }

  /**
   * CustomerNotification findFirst
   */
  export type CustomerNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter, which CustomerNotification to fetch.
     */
    where?: CustomerNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerNotifications to fetch.
     */
    orderBy?: CustomerNotificationOrderByWithRelationInput | CustomerNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerNotifications.
     */
    cursor?: CustomerNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerNotifications.
     */
    distinct?: CustomerNotificationScalarFieldEnum | CustomerNotificationScalarFieldEnum[]
  }

  /**
   * CustomerNotification findFirstOrThrow
   */
  export type CustomerNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter, which CustomerNotification to fetch.
     */
    where?: CustomerNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerNotifications to fetch.
     */
    orderBy?: CustomerNotificationOrderByWithRelationInput | CustomerNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerNotifications.
     */
    cursor?: CustomerNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerNotifications.
     */
    distinct?: CustomerNotificationScalarFieldEnum | CustomerNotificationScalarFieldEnum[]
  }

  /**
   * CustomerNotification findMany
   */
  export type CustomerNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter, which CustomerNotifications to fetch.
     */
    where?: CustomerNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerNotifications to fetch.
     */
    orderBy?: CustomerNotificationOrderByWithRelationInput | CustomerNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerNotifications.
     */
    cursor?: CustomerNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerNotifications.
     */
    skip?: number
    distinct?: CustomerNotificationScalarFieldEnum | CustomerNotificationScalarFieldEnum[]
  }

  /**
   * CustomerNotification create
   */
  export type CustomerNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerNotification.
     */
    data: XOR<CustomerNotificationCreateInput, CustomerNotificationUncheckedCreateInput>
  }

  /**
   * CustomerNotification createMany
   */
  export type CustomerNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerNotifications.
     */
    data: CustomerNotificationCreateManyInput | CustomerNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomerNotification createManyAndReturn
   */
  export type CustomerNotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerNotifications.
     */
    data: CustomerNotificationCreateManyInput | CustomerNotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerNotification update
   */
  export type CustomerNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerNotification.
     */
    data: XOR<CustomerNotificationUpdateInput, CustomerNotificationUncheckedUpdateInput>
    /**
     * Choose, which CustomerNotification to update.
     */
    where: CustomerNotificationWhereUniqueInput
  }

  /**
   * CustomerNotification updateMany
   */
  export type CustomerNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerNotifications.
     */
    data: XOR<CustomerNotificationUpdateManyMutationInput, CustomerNotificationUncheckedUpdateManyInput>
    /**
     * Filter which CustomerNotifications to update
     */
    where?: CustomerNotificationWhereInput
    /**
     * Limit how many CustomerNotifications to update.
     */
    limit?: number
  }

  /**
   * CustomerNotification updateManyAndReturn
   */
  export type CustomerNotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * The data used to update CustomerNotifications.
     */
    data: XOR<CustomerNotificationUpdateManyMutationInput, CustomerNotificationUncheckedUpdateManyInput>
    /**
     * Filter which CustomerNotifications to update
     */
    where?: CustomerNotificationWhereInput
    /**
     * Limit how many CustomerNotifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerNotification upsert
   */
  export type CustomerNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerNotification to update in case it exists.
     */
    where: CustomerNotificationWhereUniqueInput
    /**
     * In case the CustomerNotification found by the `where` argument doesn't exist, create a new CustomerNotification with this data.
     */
    create: XOR<CustomerNotificationCreateInput, CustomerNotificationUncheckedCreateInput>
    /**
     * In case the CustomerNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerNotificationUpdateInput, CustomerNotificationUncheckedUpdateInput>
  }

  /**
   * CustomerNotification delete
   */
  export type CustomerNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
    /**
     * Filter which CustomerNotification to delete.
     */
    where: CustomerNotificationWhereUniqueInput
  }

  /**
   * CustomerNotification deleteMany
   */
  export type CustomerNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerNotifications to delete
     */
    where?: CustomerNotificationWhereInput
    /**
     * Limit how many CustomerNotifications to delete.
     */
    limit?: number
  }

  /**
   * CustomerNotification without action
   */
  export type CustomerNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerNotification
     */
    select?: CustomerNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerNotification
     */
    omit?: CustomerNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerNotificationInclude<ExtArgs> | null
  }


  /**
   * Model ServicePricing
   */

  export type AggregateServicePricing = {
    _count: ServicePricingCountAggregateOutputType | null
    _avg: ServicePricingAvgAggregateOutputType | null
    _sum: ServicePricingSumAggregateOutputType | null
    _min: ServicePricingMinAggregateOutputType | null
    _max: ServicePricingMaxAggregateOutputType | null
  }

  export type ServicePricingAvgAggregateOutputType = {
    basePriceEUR: number | null
  }

  export type ServicePricingSumAggregateOutputType = {
    basePriceEUR: number | null
  }

  export type ServicePricingMinAggregateOutputType = {
    id: string | null
    professionalLevel: string | null
    urgencyLevel: $Enums.CaseUrgency | null
    basePriceEUR: number | null
    currencyCode: string | null
    isActive: boolean | null
    validFrom: Date | null
    validUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServicePricingMaxAggregateOutputType = {
    id: string | null
    professionalLevel: string | null
    urgencyLevel: $Enums.CaseUrgency | null
    basePriceEUR: number | null
    currencyCode: string | null
    isActive: boolean | null
    validFrom: Date | null
    validUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServicePricingCountAggregateOutputType = {
    id: number
    professionalLevel: number
    urgencyLevel: number
    basePriceEUR: number
    currencyCode: number
    isActive: number
    validFrom: number
    validUntil: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServicePricingAvgAggregateInputType = {
    basePriceEUR?: true
  }

  export type ServicePricingSumAggregateInputType = {
    basePriceEUR?: true
  }

  export type ServicePricingMinAggregateInputType = {
    id?: true
    professionalLevel?: true
    urgencyLevel?: true
    basePriceEUR?: true
    currencyCode?: true
    isActive?: true
    validFrom?: true
    validUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServicePricingMaxAggregateInputType = {
    id?: true
    professionalLevel?: true
    urgencyLevel?: true
    basePriceEUR?: true
    currencyCode?: true
    isActive?: true
    validFrom?: true
    validUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServicePricingCountAggregateInputType = {
    id?: true
    professionalLevel?: true
    urgencyLevel?: true
    basePriceEUR?: true
    currencyCode?: true
    isActive?: true
    validFrom?: true
    validUntil?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServicePricingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServicePricing to aggregate.
     */
    where?: ServicePricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicePricings to fetch.
     */
    orderBy?: ServicePricingOrderByWithRelationInput | ServicePricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicePricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicePricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicePricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ServicePricings
    **/
    _count?: true | ServicePricingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicePricingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicePricingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicePricingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicePricingMaxAggregateInputType
  }

  export type GetServicePricingAggregateType<T extends ServicePricingAggregateArgs> = {
        [P in keyof T & keyof AggregateServicePricing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServicePricing[P]>
      : GetScalarType<T[P], AggregateServicePricing[P]>
  }




  export type ServicePricingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServicePricingWhereInput
    orderBy?: ServicePricingOrderByWithAggregationInput | ServicePricingOrderByWithAggregationInput[]
    by: ServicePricingScalarFieldEnum[] | ServicePricingScalarFieldEnum
    having?: ServicePricingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicePricingCountAggregateInputType | true
    _avg?: ServicePricingAvgAggregateInputType
    _sum?: ServicePricingSumAggregateInputType
    _min?: ServicePricingMinAggregateInputType
    _max?: ServicePricingMaxAggregateInputType
  }

  export type ServicePricingGroupByOutputType = {
    id: string
    professionalLevel: string
    urgencyLevel: $Enums.CaseUrgency
    basePriceEUR: number
    currencyCode: string
    isActive: boolean
    validFrom: Date
    validUntil: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ServicePricingCountAggregateOutputType | null
    _avg: ServicePricingAvgAggregateOutputType | null
    _sum: ServicePricingSumAggregateOutputType | null
    _min: ServicePricingMinAggregateOutputType | null
    _max: ServicePricingMaxAggregateOutputType | null
  }

  type GetServicePricingGroupByPayload<T extends ServicePricingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicePricingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicePricingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicePricingGroupByOutputType[P]>
            : GetScalarType<T[P], ServicePricingGroupByOutputType[P]>
        }
      >
    >


  export type ServicePricingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    basePriceEUR?: boolean
    currencyCode?: boolean
    isActive?: boolean
    validFrom?: boolean
    validUntil?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["servicePricing"]>

  export type ServicePricingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    basePriceEUR?: boolean
    currencyCode?: boolean
    isActive?: boolean
    validFrom?: boolean
    validUntil?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["servicePricing"]>

  export type ServicePricingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    basePriceEUR?: boolean
    currencyCode?: boolean
    isActive?: boolean
    validFrom?: boolean
    validUntil?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["servicePricing"]>

  export type ServicePricingSelectScalar = {
    id?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    basePriceEUR?: boolean
    currencyCode?: boolean
    isActive?: boolean
    validFrom?: boolean
    validUntil?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServicePricingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionalLevel" | "urgencyLevel" | "basePriceEUR" | "currencyCode" | "isActive" | "validFrom" | "validUntil" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["servicePricing"]>

  export type $ServicePricingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ServicePricing"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      professionalLevel: string
      urgencyLevel: $Enums.CaseUrgency
      basePriceEUR: number
      currencyCode: string
      isActive: boolean
      validFrom: Date
      validUntil: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["servicePricing"]>
    composites: {}
  }

  type ServicePricingGetPayload<S extends boolean | null | undefined | ServicePricingDefaultArgs> = $Result.GetResult<Prisma.$ServicePricingPayload, S>

  type ServicePricingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServicePricingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServicePricingCountAggregateInputType | true
    }

  export interface ServicePricingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ServicePricing'], meta: { name: 'ServicePricing' } }
    /**
     * Find zero or one ServicePricing that matches the filter.
     * @param {ServicePricingFindUniqueArgs} args - Arguments to find a ServicePricing
     * @example
     * // Get one ServicePricing
     * const servicePricing = await prisma.servicePricing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServicePricingFindUniqueArgs>(args: SelectSubset<T, ServicePricingFindUniqueArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ServicePricing that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServicePricingFindUniqueOrThrowArgs} args - Arguments to find a ServicePricing
     * @example
     * // Get one ServicePricing
     * const servicePricing = await prisma.servicePricing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServicePricingFindUniqueOrThrowArgs>(args: SelectSubset<T, ServicePricingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServicePricing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingFindFirstArgs} args - Arguments to find a ServicePricing
     * @example
     * // Get one ServicePricing
     * const servicePricing = await prisma.servicePricing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServicePricingFindFirstArgs>(args?: SelectSubset<T, ServicePricingFindFirstArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ServicePricing that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingFindFirstOrThrowArgs} args - Arguments to find a ServicePricing
     * @example
     * // Get one ServicePricing
     * const servicePricing = await prisma.servicePricing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServicePricingFindFirstOrThrowArgs>(args?: SelectSubset<T, ServicePricingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ServicePricings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ServicePricings
     * const servicePricings = await prisma.servicePricing.findMany()
     * 
     * // Get first 10 ServicePricings
     * const servicePricings = await prisma.servicePricing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicePricingWithIdOnly = await prisma.servicePricing.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServicePricingFindManyArgs>(args?: SelectSubset<T, ServicePricingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ServicePricing.
     * @param {ServicePricingCreateArgs} args - Arguments to create a ServicePricing.
     * @example
     * // Create one ServicePricing
     * const ServicePricing = await prisma.servicePricing.create({
     *   data: {
     *     // ... data to create a ServicePricing
     *   }
     * })
     * 
     */
    create<T extends ServicePricingCreateArgs>(args: SelectSubset<T, ServicePricingCreateArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ServicePricings.
     * @param {ServicePricingCreateManyArgs} args - Arguments to create many ServicePricings.
     * @example
     * // Create many ServicePricings
     * const servicePricing = await prisma.servicePricing.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServicePricingCreateManyArgs>(args?: SelectSubset<T, ServicePricingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ServicePricings and returns the data saved in the database.
     * @param {ServicePricingCreateManyAndReturnArgs} args - Arguments to create many ServicePricings.
     * @example
     * // Create many ServicePricings
     * const servicePricing = await prisma.servicePricing.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ServicePricings and only return the `id`
     * const servicePricingWithIdOnly = await prisma.servicePricing.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServicePricingCreateManyAndReturnArgs>(args?: SelectSubset<T, ServicePricingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ServicePricing.
     * @param {ServicePricingDeleteArgs} args - Arguments to delete one ServicePricing.
     * @example
     * // Delete one ServicePricing
     * const ServicePricing = await prisma.servicePricing.delete({
     *   where: {
     *     // ... filter to delete one ServicePricing
     *   }
     * })
     * 
     */
    delete<T extends ServicePricingDeleteArgs>(args: SelectSubset<T, ServicePricingDeleteArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ServicePricing.
     * @param {ServicePricingUpdateArgs} args - Arguments to update one ServicePricing.
     * @example
     * // Update one ServicePricing
     * const servicePricing = await prisma.servicePricing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServicePricingUpdateArgs>(args: SelectSubset<T, ServicePricingUpdateArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ServicePricings.
     * @param {ServicePricingDeleteManyArgs} args - Arguments to filter ServicePricings to delete.
     * @example
     * // Delete a few ServicePricings
     * const { count } = await prisma.servicePricing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServicePricingDeleteManyArgs>(args?: SelectSubset<T, ServicePricingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServicePricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ServicePricings
     * const servicePricing = await prisma.servicePricing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServicePricingUpdateManyArgs>(args: SelectSubset<T, ServicePricingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ServicePricings and returns the data updated in the database.
     * @param {ServicePricingUpdateManyAndReturnArgs} args - Arguments to update many ServicePricings.
     * @example
     * // Update many ServicePricings
     * const servicePricing = await prisma.servicePricing.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ServicePricings and only return the `id`
     * const servicePricingWithIdOnly = await prisma.servicePricing.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServicePricingUpdateManyAndReturnArgs>(args: SelectSubset<T, ServicePricingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ServicePricing.
     * @param {ServicePricingUpsertArgs} args - Arguments to update or create a ServicePricing.
     * @example
     * // Update or create a ServicePricing
     * const servicePricing = await prisma.servicePricing.upsert({
     *   create: {
     *     // ... data to create a ServicePricing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ServicePricing we want to update
     *   }
     * })
     */
    upsert<T extends ServicePricingUpsertArgs>(args: SelectSubset<T, ServicePricingUpsertArgs<ExtArgs>>): Prisma__ServicePricingClient<$Result.GetResult<Prisma.$ServicePricingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ServicePricings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingCountArgs} args - Arguments to filter ServicePricings to count.
     * @example
     * // Count the number of ServicePricings
     * const count = await prisma.servicePricing.count({
     *   where: {
     *     // ... the filter for the ServicePricings we want to count
     *   }
     * })
    **/
    count<T extends ServicePricingCountArgs>(
      args?: Subset<T, ServicePricingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicePricingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ServicePricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicePricingAggregateArgs>(args: Subset<T, ServicePricingAggregateArgs>): Prisma.PrismaPromise<GetServicePricingAggregateType<T>>

    /**
     * Group by ServicePricing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicePricingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicePricingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicePricingGroupByArgs['orderBy'] }
        : { orderBy?: ServicePricingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicePricingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicePricingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ServicePricing model
   */
  readonly fields: ServicePricingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ServicePricing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicePricingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ServicePricing model
   */
  interface ServicePricingFieldRefs {
    readonly id: FieldRef<"ServicePricing", 'String'>
    readonly professionalLevel: FieldRef<"ServicePricing", 'String'>
    readonly urgencyLevel: FieldRef<"ServicePricing", 'CaseUrgency'>
    readonly basePriceEUR: FieldRef<"ServicePricing", 'Float'>
    readonly currencyCode: FieldRef<"ServicePricing", 'String'>
    readonly isActive: FieldRef<"ServicePricing", 'Boolean'>
    readonly validFrom: FieldRef<"ServicePricing", 'DateTime'>
    readonly validUntil: FieldRef<"ServicePricing", 'DateTime'>
    readonly metadata: FieldRef<"ServicePricing", 'Json'>
    readonly createdAt: FieldRef<"ServicePricing", 'DateTime'>
    readonly updatedAt: FieldRef<"ServicePricing", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ServicePricing findUnique
   */
  export type ServicePricingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter, which ServicePricing to fetch.
     */
    where: ServicePricingWhereUniqueInput
  }

  /**
   * ServicePricing findUniqueOrThrow
   */
  export type ServicePricingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter, which ServicePricing to fetch.
     */
    where: ServicePricingWhereUniqueInput
  }

  /**
   * ServicePricing findFirst
   */
  export type ServicePricingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter, which ServicePricing to fetch.
     */
    where?: ServicePricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicePricings to fetch.
     */
    orderBy?: ServicePricingOrderByWithRelationInput | ServicePricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServicePricings.
     */
    cursor?: ServicePricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicePricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicePricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServicePricings.
     */
    distinct?: ServicePricingScalarFieldEnum | ServicePricingScalarFieldEnum[]
  }

  /**
   * ServicePricing findFirstOrThrow
   */
  export type ServicePricingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter, which ServicePricing to fetch.
     */
    where?: ServicePricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicePricings to fetch.
     */
    orderBy?: ServicePricingOrderByWithRelationInput | ServicePricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ServicePricings.
     */
    cursor?: ServicePricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicePricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicePricings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ServicePricings.
     */
    distinct?: ServicePricingScalarFieldEnum | ServicePricingScalarFieldEnum[]
  }

  /**
   * ServicePricing findMany
   */
  export type ServicePricingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter, which ServicePricings to fetch.
     */
    where?: ServicePricingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ServicePricings to fetch.
     */
    orderBy?: ServicePricingOrderByWithRelationInput | ServicePricingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ServicePricings.
     */
    cursor?: ServicePricingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ServicePricings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ServicePricings.
     */
    skip?: number
    distinct?: ServicePricingScalarFieldEnum | ServicePricingScalarFieldEnum[]
  }

  /**
   * ServicePricing create
   */
  export type ServicePricingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * The data needed to create a ServicePricing.
     */
    data: XOR<ServicePricingCreateInput, ServicePricingUncheckedCreateInput>
  }

  /**
   * ServicePricing createMany
   */
  export type ServicePricingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ServicePricings.
     */
    data: ServicePricingCreateManyInput | ServicePricingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServicePricing createManyAndReturn
   */
  export type ServicePricingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * The data used to create many ServicePricings.
     */
    data: ServicePricingCreateManyInput | ServicePricingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ServicePricing update
   */
  export type ServicePricingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * The data needed to update a ServicePricing.
     */
    data: XOR<ServicePricingUpdateInput, ServicePricingUncheckedUpdateInput>
    /**
     * Choose, which ServicePricing to update.
     */
    where: ServicePricingWhereUniqueInput
  }

  /**
   * ServicePricing updateMany
   */
  export type ServicePricingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ServicePricings.
     */
    data: XOR<ServicePricingUpdateManyMutationInput, ServicePricingUncheckedUpdateManyInput>
    /**
     * Filter which ServicePricings to update
     */
    where?: ServicePricingWhereInput
    /**
     * Limit how many ServicePricings to update.
     */
    limit?: number
  }

  /**
   * ServicePricing updateManyAndReturn
   */
  export type ServicePricingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * The data used to update ServicePricings.
     */
    data: XOR<ServicePricingUpdateManyMutationInput, ServicePricingUncheckedUpdateManyInput>
    /**
     * Filter which ServicePricings to update
     */
    where?: ServicePricingWhereInput
    /**
     * Limit how many ServicePricings to update.
     */
    limit?: number
  }

  /**
   * ServicePricing upsert
   */
  export type ServicePricingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * The filter to search for the ServicePricing to update in case it exists.
     */
    where: ServicePricingWhereUniqueInput
    /**
     * In case the ServicePricing found by the `where` argument doesn't exist, create a new ServicePricing with this data.
     */
    create: XOR<ServicePricingCreateInput, ServicePricingUncheckedCreateInput>
    /**
     * In case the ServicePricing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicePricingUpdateInput, ServicePricingUncheckedUpdateInput>
  }

  /**
   * ServicePricing delete
   */
  export type ServicePricingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
    /**
     * Filter which ServicePricing to delete.
     */
    where: ServicePricingWhereUniqueInput
  }

  /**
   * ServicePricing deleteMany
   */
  export type ServicePricingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ServicePricings to delete
     */
    where?: ServicePricingWhereInput
    /**
     * Limit how many ServicePricings to delete.
     */
    limit?: number
  }

  /**
   * ServicePricing without action
   */
  export type ServicePricingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServicePricing
     */
    select?: ServicePricingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ServicePricing
     */
    omit?: ServicePricingOmit<ExtArgs> | null
  }


  /**
   * Model QuestionnaireResponse
   */

  export type AggregateQuestionnaireResponse = {
    _count: QuestionnaireResponseCountAggregateOutputType | null
    _avg: QuestionnaireResponseAvgAggregateOutputType | null
    _sum: QuestionnaireResponseSumAggregateOutputType | null
    _min: QuestionnaireResponseMinAggregateOutputType | null
    _max: QuestionnaireResponseMaxAggregateOutputType | null
  }

  export type QuestionnaireResponseAvgAggregateOutputType = {
    completenessScore: number | null
    confidence: number | null
  }

  export type QuestionnaireResponseSumAggregateOutputType = {
    completenessScore: number | null
    confidence: number | null
  }

  export type QuestionnaireResponseMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    questionnaireType: $Enums.QuestionnaireType | null
    language: $Enums.Language | null
    completenessScore: number | null
    confidence: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionnaireResponseMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    questionnaireType: $Enums.QuestionnaireType | null
    language: $Enums.Language | null
    completenessScore: number | null
    confidence: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionnaireResponseCountAggregateOutputType = {
    id: number
    caseId: number
    questionnaireType: number
    language: number
    responses: number
    aiAnalysis: number
    completenessScore: number
    confidence: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionnaireResponseAvgAggregateInputType = {
    completenessScore?: true
    confidence?: true
  }

  export type QuestionnaireResponseSumAggregateInputType = {
    completenessScore?: true
    confidence?: true
  }

  export type QuestionnaireResponseMinAggregateInputType = {
    id?: true
    caseId?: true
    questionnaireType?: true
    language?: true
    completenessScore?: true
    confidence?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionnaireResponseMaxAggregateInputType = {
    id?: true
    caseId?: true
    questionnaireType?: true
    language?: true
    completenessScore?: true
    confidence?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionnaireResponseCountAggregateInputType = {
    id?: true
    caseId?: true
    questionnaireType?: true
    language?: true
    responses?: true
    aiAnalysis?: true
    completenessScore?: true
    confidence?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionnaireResponseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionnaireResponse to aggregate.
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionnaireResponses to fetch.
     */
    orderBy?: QuestionnaireResponseOrderByWithRelationInput | QuestionnaireResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionnaireResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionnaireResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionnaireResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionnaireResponses
    **/
    _count?: true | QuestionnaireResponseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionnaireResponseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionnaireResponseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionnaireResponseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionnaireResponseMaxAggregateInputType
  }

  export type GetQuestionnaireResponseAggregateType<T extends QuestionnaireResponseAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionnaireResponse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionnaireResponse[P]>
      : GetScalarType<T[P], AggregateQuestionnaireResponse[P]>
  }




  export type QuestionnaireResponseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionnaireResponseWhereInput
    orderBy?: QuestionnaireResponseOrderByWithAggregationInput | QuestionnaireResponseOrderByWithAggregationInput[]
    by: QuestionnaireResponseScalarFieldEnum[] | QuestionnaireResponseScalarFieldEnum
    having?: QuestionnaireResponseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionnaireResponseCountAggregateInputType | true
    _avg?: QuestionnaireResponseAvgAggregateInputType
    _sum?: QuestionnaireResponseSumAggregateInputType
    _min?: QuestionnaireResponseMinAggregateInputType
    _max?: QuestionnaireResponseMaxAggregateInputType
  }

  export type QuestionnaireResponseGroupByOutputType = {
    id: string
    caseId: string
    questionnaireType: $Enums.QuestionnaireType
    language: $Enums.Language
    responses: JsonValue
    aiAnalysis: JsonValue | null
    completenessScore: number | null
    confidence: number | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionnaireResponseCountAggregateOutputType | null
    _avg: QuestionnaireResponseAvgAggregateOutputType | null
    _sum: QuestionnaireResponseSumAggregateOutputType | null
    _min: QuestionnaireResponseMinAggregateOutputType | null
    _max: QuestionnaireResponseMaxAggregateOutputType | null
  }

  type GetQuestionnaireResponseGroupByPayload<T extends QuestionnaireResponseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionnaireResponseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionnaireResponseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionnaireResponseGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionnaireResponseGroupByOutputType[P]>
        }
      >
    >


  export type QuestionnaireResponseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    questionnaireType?: boolean
    language?: boolean
    responses?: boolean
    aiAnalysis?: boolean
    completenessScore?: boolean
    confidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionnaireResponse"]>

  export type QuestionnaireResponseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    questionnaireType?: boolean
    language?: boolean
    responses?: boolean
    aiAnalysis?: boolean
    completenessScore?: boolean
    confidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionnaireResponse"]>

  export type QuestionnaireResponseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    questionnaireType?: boolean
    language?: boolean
    responses?: boolean
    aiAnalysis?: boolean
    completenessScore?: boolean
    confidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionnaireResponse"]>

  export type QuestionnaireResponseSelectScalar = {
    id?: boolean
    caseId?: boolean
    questionnaireType?: boolean
    language?: boolean
    responses?: boolean
    aiAnalysis?: boolean
    completenessScore?: boolean
    confidence?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionnaireResponseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "questionnaireType" | "language" | "responses" | "aiAnalysis" | "completenessScore" | "confidence" | "createdAt" | "updatedAt", ExtArgs["result"]["questionnaireResponse"]>
  export type QuestionnaireResponseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type QuestionnaireResponseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type QuestionnaireResponseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }

  export type $QuestionnaireResponsePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionnaireResponse"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      questionnaireType: $Enums.QuestionnaireType
      language: $Enums.Language
      responses: Prisma.JsonValue
      aiAnalysis: Prisma.JsonValue | null
      completenessScore: number | null
      confidence: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionnaireResponse"]>
    composites: {}
  }

  type QuestionnaireResponseGetPayload<S extends boolean | null | undefined | QuestionnaireResponseDefaultArgs> = $Result.GetResult<Prisma.$QuestionnaireResponsePayload, S>

  type QuestionnaireResponseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionnaireResponseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionnaireResponseCountAggregateInputType | true
    }

  export interface QuestionnaireResponseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionnaireResponse'], meta: { name: 'QuestionnaireResponse' } }
    /**
     * Find zero or one QuestionnaireResponse that matches the filter.
     * @param {QuestionnaireResponseFindUniqueArgs} args - Arguments to find a QuestionnaireResponse
     * @example
     * // Get one QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionnaireResponseFindUniqueArgs>(args: SelectSubset<T, QuestionnaireResponseFindUniqueArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionnaireResponse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionnaireResponseFindUniqueOrThrowArgs} args - Arguments to find a QuestionnaireResponse
     * @example
     * // Get one QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionnaireResponseFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionnaireResponseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionnaireResponse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseFindFirstArgs} args - Arguments to find a QuestionnaireResponse
     * @example
     * // Get one QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionnaireResponseFindFirstArgs>(args?: SelectSubset<T, QuestionnaireResponseFindFirstArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionnaireResponse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseFindFirstOrThrowArgs} args - Arguments to find a QuestionnaireResponse
     * @example
     * // Get one QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionnaireResponseFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionnaireResponseFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionnaireResponses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionnaireResponses
     * const questionnaireResponses = await prisma.questionnaireResponse.findMany()
     * 
     * // Get first 10 QuestionnaireResponses
     * const questionnaireResponses = await prisma.questionnaireResponse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionnaireResponseWithIdOnly = await prisma.questionnaireResponse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionnaireResponseFindManyArgs>(args?: SelectSubset<T, QuestionnaireResponseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionnaireResponse.
     * @param {QuestionnaireResponseCreateArgs} args - Arguments to create a QuestionnaireResponse.
     * @example
     * // Create one QuestionnaireResponse
     * const QuestionnaireResponse = await prisma.questionnaireResponse.create({
     *   data: {
     *     // ... data to create a QuestionnaireResponse
     *   }
     * })
     * 
     */
    create<T extends QuestionnaireResponseCreateArgs>(args: SelectSubset<T, QuestionnaireResponseCreateArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionnaireResponses.
     * @param {QuestionnaireResponseCreateManyArgs} args - Arguments to create many QuestionnaireResponses.
     * @example
     * // Create many QuestionnaireResponses
     * const questionnaireResponse = await prisma.questionnaireResponse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionnaireResponseCreateManyArgs>(args?: SelectSubset<T, QuestionnaireResponseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionnaireResponses and returns the data saved in the database.
     * @param {QuestionnaireResponseCreateManyAndReturnArgs} args - Arguments to create many QuestionnaireResponses.
     * @example
     * // Create many QuestionnaireResponses
     * const questionnaireResponse = await prisma.questionnaireResponse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionnaireResponses and only return the `id`
     * const questionnaireResponseWithIdOnly = await prisma.questionnaireResponse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionnaireResponseCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionnaireResponseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionnaireResponse.
     * @param {QuestionnaireResponseDeleteArgs} args - Arguments to delete one QuestionnaireResponse.
     * @example
     * // Delete one QuestionnaireResponse
     * const QuestionnaireResponse = await prisma.questionnaireResponse.delete({
     *   where: {
     *     // ... filter to delete one QuestionnaireResponse
     *   }
     * })
     * 
     */
    delete<T extends QuestionnaireResponseDeleteArgs>(args: SelectSubset<T, QuestionnaireResponseDeleteArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionnaireResponse.
     * @param {QuestionnaireResponseUpdateArgs} args - Arguments to update one QuestionnaireResponse.
     * @example
     * // Update one QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionnaireResponseUpdateArgs>(args: SelectSubset<T, QuestionnaireResponseUpdateArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionnaireResponses.
     * @param {QuestionnaireResponseDeleteManyArgs} args - Arguments to filter QuestionnaireResponses to delete.
     * @example
     * // Delete a few QuestionnaireResponses
     * const { count } = await prisma.questionnaireResponse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionnaireResponseDeleteManyArgs>(args?: SelectSubset<T, QuestionnaireResponseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionnaireResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionnaireResponses
     * const questionnaireResponse = await prisma.questionnaireResponse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionnaireResponseUpdateManyArgs>(args: SelectSubset<T, QuestionnaireResponseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionnaireResponses and returns the data updated in the database.
     * @param {QuestionnaireResponseUpdateManyAndReturnArgs} args - Arguments to update many QuestionnaireResponses.
     * @example
     * // Update many QuestionnaireResponses
     * const questionnaireResponse = await prisma.questionnaireResponse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionnaireResponses and only return the `id`
     * const questionnaireResponseWithIdOnly = await prisma.questionnaireResponse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionnaireResponseUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionnaireResponseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionnaireResponse.
     * @param {QuestionnaireResponseUpsertArgs} args - Arguments to update or create a QuestionnaireResponse.
     * @example
     * // Update or create a QuestionnaireResponse
     * const questionnaireResponse = await prisma.questionnaireResponse.upsert({
     *   create: {
     *     // ... data to create a QuestionnaireResponse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionnaireResponse we want to update
     *   }
     * })
     */
    upsert<T extends QuestionnaireResponseUpsertArgs>(args: SelectSubset<T, QuestionnaireResponseUpsertArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionnaireResponses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseCountArgs} args - Arguments to filter QuestionnaireResponses to count.
     * @example
     * // Count the number of QuestionnaireResponses
     * const count = await prisma.questionnaireResponse.count({
     *   where: {
     *     // ... the filter for the QuestionnaireResponses we want to count
     *   }
     * })
    **/
    count<T extends QuestionnaireResponseCountArgs>(
      args?: Subset<T, QuestionnaireResponseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionnaireResponseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionnaireResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionnaireResponseAggregateArgs>(args: Subset<T, QuestionnaireResponseAggregateArgs>): Prisma.PrismaPromise<GetQuestionnaireResponseAggregateType<T>>

    /**
     * Group by QuestionnaireResponse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionnaireResponseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionnaireResponseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionnaireResponseGroupByArgs['orderBy'] }
        : { orderBy?: QuestionnaireResponseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionnaireResponseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionnaireResponseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionnaireResponse model
   */
  readonly fields: QuestionnaireResponseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionnaireResponse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionnaireResponseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionnaireResponse model
   */
  interface QuestionnaireResponseFieldRefs {
    readonly id: FieldRef<"QuestionnaireResponse", 'String'>
    readonly caseId: FieldRef<"QuestionnaireResponse", 'String'>
    readonly questionnaireType: FieldRef<"QuestionnaireResponse", 'QuestionnaireType'>
    readonly language: FieldRef<"QuestionnaireResponse", 'Language'>
    readonly responses: FieldRef<"QuestionnaireResponse", 'Json'>
    readonly aiAnalysis: FieldRef<"QuestionnaireResponse", 'Json'>
    readonly completenessScore: FieldRef<"QuestionnaireResponse", 'Float'>
    readonly confidence: FieldRef<"QuestionnaireResponse", 'Float'>
    readonly createdAt: FieldRef<"QuestionnaireResponse", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionnaireResponse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionnaireResponse findUnique
   */
  export type QuestionnaireResponseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionnaireResponse to fetch.
     */
    where: QuestionnaireResponseWhereUniqueInput
  }

  /**
   * QuestionnaireResponse findUniqueOrThrow
   */
  export type QuestionnaireResponseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionnaireResponse to fetch.
     */
    where: QuestionnaireResponseWhereUniqueInput
  }

  /**
   * QuestionnaireResponse findFirst
   */
  export type QuestionnaireResponseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionnaireResponse to fetch.
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionnaireResponses to fetch.
     */
    orderBy?: QuestionnaireResponseOrderByWithRelationInput | QuestionnaireResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionnaireResponses.
     */
    cursor?: QuestionnaireResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionnaireResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionnaireResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionnaireResponses.
     */
    distinct?: QuestionnaireResponseScalarFieldEnum | QuestionnaireResponseScalarFieldEnum[]
  }

  /**
   * QuestionnaireResponse findFirstOrThrow
   */
  export type QuestionnaireResponseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionnaireResponse to fetch.
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionnaireResponses to fetch.
     */
    orderBy?: QuestionnaireResponseOrderByWithRelationInput | QuestionnaireResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionnaireResponses.
     */
    cursor?: QuestionnaireResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionnaireResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionnaireResponses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionnaireResponses.
     */
    distinct?: QuestionnaireResponseScalarFieldEnum | QuestionnaireResponseScalarFieldEnum[]
  }

  /**
   * QuestionnaireResponse findMany
   */
  export type QuestionnaireResponseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter, which QuestionnaireResponses to fetch.
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionnaireResponses to fetch.
     */
    orderBy?: QuestionnaireResponseOrderByWithRelationInput | QuestionnaireResponseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionnaireResponses.
     */
    cursor?: QuestionnaireResponseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionnaireResponses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionnaireResponses.
     */
    skip?: number
    distinct?: QuestionnaireResponseScalarFieldEnum | QuestionnaireResponseScalarFieldEnum[]
  }

  /**
   * QuestionnaireResponse create
   */
  export type QuestionnaireResponseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionnaireResponse.
     */
    data: XOR<QuestionnaireResponseCreateInput, QuestionnaireResponseUncheckedCreateInput>
  }

  /**
   * QuestionnaireResponse createMany
   */
  export type QuestionnaireResponseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionnaireResponses.
     */
    data: QuestionnaireResponseCreateManyInput | QuestionnaireResponseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionnaireResponse createManyAndReturn
   */
  export type QuestionnaireResponseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionnaireResponses.
     */
    data: QuestionnaireResponseCreateManyInput | QuestionnaireResponseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionnaireResponse update
   */
  export type QuestionnaireResponseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionnaireResponse.
     */
    data: XOR<QuestionnaireResponseUpdateInput, QuestionnaireResponseUncheckedUpdateInput>
    /**
     * Choose, which QuestionnaireResponse to update.
     */
    where: QuestionnaireResponseWhereUniqueInput
  }

  /**
   * QuestionnaireResponse updateMany
   */
  export type QuestionnaireResponseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionnaireResponses.
     */
    data: XOR<QuestionnaireResponseUpdateManyMutationInput, QuestionnaireResponseUncheckedUpdateManyInput>
    /**
     * Filter which QuestionnaireResponses to update
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * Limit how many QuestionnaireResponses to update.
     */
    limit?: number
  }

  /**
   * QuestionnaireResponse updateManyAndReturn
   */
  export type QuestionnaireResponseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * The data used to update QuestionnaireResponses.
     */
    data: XOR<QuestionnaireResponseUpdateManyMutationInput, QuestionnaireResponseUncheckedUpdateManyInput>
    /**
     * Filter which QuestionnaireResponses to update
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * Limit how many QuestionnaireResponses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionnaireResponse upsert
   */
  export type QuestionnaireResponseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionnaireResponse to update in case it exists.
     */
    where: QuestionnaireResponseWhereUniqueInput
    /**
     * In case the QuestionnaireResponse found by the `where` argument doesn't exist, create a new QuestionnaireResponse with this data.
     */
    create: XOR<QuestionnaireResponseCreateInput, QuestionnaireResponseUncheckedCreateInput>
    /**
     * In case the QuestionnaireResponse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionnaireResponseUpdateInput, QuestionnaireResponseUncheckedUpdateInput>
  }

  /**
   * QuestionnaireResponse delete
   */
  export type QuestionnaireResponseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    /**
     * Filter which QuestionnaireResponse to delete.
     */
    where: QuestionnaireResponseWhereUniqueInput
  }

  /**
   * QuestionnaireResponse deleteMany
   */
  export type QuestionnaireResponseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionnaireResponses to delete
     */
    where?: QuestionnaireResponseWhereInput
    /**
     * Limit how many QuestionnaireResponses to delete.
     */
    limit?: number
  }

  /**
   * QuestionnaireResponse without action
   */
  export type QuestionnaireResponseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
  }


  /**
   * Model CasePayment
   */

  export type AggregateCasePayment = {
    _count: CasePaymentCountAggregateOutputType | null
    _avg: CasePaymentAvgAggregateOutputType | null
    _sum: CasePaymentSumAggregateOutputType | null
    _min: CasePaymentMinAggregateOutputType | null
    _max: CasePaymentMaxAggregateOutputType | null
  }

  export type CasePaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type CasePaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type CasePaymentMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    customerId: string | null
    amount: number | null
    currency: string | null
    professionalLevel: string | null
    urgencyLevel: $Enums.CaseUrgency | null
    status: $Enums.PaymentStatus | null
    paymentMethod: string | null
    transactionId: string | null
    paymentDate: Date | null
    refundDate: Date | null
    refundReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CasePaymentMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    customerId: string | null
    amount: number | null
    currency: string | null
    professionalLevel: string | null
    urgencyLevel: $Enums.CaseUrgency | null
    status: $Enums.PaymentStatus | null
    paymentMethod: string | null
    transactionId: string | null
    paymentDate: Date | null
    refundDate: Date | null
    refundReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CasePaymentCountAggregateOutputType = {
    id: number
    caseId: number
    customerId: number
    amount: number
    currency: number
    professionalLevel: number
    urgencyLevel: number
    status: number
    paymentMethod: number
    transactionId: number
    paymentDate: number
    refundDate: number
    refundReason: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CasePaymentAvgAggregateInputType = {
    amount?: true
  }

  export type CasePaymentSumAggregateInputType = {
    amount?: true
  }

  export type CasePaymentMinAggregateInputType = {
    id?: true
    caseId?: true
    customerId?: true
    amount?: true
    currency?: true
    professionalLevel?: true
    urgencyLevel?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    paymentDate?: true
    refundDate?: true
    refundReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CasePaymentMaxAggregateInputType = {
    id?: true
    caseId?: true
    customerId?: true
    amount?: true
    currency?: true
    professionalLevel?: true
    urgencyLevel?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    paymentDate?: true
    refundDate?: true
    refundReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CasePaymentCountAggregateInputType = {
    id?: true
    caseId?: true
    customerId?: true
    amount?: true
    currency?: true
    professionalLevel?: true
    urgencyLevel?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    paymentDate?: true
    refundDate?: true
    refundReason?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CasePaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CasePayment to aggregate.
     */
    where?: CasePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasePayments to fetch.
     */
    orderBy?: CasePaymentOrderByWithRelationInput | CasePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CasePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CasePayments
    **/
    _count?: true | CasePaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CasePaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CasePaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CasePaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CasePaymentMaxAggregateInputType
  }

  export type GetCasePaymentAggregateType<T extends CasePaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateCasePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCasePayment[P]>
      : GetScalarType<T[P], AggregateCasePayment[P]>
  }




  export type CasePaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CasePaymentWhereInput
    orderBy?: CasePaymentOrderByWithAggregationInput | CasePaymentOrderByWithAggregationInput[]
    by: CasePaymentScalarFieldEnum[] | CasePaymentScalarFieldEnum
    having?: CasePaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CasePaymentCountAggregateInputType | true
    _avg?: CasePaymentAvgAggregateInputType
    _sum?: CasePaymentSumAggregateInputType
    _min?: CasePaymentMinAggregateInputType
    _max?: CasePaymentMaxAggregateInputType
  }

  export type CasePaymentGroupByOutputType = {
    id: string
    caseId: string
    customerId: string
    amount: number
    currency: string
    professionalLevel: string
    urgencyLevel: $Enums.CaseUrgency
    status: $Enums.PaymentStatus
    paymentMethod: string | null
    transactionId: string | null
    paymentDate: Date | null
    refundDate: Date | null
    refundReason: string | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CasePaymentCountAggregateOutputType | null
    _avg: CasePaymentAvgAggregateOutputType | null
    _sum: CasePaymentSumAggregateOutputType | null
    _min: CasePaymentMinAggregateOutputType | null
    _max: CasePaymentMaxAggregateOutputType | null
  }

  type GetCasePaymentGroupByPayload<T extends CasePaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CasePaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CasePaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CasePaymentGroupByOutputType[P]>
            : GetScalarType<T[P], CasePaymentGroupByOutputType[P]>
        }
      >
    >


  export type CasePaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    customerId?: boolean
    amount?: boolean
    currency?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    paymentDate?: boolean
    refundDate?: boolean
    refundReason?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["casePayment"]>

  export type CasePaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    customerId?: boolean
    amount?: boolean
    currency?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    paymentDate?: boolean
    refundDate?: boolean
    refundReason?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["casePayment"]>

  export type CasePaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    customerId?: boolean
    amount?: boolean
    currency?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    paymentDate?: boolean
    refundDate?: boolean
    refundReason?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["casePayment"]>

  export type CasePaymentSelectScalar = {
    id?: boolean
    caseId?: boolean
    customerId?: boolean
    amount?: boolean
    currency?: boolean
    professionalLevel?: boolean
    urgencyLevel?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    paymentDate?: boolean
    refundDate?: boolean
    refundReason?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CasePaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "customerId" | "amount" | "currency" | "professionalLevel" | "urgencyLevel" | "status" | "paymentMethod" | "transactionId" | "paymentDate" | "refundDate" | "refundReason" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["casePayment"]>
  export type CasePaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type CasePaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type CasePaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }

  export type $CasePaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CasePayment"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      customerId: string
      amount: number
      currency: string
      professionalLevel: string
      urgencyLevel: $Enums.CaseUrgency
      status: $Enums.PaymentStatus
      paymentMethod: string | null
      transactionId: string | null
      paymentDate: Date | null
      refundDate: Date | null
      refundReason: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["casePayment"]>
    composites: {}
  }

  type CasePaymentGetPayload<S extends boolean | null | undefined | CasePaymentDefaultArgs> = $Result.GetResult<Prisma.$CasePaymentPayload, S>

  type CasePaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CasePaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CasePaymentCountAggregateInputType | true
    }

  export interface CasePaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CasePayment'], meta: { name: 'CasePayment' } }
    /**
     * Find zero or one CasePayment that matches the filter.
     * @param {CasePaymentFindUniqueArgs} args - Arguments to find a CasePayment
     * @example
     * // Get one CasePayment
     * const casePayment = await prisma.casePayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CasePaymentFindUniqueArgs>(args: SelectSubset<T, CasePaymentFindUniqueArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CasePayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CasePaymentFindUniqueOrThrowArgs} args - Arguments to find a CasePayment
     * @example
     * // Get one CasePayment
     * const casePayment = await prisma.casePayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CasePaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, CasePaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CasePayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentFindFirstArgs} args - Arguments to find a CasePayment
     * @example
     * // Get one CasePayment
     * const casePayment = await prisma.casePayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CasePaymentFindFirstArgs>(args?: SelectSubset<T, CasePaymentFindFirstArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CasePayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentFindFirstOrThrowArgs} args - Arguments to find a CasePayment
     * @example
     * // Get one CasePayment
     * const casePayment = await prisma.casePayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CasePaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, CasePaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CasePayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CasePayments
     * const casePayments = await prisma.casePayment.findMany()
     * 
     * // Get first 10 CasePayments
     * const casePayments = await prisma.casePayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const casePaymentWithIdOnly = await prisma.casePayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CasePaymentFindManyArgs>(args?: SelectSubset<T, CasePaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CasePayment.
     * @param {CasePaymentCreateArgs} args - Arguments to create a CasePayment.
     * @example
     * // Create one CasePayment
     * const CasePayment = await prisma.casePayment.create({
     *   data: {
     *     // ... data to create a CasePayment
     *   }
     * })
     * 
     */
    create<T extends CasePaymentCreateArgs>(args: SelectSubset<T, CasePaymentCreateArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CasePayments.
     * @param {CasePaymentCreateManyArgs} args - Arguments to create many CasePayments.
     * @example
     * // Create many CasePayments
     * const casePayment = await prisma.casePayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CasePaymentCreateManyArgs>(args?: SelectSubset<T, CasePaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CasePayments and returns the data saved in the database.
     * @param {CasePaymentCreateManyAndReturnArgs} args - Arguments to create many CasePayments.
     * @example
     * // Create many CasePayments
     * const casePayment = await prisma.casePayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CasePayments and only return the `id`
     * const casePaymentWithIdOnly = await prisma.casePayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CasePaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, CasePaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CasePayment.
     * @param {CasePaymentDeleteArgs} args - Arguments to delete one CasePayment.
     * @example
     * // Delete one CasePayment
     * const CasePayment = await prisma.casePayment.delete({
     *   where: {
     *     // ... filter to delete one CasePayment
     *   }
     * })
     * 
     */
    delete<T extends CasePaymentDeleteArgs>(args: SelectSubset<T, CasePaymentDeleteArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CasePayment.
     * @param {CasePaymentUpdateArgs} args - Arguments to update one CasePayment.
     * @example
     * // Update one CasePayment
     * const casePayment = await prisma.casePayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CasePaymentUpdateArgs>(args: SelectSubset<T, CasePaymentUpdateArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CasePayments.
     * @param {CasePaymentDeleteManyArgs} args - Arguments to filter CasePayments to delete.
     * @example
     * // Delete a few CasePayments
     * const { count } = await prisma.casePayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CasePaymentDeleteManyArgs>(args?: SelectSubset<T, CasePaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CasePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CasePayments
     * const casePayment = await prisma.casePayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CasePaymentUpdateManyArgs>(args: SelectSubset<T, CasePaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CasePayments and returns the data updated in the database.
     * @param {CasePaymentUpdateManyAndReturnArgs} args - Arguments to update many CasePayments.
     * @example
     * // Update many CasePayments
     * const casePayment = await prisma.casePayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CasePayments and only return the `id`
     * const casePaymentWithIdOnly = await prisma.casePayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CasePaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, CasePaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CasePayment.
     * @param {CasePaymentUpsertArgs} args - Arguments to update or create a CasePayment.
     * @example
     * // Update or create a CasePayment
     * const casePayment = await prisma.casePayment.upsert({
     *   create: {
     *     // ... data to create a CasePayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CasePayment we want to update
     *   }
     * })
     */
    upsert<T extends CasePaymentUpsertArgs>(args: SelectSubset<T, CasePaymentUpsertArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CasePayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentCountArgs} args - Arguments to filter CasePayments to count.
     * @example
     * // Count the number of CasePayments
     * const count = await prisma.casePayment.count({
     *   where: {
     *     // ... the filter for the CasePayments we want to count
     *   }
     * })
    **/
    count<T extends CasePaymentCountArgs>(
      args?: Subset<T, CasePaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CasePaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CasePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CasePaymentAggregateArgs>(args: Subset<T, CasePaymentAggregateArgs>): Prisma.PrismaPromise<GetCasePaymentAggregateType<T>>

    /**
     * Group by CasePayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasePaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CasePaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CasePaymentGroupByArgs['orderBy'] }
        : { orderBy?: CasePaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CasePaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasePaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CasePayment model
   */
  readonly fields: CasePaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CasePayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CasePaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CasePayment model
   */
  interface CasePaymentFieldRefs {
    readonly id: FieldRef<"CasePayment", 'String'>
    readonly caseId: FieldRef<"CasePayment", 'String'>
    readonly customerId: FieldRef<"CasePayment", 'String'>
    readonly amount: FieldRef<"CasePayment", 'Float'>
    readonly currency: FieldRef<"CasePayment", 'String'>
    readonly professionalLevel: FieldRef<"CasePayment", 'String'>
    readonly urgencyLevel: FieldRef<"CasePayment", 'CaseUrgency'>
    readonly status: FieldRef<"CasePayment", 'PaymentStatus'>
    readonly paymentMethod: FieldRef<"CasePayment", 'String'>
    readonly transactionId: FieldRef<"CasePayment", 'String'>
    readonly paymentDate: FieldRef<"CasePayment", 'DateTime'>
    readonly refundDate: FieldRef<"CasePayment", 'DateTime'>
    readonly refundReason: FieldRef<"CasePayment", 'String'>
    readonly metadata: FieldRef<"CasePayment", 'Json'>
    readonly createdAt: FieldRef<"CasePayment", 'DateTime'>
    readonly updatedAt: FieldRef<"CasePayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CasePayment findUnique
   */
  export type CasePaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter, which CasePayment to fetch.
     */
    where: CasePaymentWhereUniqueInput
  }

  /**
   * CasePayment findUniqueOrThrow
   */
  export type CasePaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter, which CasePayment to fetch.
     */
    where: CasePaymentWhereUniqueInput
  }

  /**
   * CasePayment findFirst
   */
  export type CasePaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter, which CasePayment to fetch.
     */
    where?: CasePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasePayments to fetch.
     */
    orderBy?: CasePaymentOrderByWithRelationInput | CasePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CasePayments.
     */
    cursor?: CasePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CasePayments.
     */
    distinct?: CasePaymentScalarFieldEnum | CasePaymentScalarFieldEnum[]
  }

  /**
   * CasePayment findFirstOrThrow
   */
  export type CasePaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter, which CasePayment to fetch.
     */
    where?: CasePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasePayments to fetch.
     */
    orderBy?: CasePaymentOrderByWithRelationInput | CasePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CasePayments.
     */
    cursor?: CasePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasePayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CasePayments.
     */
    distinct?: CasePaymentScalarFieldEnum | CasePaymentScalarFieldEnum[]
  }

  /**
   * CasePayment findMany
   */
  export type CasePaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter, which CasePayments to fetch.
     */
    where?: CasePaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CasePayments to fetch.
     */
    orderBy?: CasePaymentOrderByWithRelationInput | CasePaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CasePayments.
     */
    cursor?: CasePaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CasePayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CasePayments.
     */
    skip?: number
    distinct?: CasePaymentScalarFieldEnum | CasePaymentScalarFieldEnum[]
  }

  /**
   * CasePayment create
   */
  export type CasePaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a CasePayment.
     */
    data: XOR<CasePaymentCreateInput, CasePaymentUncheckedCreateInput>
  }

  /**
   * CasePayment createMany
   */
  export type CasePaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CasePayments.
     */
    data: CasePaymentCreateManyInput | CasePaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CasePayment createManyAndReturn
   */
  export type CasePaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * The data used to create many CasePayments.
     */
    data: CasePaymentCreateManyInput | CasePaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CasePayment update
   */
  export type CasePaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a CasePayment.
     */
    data: XOR<CasePaymentUpdateInput, CasePaymentUncheckedUpdateInput>
    /**
     * Choose, which CasePayment to update.
     */
    where: CasePaymentWhereUniqueInput
  }

  /**
   * CasePayment updateMany
   */
  export type CasePaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CasePayments.
     */
    data: XOR<CasePaymentUpdateManyMutationInput, CasePaymentUncheckedUpdateManyInput>
    /**
     * Filter which CasePayments to update
     */
    where?: CasePaymentWhereInput
    /**
     * Limit how many CasePayments to update.
     */
    limit?: number
  }

  /**
   * CasePayment updateManyAndReturn
   */
  export type CasePaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * The data used to update CasePayments.
     */
    data: XOR<CasePaymentUpdateManyMutationInput, CasePaymentUncheckedUpdateManyInput>
    /**
     * Filter which CasePayments to update
     */
    where?: CasePaymentWhereInput
    /**
     * Limit how many CasePayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CasePayment upsert
   */
  export type CasePaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the CasePayment to update in case it exists.
     */
    where: CasePaymentWhereUniqueInput
    /**
     * In case the CasePayment found by the `where` argument doesn't exist, create a new CasePayment with this data.
     */
    create: XOR<CasePaymentCreateInput, CasePaymentUncheckedCreateInput>
    /**
     * In case the CasePayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CasePaymentUpdateInput, CasePaymentUncheckedUpdateInput>
  }

  /**
   * CasePayment delete
   */
  export type CasePaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    /**
     * Filter which CasePayment to delete.
     */
    where: CasePaymentWhereUniqueInput
  }

  /**
   * CasePayment deleteMany
   */
  export type CasePaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CasePayments to delete
     */
    where?: CasePaymentWhereInput
    /**
     * Limit how many CasePayments to delete.
     */
    limit?: number
  }

  /**
   * CasePayment without action
   */
  export type CasePaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
  }


  /**
   * Model MedicalCase
   */

  export type AggregateMedicalCase = {
    _count: MedicalCaseCountAggregateOutputType | null
    _avg: MedicalCaseAvgAggregateOutputType | null
    _sum: MedicalCaseSumAggregateOutputType | null
    _min: MedicalCaseMinAggregateOutputType | null
    _max: MedicalCaseMaxAggregateOutputType | null
  }

  export type MedicalCaseAvgAggregateOutputType = {
    qualityScore: number | null
    completenessScore: number | null
    version: number | null
  }

  export type MedicalCaseSumAggregateOutputType = {
    qualityScore: number | null
    completenessScore: number | null
    version: number | null
  }

  export type MedicalCaseMinAggregateOutputType = {
    id: string | null
    caseNumber: string | null
    customerId: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    email: string | null
    phone: string | null
    title: string | null
    description: string | null
    chiefComplaint: string | null
    category: string | null
    status: string | null
    priority: string | null
    requestedProfessionalLevel: string | null
    talentPool: string | null
    urgencyReason: string | null
    submittedAt: Date | null
    reviewStartedAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
    assignedProfessionalId: string | null
    assignedAt: Date | null
    qualityScore: number | null
    completenessScore: number | null
    version: number | null
    ethnicity: string | null
    gender: string | null
    diseaseType: string | null
    isFirstOccurrence: boolean | null
    paymentId: string | null
    consentAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalCaseMaxAggregateOutputType = {
    id: string | null
    caseNumber: string | null
    customerId: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    email: string | null
    phone: string | null
    title: string | null
    description: string | null
    chiefComplaint: string | null
    category: string | null
    status: string | null
    priority: string | null
    requestedProfessionalLevel: string | null
    talentPool: string | null
    urgencyReason: string | null
    submittedAt: Date | null
    reviewStartedAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
    assignedProfessionalId: string | null
    assignedAt: Date | null
    qualityScore: number | null
    completenessScore: number | null
    version: number | null
    ethnicity: string | null
    gender: string | null
    diseaseType: string | null
    isFirstOccurrence: boolean | null
    paymentId: string | null
    consentAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalCaseCountAggregateOutputType = {
    id: number
    caseNumber: number
    customerId: number
    firstName: number
    middleName: number
    lastName: number
    dateOfBirth: number
    email: number
    phone: number
    title: number
    description: number
    chiefComplaint: number
    category: number
    medicalHistory: number
    currentMedications: number
    allergies: number
    familyHistory: number
    status: number
    priority: number
    requestedProfessionalLevel: number
    talentPool: number
    urgencyReason: number
    submittedAt: number
    reviewStartedAt: number
    completedAt: number
    expiresAt: number
    assignedProfessionalId: number
    assignedAt: number
    qualityScore: number
    completenessScore: number
    metadata: number
    tags: number
    version: number
    ethnicity: number
    gender: number
    diseaseType: number
    isFirstOccurrence: number
    geneticFamilyHistory: number
    paymentId: number
    consentAccepted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalCaseAvgAggregateInputType = {
    qualityScore?: true
    completenessScore?: true
    version?: true
  }

  export type MedicalCaseSumAggregateInputType = {
    qualityScore?: true
    completenessScore?: true
    version?: true
  }

  export type MedicalCaseMinAggregateInputType = {
    id?: true
    caseNumber?: true
    customerId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    title?: true
    description?: true
    chiefComplaint?: true
    category?: true
    status?: true
    priority?: true
    requestedProfessionalLevel?: true
    talentPool?: true
    urgencyReason?: true
    submittedAt?: true
    reviewStartedAt?: true
    completedAt?: true
    expiresAt?: true
    assignedProfessionalId?: true
    assignedAt?: true
    qualityScore?: true
    completenessScore?: true
    version?: true
    ethnicity?: true
    gender?: true
    diseaseType?: true
    isFirstOccurrence?: true
    paymentId?: true
    consentAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalCaseMaxAggregateInputType = {
    id?: true
    caseNumber?: true
    customerId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    title?: true
    description?: true
    chiefComplaint?: true
    category?: true
    status?: true
    priority?: true
    requestedProfessionalLevel?: true
    talentPool?: true
    urgencyReason?: true
    submittedAt?: true
    reviewStartedAt?: true
    completedAt?: true
    expiresAt?: true
    assignedProfessionalId?: true
    assignedAt?: true
    qualityScore?: true
    completenessScore?: true
    version?: true
    ethnicity?: true
    gender?: true
    diseaseType?: true
    isFirstOccurrence?: true
    paymentId?: true
    consentAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalCaseCountAggregateInputType = {
    id?: true
    caseNumber?: true
    customerId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    title?: true
    description?: true
    chiefComplaint?: true
    category?: true
    medicalHistory?: true
    currentMedications?: true
    allergies?: true
    familyHistory?: true
    status?: true
    priority?: true
    requestedProfessionalLevel?: true
    talentPool?: true
    urgencyReason?: true
    submittedAt?: true
    reviewStartedAt?: true
    completedAt?: true
    expiresAt?: true
    assignedProfessionalId?: true
    assignedAt?: true
    qualityScore?: true
    completenessScore?: true
    metadata?: true
    tags?: true
    version?: true
    ethnicity?: true
    gender?: true
    diseaseType?: true
    isFirstOccurrence?: true
    geneticFamilyHistory?: true
    paymentId?: true
    consentAccepted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalCaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalCase to aggregate.
     */
    where?: MedicalCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCases to fetch.
     */
    orderBy?: MedicalCaseOrderByWithRelationInput | MedicalCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalCases
    **/
    _count?: true | MedicalCaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalCaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalCaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalCaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalCaseMaxAggregateInputType
  }

  export type GetMedicalCaseAggregateType<T extends MedicalCaseAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalCase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalCase[P]>
      : GetScalarType<T[P], AggregateMedicalCase[P]>
  }




  export type MedicalCaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalCaseWhereInput
    orderBy?: MedicalCaseOrderByWithAggregationInput | MedicalCaseOrderByWithAggregationInput[]
    by: MedicalCaseScalarFieldEnum[] | MedicalCaseScalarFieldEnum
    having?: MedicalCaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalCaseCountAggregateInputType | true
    _avg?: MedicalCaseAvgAggregateInputType
    _sum?: MedicalCaseSumAggregateInputType
    _min?: MedicalCaseMinAggregateInputType
    _max?: MedicalCaseMaxAggregateInputType
  }

  export type MedicalCaseGroupByOutputType = {
    id: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName: string | null
    lastName: string
    dateOfBirth: Date
    email: string
    phone: string | null
    title: string
    description: string
    chiefComplaint: string | null
    category: string
    medicalHistory: JsonValue | null
    currentMedications: JsonValue | null
    allergies: JsonValue | null
    familyHistory: JsonValue | null
    status: string
    priority: string
    requestedProfessionalLevel: string
    talentPool: string | null
    urgencyReason: string | null
    submittedAt: Date | null
    reviewStartedAt: Date | null
    completedAt: Date | null
    expiresAt: Date | null
    assignedProfessionalId: string | null
    assignedAt: Date | null
    qualityScore: number | null
    completenessScore: number | null
    metadata: JsonValue | null
    tags: string[]
    version: number
    ethnicity: string | null
    gender: string | null
    diseaseType: string | null
    isFirstOccurrence: boolean | null
    geneticFamilyHistory: JsonValue | null
    paymentId: string | null
    consentAccepted: boolean
    createdAt: Date
    updatedAt: Date
    _count: MedicalCaseCountAggregateOutputType | null
    _avg: MedicalCaseAvgAggregateOutputType | null
    _sum: MedicalCaseSumAggregateOutputType | null
    _min: MedicalCaseMinAggregateOutputType | null
    _max: MedicalCaseMaxAggregateOutputType | null
  }

  type GetMedicalCaseGroupByPayload<T extends MedicalCaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalCaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalCaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalCaseGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalCaseGroupByOutputType[P]>
        }
      >
    >


  export type MedicalCaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseNumber?: boolean
    customerId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    title?: boolean
    description?: boolean
    chiefComplaint?: boolean
    category?: boolean
    medicalHistory?: boolean
    currentMedications?: boolean
    allergies?: boolean
    familyHistory?: boolean
    status?: boolean
    priority?: boolean
    requestedProfessionalLevel?: boolean
    talentPool?: boolean
    urgencyReason?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    assignedProfessionalId?: boolean
    assignedAt?: boolean
    qualityScore?: boolean
    completenessScore?: boolean
    metadata?: boolean
    tags?: boolean
    version?: boolean
    ethnicity?: boolean
    gender?: boolean
    diseaseType?: boolean
    isFirstOccurrence?: boolean
    geneticFamilyHistory?: boolean
    paymentId?: boolean
    consentAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    uploadedFiles?: boolean | MedicalCase$uploadedFilesArgs<ExtArgs>
    statusHistory?: boolean | MedicalCase$statusHistoryArgs<ExtArgs>
    caseAssignments?: boolean | MedicalCase$caseAssignmentsArgs<ExtArgs>
    aiAnalyses?: boolean | MedicalCase$aiAnalysesArgs<ExtArgs>
    medicalOpinions?: boolean | MedicalCase$medicalOpinionsArgs<ExtArgs>
    professionalPayments?: boolean | MedicalCase$professionalPaymentsArgs<ExtArgs>
    questionnaireResponse?: boolean | MedicalCase$questionnaireResponseArgs<ExtArgs>
    casePayment?: boolean | MedicalCase$casePaymentArgs<ExtArgs>
    _count?: boolean | MedicalCaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalCase"]>

  export type MedicalCaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseNumber?: boolean
    customerId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    title?: boolean
    description?: boolean
    chiefComplaint?: boolean
    category?: boolean
    medicalHistory?: boolean
    currentMedications?: boolean
    allergies?: boolean
    familyHistory?: boolean
    status?: boolean
    priority?: boolean
    requestedProfessionalLevel?: boolean
    talentPool?: boolean
    urgencyReason?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    assignedProfessionalId?: boolean
    assignedAt?: boolean
    qualityScore?: boolean
    completenessScore?: boolean
    metadata?: boolean
    tags?: boolean
    version?: boolean
    ethnicity?: boolean
    gender?: boolean
    diseaseType?: boolean
    isFirstOccurrence?: boolean
    geneticFamilyHistory?: boolean
    paymentId?: boolean
    consentAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalCase"]>

  export type MedicalCaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseNumber?: boolean
    customerId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    title?: boolean
    description?: boolean
    chiefComplaint?: boolean
    category?: boolean
    medicalHistory?: boolean
    currentMedications?: boolean
    allergies?: boolean
    familyHistory?: boolean
    status?: boolean
    priority?: boolean
    requestedProfessionalLevel?: boolean
    talentPool?: boolean
    urgencyReason?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    assignedProfessionalId?: boolean
    assignedAt?: boolean
    qualityScore?: boolean
    completenessScore?: boolean
    metadata?: boolean
    tags?: boolean
    version?: boolean
    ethnicity?: boolean
    gender?: boolean
    diseaseType?: boolean
    isFirstOccurrence?: boolean
    geneticFamilyHistory?: boolean
    paymentId?: boolean
    consentAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalCase"]>

  export type MedicalCaseSelectScalar = {
    id?: boolean
    caseNumber?: boolean
    customerId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    title?: boolean
    description?: boolean
    chiefComplaint?: boolean
    category?: boolean
    medicalHistory?: boolean
    currentMedications?: boolean
    allergies?: boolean
    familyHistory?: boolean
    status?: boolean
    priority?: boolean
    requestedProfessionalLevel?: boolean
    talentPool?: boolean
    urgencyReason?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    completedAt?: boolean
    expiresAt?: boolean
    assignedProfessionalId?: boolean
    assignedAt?: boolean
    qualityScore?: boolean
    completenessScore?: boolean
    metadata?: boolean
    tags?: boolean
    version?: boolean
    ethnicity?: boolean
    gender?: boolean
    diseaseType?: boolean
    isFirstOccurrence?: boolean
    geneticFamilyHistory?: boolean
    paymentId?: boolean
    consentAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalCaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseNumber" | "customerId" | "firstName" | "middleName" | "lastName" | "dateOfBirth" | "email" | "phone" | "title" | "description" | "chiefComplaint" | "category" | "medicalHistory" | "currentMedications" | "allergies" | "familyHistory" | "status" | "priority" | "requestedProfessionalLevel" | "talentPool" | "urgencyReason" | "submittedAt" | "reviewStartedAt" | "completedAt" | "expiresAt" | "assignedProfessionalId" | "assignedAt" | "qualityScore" | "completenessScore" | "metadata" | "tags" | "version" | "ethnicity" | "gender" | "diseaseType" | "isFirstOccurrence" | "geneticFamilyHistory" | "paymentId" | "consentAccepted" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalCase"]>
  export type MedicalCaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    uploadedFiles?: boolean | MedicalCase$uploadedFilesArgs<ExtArgs>
    statusHistory?: boolean | MedicalCase$statusHistoryArgs<ExtArgs>
    caseAssignments?: boolean | MedicalCase$caseAssignmentsArgs<ExtArgs>
    aiAnalyses?: boolean | MedicalCase$aiAnalysesArgs<ExtArgs>
    medicalOpinions?: boolean | MedicalCase$medicalOpinionsArgs<ExtArgs>
    professionalPayments?: boolean | MedicalCase$professionalPaymentsArgs<ExtArgs>
    questionnaireResponse?: boolean | MedicalCase$questionnaireResponseArgs<ExtArgs>
    casePayment?: boolean | MedicalCase$casePaymentArgs<ExtArgs>
    _count?: boolean | MedicalCaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicalCaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type MedicalCaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $MedicalCasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalCase"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      uploadedFiles: Prisma.$UploadedFilePayload<ExtArgs>[]
      statusHistory: Prisma.$CaseStatusHistoryPayload<ExtArgs>[]
      caseAssignments: Prisma.$CaseAssignmentPayload<ExtArgs>[]
      aiAnalyses: Prisma.$AIAnalysisPayload<ExtArgs>[]
      medicalOpinions: Prisma.$MedicalOpinionPayload<ExtArgs>[]
      professionalPayments: Prisma.$ProfessionalPaymentPayload<ExtArgs>[]
      questionnaireResponse: Prisma.$QuestionnaireResponsePayload<ExtArgs> | null
      casePayment: Prisma.$CasePaymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseNumber: string
      customerId: string
      firstName: string
      middleName: string | null
      lastName: string
      dateOfBirth: Date
      email: string
      phone: string | null
      title: string
      description: string
      chiefComplaint: string | null
      category: string
      medicalHistory: Prisma.JsonValue | null
      currentMedications: Prisma.JsonValue | null
      allergies: Prisma.JsonValue | null
      familyHistory: Prisma.JsonValue | null
      status: string
      priority: string
      requestedProfessionalLevel: string
      talentPool: string | null
      urgencyReason: string | null
      submittedAt: Date | null
      reviewStartedAt: Date | null
      completedAt: Date | null
      expiresAt: Date | null
      assignedProfessionalId: string | null
      assignedAt: Date | null
      qualityScore: number | null
      completenessScore: number | null
      metadata: Prisma.JsonValue | null
      tags: string[]
      version: number
      ethnicity: string | null
      gender: string | null
      diseaseType: string | null
      isFirstOccurrence: boolean | null
      geneticFamilyHistory: Prisma.JsonValue | null
      paymentId: string | null
      consentAccepted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalCase"]>
    composites: {}
  }

  type MedicalCaseGetPayload<S extends boolean | null | undefined | MedicalCaseDefaultArgs> = $Result.GetResult<Prisma.$MedicalCasePayload, S>

  type MedicalCaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalCaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalCaseCountAggregateInputType | true
    }

  export interface MedicalCaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalCase'], meta: { name: 'MedicalCase' } }
    /**
     * Find zero or one MedicalCase that matches the filter.
     * @param {MedicalCaseFindUniqueArgs} args - Arguments to find a MedicalCase
     * @example
     * // Get one MedicalCase
     * const medicalCase = await prisma.medicalCase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalCaseFindUniqueArgs>(args: SelectSubset<T, MedicalCaseFindUniqueArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalCase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalCaseFindUniqueOrThrowArgs} args - Arguments to find a MedicalCase
     * @example
     * // Get one MedicalCase
     * const medicalCase = await prisma.medicalCase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalCaseFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalCaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalCase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseFindFirstArgs} args - Arguments to find a MedicalCase
     * @example
     * // Get one MedicalCase
     * const medicalCase = await prisma.medicalCase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalCaseFindFirstArgs>(args?: SelectSubset<T, MedicalCaseFindFirstArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalCase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseFindFirstOrThrowArgs} args - Arguments to find a MedicalCase
     * @example
     * // Get one MedicalCase
     * const medicalCase = await prisma.medicalCase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalCaseFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalCaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalCases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalCases
     * const medicalCases = await prisma.medicalCase.findMany()
     * 
     * // Get first 10 MedicalCases
     * const medicalCases = await prisma.medicalCase.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalCaseWithIdOnly = await prisma.medicalCase.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalCaseFindManyArgs>(args?: SelectSubset<T, MedicalCaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalCase.
     * @param {MedicalCaseCreateArgs} args - Arguments to create a MedicalCase.
     * @example
     * // Create one MedicalCase
     * const MedicalCase = await prisma.medicalCase.create({
     *   data: {
     *     // ... data to create a MedicalCase
     *   }
     * })
     * 
     */
    create<T extends MedicalCaseCreateArgs>(args: SelectSubset<T, MedicalCaseCreateArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalCases.
     * @param {MedicalCaseCreateManyArgs} args - Arguments to create many MedicalCases.
     * @example
     * // Create many MedicalCases
     * const medicalCase = await prisma.medicalCase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalCaseCreateManyArgs>(args?: SelectSubset<T, MedicalCaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalCases and returns the data saved in the database.
     * @param {MedicalCaseCreateManyAndReturnArgs} args - Arguments to create many MedicalCases.
     * @example
     * // Create many MedicalCases
     * const medicalCase = await prisma.medicalCase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalCases and only return the `id`
     * const medicalCaseWithIdOnly = await prisma.medicalCase.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalCaseCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalCaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalCase.
     * @param {MedicalCaseDeleteArgs} args - Arguments to delete one MedicalCase.
     * @example
     * // Delete one MedicalCase
     * const MedicalCase = await prisma.medicalCase.delete({
     *   where: {
     *     // ... filter to delete one MedicalCase
     *   }
     * })
     * 
     */
    delete<T extends MedicalCaseDeleteArgs>(args: SelectSubset<T, MedicalCaseDeleteArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalCase.
     * @param {MedicalCaseUpdateArgs} args - Arguments to update one MedicalCase.
     * @example
     * // Update one MedicalCase
     * const medicalCase = await prisma.medicalCase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalCaseUpdateArgs>(args: SelectSubset<T, MedicalCaseUpdateArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalCases.
     * @param {MedicalCaseDeleteManyArgs} args - Arguments to filter MedicalCases to delete.
     * @example
     * // Delete a few MedicalCases
     * const { count } = await prisma.medicalCase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalCaseDeleteManyArgs>(args?: SelectSubset<T, MedicalCaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalCases
     * const medicalCase = await prisma.medicalCase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalCaseUpdateManyArgs>(args: SelectSubset<T, MedicalCaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalCases and returns the data updated in the database.
     * @param {MedicalCaseUpdateManyAndReturnArgs} args - Arguments to update many MedicalCases.
     * @example
     * // Update many MedicalCases
     * const medicalCase = await prisma.medicalCase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalCases and only return the `id`
     * const medicalCaseWithIdOnly = await prisma.medicalCase.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalCaseUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalCaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalCase.
     * @param {MedicalCaseUpsertArgs} args - Arguments to update or create a MedicalCase.
     * @example
     * // Update or create a MedicalCase
     * const medicalCase = await prisma.medicalCase.upsert({
     *   create: {
     *     // ... data to create a MedicalCase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalCase we want to update
     *   }
     * })
     */
    upsert<T extends MedicalCaseUpsertArgs>(args: SelectSubset<T, MedicalCaseUpsertArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalCases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseCountArgs} args - Arguments to filter MedicalCases to count.
     * @example
     * // Count the number of MedicalCases
     * const count = await prisma.medicalCase.count({
     *   where: {
     *     // ... the filter for the MedicalCases we want to count
     *   }
     * })
    **/
    count<T extends MedicalCaseCountArgs>(
      args?: Subset<T, MedicalCaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalCaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalCaseAggregateArgs>(args: Subset<T, MedicalCaseAggregateArgs>): Prisma.PrismaPromise<GetMedicalCaseAggregateType<T>>

    /**
     * Group by MedicalCase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalCaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalCaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalCaseGroupByArgs['orderBy'] }
        : { orderBy?: MedicalCaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalCaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalCaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalCase model
   */
  readonly fields: MedicalCaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalCase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalCaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    uploadedFiles<T extends MedicalCase$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    statusHistory<T extends MedicalCase$statusHistoryArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$statusHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    caseAssignments<T extends MedicalCase$caseAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$caseAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiAnalyses<T extends MedicalCase$aiAnalysesArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$aiAnalysesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalOpinions<T extends MedicalCase$medicalOpinionsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$medicalOpinionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionalPayments<T extends MedicalCase$professionalPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$professionalPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionnaireResponse<T extends MedicalCase$questionnaireResponseArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$questionnaireResponseArgs<ExtArgs>>): Prisma__QuestionnaireResponseClient<$Result.GetResult<Prisma.$QuestionnaireResponsePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    casePayment<T extends MedicalCase$casePaymentArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCase$casePaymentArgs<ExtArgs>>): Prisma__CasePaymentClient<$Result.GetResult<Prisma.$CasePaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalCase model
   */
  interface MedicalCaseFieldRefs {
    readonly id: FieldRef<"MedicalCase", 'String'>
    readonly caseNumber: FieldRef<"MedicalCase", 'String'>
    readonly customerId: FieldRef<"MedicalCase", 'String'>
    readonly firstName: FieldRef<"MedicalCase", 'String'>
    readonly middleName: FieldRef<"MedicalCase", 'String'>
    readonly lastName: FieldRef<"MedicalCase", 'String'>
    readonly dateOfBirth: FieldRef<"MedicalCase", 'DateTime'>
    readonly email: FieldRef<"MedicalCase", 'String'>
    readonly phone: FieldRef<"MedicalCase", 'String'>
    readonly title: FieldRef<"MedicalCase", 'String'>
    readonly description: FieldRef<"MedicalCase", 'String'>
    readonly chiefComplaint: FieldRef<"MedicalCase", 'String'>
    readonly category: FieldRef<"MedicalCase", 'String'>
    readonly medicalHistory: FieldRef<"MedicalCase", 'Json'>
    readonly currentMedications: FieldRef<"MedicalCase", 'Json'>
    readonly allergies: FieldRef<"MedicalCase", 'Json'>
    readonly familyHistory: FieldRef<"MedicalCase", 'Json'>
    readonly status: FieldRef<"MedicalCase", 'String'>
    readonly priority: FieldRef<"MedicalCase", 'String'>
    readonly requestedProfessionalLevel: FieldRef<"MedicalCase", 'String'>
    readonly talentPool: FieldRef<"MedicalCase", 'String'>
    readonly urgencyReason: FieldRef<"MedicalCase", 'String'>
    readonly submittedAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly reviewStartedAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly completedAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly expiresAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly assignedProfessionalId: FieldRef<"MedicalCase", 'String'>
    readonly assignedAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly qualityScore: FieldRef<"MedicalCase", 'Float'>
    readonly completenessScore: FieldRef<"MedicalCase", 'Float'>
    readonly metadata: FieldRef<"MedicalCase", 'Json'>
    readonly tags: FieldRef<"MedicalCase", 'String[]'>
    readonly version: FieldRef<"MedicalCase", 'Int'>
    readonly ethnicity: FieldRef<"MedicalCase", 'String'>
    readonly gender: FieldRef<"MedicalCase", 'String'>
    readonly diseaseType: FieldRef<"MedicalCase", 'String'>
    readonly isFirstOccurrence: FieldRef<"MedicalCase", 'Boolean'>
    readonly geneticFamilyHistory: FieldRef<"MedicalCase", 'Json'>
    readonly paymentId: FieldRef<"MedicalCase", 'String'>
    readonly consentAccepted: FieldRef<"MedicalCase", 'Boolean'>
    readonly createdAt: FieldRef<"MedicalCase", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalCase", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalCase findUnique
   */
  export type MedicalCaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCase to fetch.
     */
    where: MedicalCaseWhereUniqueInput
  }

  /**
   * MedicalCase findUniqueOrThrow
   */
  export type MedicalCaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCase to fetch.
     */
    where: MedicalCaseWhereUniqueInput
  }

  /**
   * MedicalCase findFirst
   */
  export type MedicalCaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCase to fetch.
     */
    where?: MedicalCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCases to fetch.
     */
    orderBy?: MedicalCaseOrderByWithRelationInput | MedicalCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalCases.
     */
    cursor?: MedicalCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalCases.
     */
    distinct?: MedicalCaseScalarFieldEnum | MedicalCaseScalarFieldEnum[]
  }

  /**
   * MedicalCase findFirstOrThrow
   */
  export type MedicalCaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCase to fetch.
     */
    where?: MedicalCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCases to fetch.
     */
    orderBy?: MedicalCaseOrderByWithRelationInput | MedicalCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalCases.
     */
    cursor?: MedicalCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalCases.
     */
    distinct?: MedicalCaseScalarFieldEnum | MedicalCaseScalarFieldEnum[]
  }

  /**
   * MedicalCase findMany
   */
  export type MedicalCaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter, which MedicalCases to fetch.
     */
    where?: MedicalCaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalCases to fetch.
     */
    orderBy?: MedicalCaseOrderByWithRelationInput | MedicalCaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalCases.
     */
    cursor?: MedicalCaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalCases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalCases.
     */
    skip?: number
    distinct?: MedicalCaseScalarFieldEnum | MedicalCaseScalarFieldEnum[]
  }

  /**
   * MedicalCase create
   */
  export type MedicalCaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalCase.
     */
    data: XOR<MedicalCaseCreateInput, MedicalCaseUncheckedCreateInput>
  }

  /**
   * MedicalCase createMany
   */
  export type MedicalCaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalCases.
     */
    data: MedicalCaseCreateManyInput | MedicalCaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalCase createManyAndReturn
   */
  export type MedicalCaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalCases.
     */
    data: MedicalCaseCreateManyInput | MedicalCaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalCase update
   */
  export type MedicalCaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalCase.
     */
    data: XOR<MedicalCaseUpdateInput, MedicalCaseUncheckedUpdateInput>
    /**
     * Choose, which MedicalCase to update.
     */
    where: MedicalCaseWhereUniqueInput
  }

  /**
   * MedicalCase updateMany
   */
  export type MedicalCaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalCases.
     */
    data: XOR<MedicalCaseUpdateManyMutationInput, MedicalCaseUncheckedUpdateManyInput>
    /**
     * Filter which MedicalCases to update
     */
    where?: MedicalCaseWhereInput
    /**
     * Limit how many MedicalCases to update.
     */
    limit?: number
  }

  /**
   * MedicalCase updateManyAndReturn
   */
  export type MedicalCaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * The data used to update MedicalCases.
     */
    data: XOR<MedicalCaseUpdateManyMutationInput, MedicalCaseUncheckedUpdateManyInput>
    /**
     * Filter which MedicalCases to update
     */
    where?: MedicalCaseWhereInput
    /**
     * Limit how many MedicalCases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalCase upsert
   */
  export type MedicalCaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalCase to update in case it exists.
     */
    where: MedicalCaseWhereUniqueInput
    /**
     * In case the MedicalCase found by the `where` argument doesn't exist, create a new MedicalCase with this data.
     */
    create: XOR<MedicalCaseCreateInput, MedicalCaseUncheckedCreateInput>
    /**
     * In case the MedicalCase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalCaseUpdateInput, MedicalCaseUncheckedUpdateInput>
  }

  /**
   * MedicalCase delete
   */
  export type MedicalCaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
    /**
     * Filter which MedicalCase to delete.
     */
    where: MedicalCaseWhereUniqueInput
  }

  /**
   * MedicalCase deleteMany
   */
  export type MedicalCaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalCases to delete
     */
    where?: MedicalCaseWhereInput
    /**
     * Limit how many MedicalCases to delete.
     */
    limit?: number
  }

  /**
   * MedicalCase.uploadedFiles
   */
  export type MedicalCase$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    where?: UploadedFileWhereInput
    orderBy?: UploadedFileOrderByWithRelationInput | UploadedFileOrderByWithRelationInput[]
    cursor?: UploadedFileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UploadedFileScalarFieldEnum | UploadedFileScalarFieldEnum[]
  }

  /**
   * MedicalCase.statusHistory
   */
  export type MedicalCase$statusHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    where?: CaseStatusHistoryWhereInput
    orderBy?: CaseStatusHistoryOrderByWithRelationInput | CaseStatusHistoryOrderByWithRelationInput[]
    cursor?: CaseStatusHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseStatusHistoryScalarFieldEnum | CaseStatusHistoryScalarFieldEnum[]
  }

  /**
   * MedicalCase.caseAssignments
   */
  export type MedicalCase$caseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    where?: CaseAssignmentWhereInput
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    cursor?: CaseAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseAssignmentScalarFieldEnum | CaseAssignmentScalarFieldEnum[]
  }

  /**
   * MedicalCase.aiAnalyses
   */
  export type MedicalCase$aiAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    where?: AIAnalysisWhereInput
    orderBy?: AIAnalysisOrderByWithRelationInput | AIAnalysisOrderByWithRelationInput[]
    cursor?: AIAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIAnalysisScalarFieldEnum | AIAnalysisScalarFieldEnum[]
  }

  /**
   * MedicalCase.medicalOpinions
   */
  export type MedicalCase$medicalOpinionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    where?: MedicalOpinionWhereInput
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    cursor?: MedicalOpinionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalOpinionScalarFieldEnum | MedicalOpinionScalarFieldEnum[]
  }

  /**
   * MedicalCase.professionalPayments
   */
  export type MedicalCase$professionalPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    where?: ProfessionalPaymentWhereInput
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    cursor?: ProfessionalPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalPaymentScalarFieldEnum | ProfessionalPaymentScalarFieldEnum[]
  }

  /**
   * MedicalCase.questionnaireResponse
   */
  export type MedicalCase$questionnaireResponseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionnaireResponse
     */
    select?: QuestionnaireResponseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionnaireResponse
     */
    omit?: QuestionnaireResponseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionnaireResponseInclude<ExtArgs> | null
    where?: QuestionnaireResponseWhereInput
  }

  /**
   * MedicalCase.casePayment
   */
  export type MedicalCase$casePaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasePayment
     */
    select?: CasePaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CasePayment
     */
    omit?: CasePaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CasePaymentInclude<ExtArgs> | null
    where?: CasePaymentWhereInput
  }

  /**
   * MedicalCase without action
   */
  export type MedicalCaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalCase
     */
    select?: MedicalCaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalCase
     */
    omit?: MedicalCaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalCaseInclude<ExtArgs> | null
  }


  /**
   * Model CaseStatusHistory
   */

  export type AggregateCaseStatusHistory = {
    _count: CaseStatusHistoryCountAggregateOutputType | null
    _min: CaseStatusHistoryMinAggregateOutputType | null
    _max: CaseStatusHistoryMaxAggregateOutputType | null
  }

  export type CaseStatusHistoryMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    fromStatus: string | null
    toStatus: string | null
    reason: string | null
    notes: string | null
    changedByType: string | null
    changedById: string | null
    createdAt: Date | null
  }

  export type CaseStatusHistoryMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    fromStatus: string | null
    toStatus: string | null
    reason: string | null
    notes: string | null
    changedByType: string | null
    changedById: string | null
    createdAt: Date | null
  }

  export type CaseStatusHistoryCountAggregateOutputType = {
    id: number
    caseId: number
    fromStatus: number
    toStatus: number
    reason: number
    notes: number
    changedByType: number
    changedById: number
    createdAt: number
    _all: number
  }


  export type CaseStatusHistoryMinAggregateInputType = {
    id?: true
    caseId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    notes?: true
    changedByType?: true
    changedById?: true
    createdAt?: true
  }

  export type CaseStatusHistoryMaxAggregateInputType = {
    id?: true
    caseId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    notes?: true
    changedByType?: true
    changedById?: true
    createdAt?: true
  }

  export type CaseStatusHistoryCountAggregateInputType = {
    id?: true
    caseId?: true
    fromStatus?: true
    toStatus?: true
    reason?: true
    notes?: true
    changedByType?: true
    changedById?: true
    createdAt?: true
    _all?: true
  }

  export type CaseStatusHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseStatusHistory to aggregate.
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseStatusHistories to fetch.
     */
    orderBy?: CaseStatusHistoryOrderByWithRelationInput | CaseStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseStatusHistories
    **/
    _count?: true | CaseStatusHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseStatusHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseStatusHistoryMaxAggregateInputType
  }

  export type GetCaseStatusHistoryAggregateType<T extends CaseStatusHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseStatusHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseStatusHistory[P]>
      : GetScalarType<T[P], AggregateCaseStatusHistory[P]>
  }




  export type CaseStatusHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseStatusHistoryWhereInput
    orderBy?: CaseStatusHistoryOrderByWithAggregationInput | CaseStatusHistoryOrderByWithAggregationInput[]
    by: CaseStatusHistoryScalarFieldEnum[] | CaseStatusHistoryScalarFieldEnum
    having?: CaseStatusHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseStatusHistoryCountAggregateInputType | true
    _min?: CaseStatusHistoryMinAggregateInputType
    _max?: CaseStatusHistoryMaxAggregateInputType
  }

  export type CaseStatusHistoryGroupByOutputType = {
    id: string
    caseId: string
    fromStatus: string | null
    toStatus: string
    reason: string | null
    notes: string | null
    changedByType: string
    changedById: string
    createdAt: Date
    _count: CaseStatusHistoryCountAggregateOutputType | null
    _min: CaseStatusHistoryMinAggregateOutputType | null
    _max: CaseStatusHistoryMaxAggregateOutputType | null
  }

  type GetCaseStatusHistoryGroupByPayload<T extends CaseStatusHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseStatusHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseStatusHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseStatusHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], CaseStatusHistoryGroupByOutputType[P]>
        }
      >
    >


  export type CaseStatusHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    notes?: boolean
    changedByType?: boolean
    changedById?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseStatusHistory"]>

  export type CaseStatusHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    notes?: boolean
    changedByType?: boolean
    changedById?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseStatusHistory"]>

  export type CaseStatusHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    notes?: boolean
    changedByType?: boolean
    changedById?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseStatusHistory"]>

  export type CaseStatusHistorySelectScalar = {
    id?: boolean
    caseId?: boolean
    fromStatus?: boolean
    toStatus?: boolean
    reason?: boolean
    notes?: boolean
    changedByType?: boolean
    changedById?: boolean
    createdAt?: boolean
  }

  export type CaseStatusHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "fromStatus" | "toStatus" | "reason" | "notes" | "changedByType" | "changedById" | "createdAt", ExtArgs["result"]["caseStatusHistory"]>
  export type CaseStatusHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type CaseStatusHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type CaseStatusHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }

  export type $CaseStatusHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseStatusHistory"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      fromStatus: string | null
      toStatus: string
      reason: string | null
      notes: string | null
      changedByType: string
      changedById: string
      createdAt: Date
    }, ExtArgs["result"]["caseStatusHistory"]>
    composites: {}
  }

  type CaseStatusHistoryGetPayload<S extends boolean | null | undefined | CaseStatusHistoryDefaultArgs> = $Result.GetResult<Prisma.$CaseStatusHistoryPayload, S>

  type CaseStatusHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseStatusHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseStatusHistoryCountAggregateInputType | true
    }

  export interface CaseStatusHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseStatusHistory'], meta: { name: 'CaseStatusHistory' } }
    /**
     * Find zero or one CaseStatusHistory that matches the filter.
     * @param {CaseStatusHistoryFindUniqueArgs} args - Arguments to find a CaseStatusHistory
     * @example
     * // Get one CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseStatusHistoryFindUniqueArgs>(args: SelectSubset<T, CaseStatusHistoryFindUniqueArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseStatusHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseStatusHistoryFindUniqueOrThrowArgs} args - Arguments to find a CaseStatusHistory
     * @example
     * // Get one CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseStatusHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseStatusHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseStatusHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryFindFirstArgs} args - Arguments to find a CaseStatusHistory
     * @example
     * // Get one CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseStatusHistoryFindFirstArgs>(args?: SelectSubset<T, CaseStatusHistoryFindFirstArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseStatusHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryFindFirstOrThrowArgs} args - Arguments to find a CaseStatusHistory
     * @example
     * // Get one CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseStatusHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseStatusHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseStatusHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseStatusHistories
     * const caseStatusHistories = await prisma.caseStatusHistory.findMany()
     * 
     * // Get first 10 CaseStatusHistories
     * const caseStatusHistories = await prisma.caseStatusHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseStatusHistoryWithIdOnly = await prisma.caseStatusHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseStatusHistoryFindManyArgs>(args?: SelectSubset<T, CaseStatusHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseStatusHistory.
     * @param {CaseStatusHistoryCreateArgs} args - Arguments to create a CaseStatusHistory.
     * @example
     * // Create one CaseStatusHistory
     * const CaseStatusHistory = await prisma.caseStatusHistory.create({
     *   data: {
     *     // ... data to create a CaseStatusHistory
     *   }
     * })
     * 
     */
    create<T extends CaseStatusHistoryCreateArgs>(args: SelectSubset<T, CaseStatusHistoryCreateArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseStatusHistories.
     * @param {CaseStatusHistoryCreateManyArgs} args - Arguments to create many CaseStatusHistories.
     * @example
     * // Create many CaseStatusHistories
     * const caseStatusHistory = await prisma.caseStatusHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseStatusHistoryCreateManyArgs>(args?: SelectSubset<T, CaseStatusHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseStatusHistories and returns the data saved in the database.
     * @param {CaseStatusHistoryCreateManyAndReturnArgs} args - Arguments to create many CaseStatusHistories.
     * @example
     * // Create many CaseStatusHistories
     * const caseStatusHistory = await prisma.caseStatusHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseStatusHistories and only return the `id`
     * const caseStatusHistoryWithIdOnly = await prisma.caseStatusHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseStatusHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseStatusHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseStatusHistory.
     * @param {CaseStatusHistoryDeleteArgs} args - Arguments to delete one CaseStatusHistory.
     * @example
     * // Delete one CaseStatusHistory
     * const CaseStatusHistory = await prisma.caseStatusHistory.delete({
     *   where: {
     *     // ... filter to delete one CaseStatusHistory
     *   }
     * })
     * 
     */
    delete<T extends CaseStatusHistoryDeleteArgs>(args: SelectSubset<T, CaseStatusHistoryDeleteArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseStatusHistory.
     * @param {CaseStatusHistoryUpdateArgs} args - Arguments to update one CaseStatusHistory.
     * @example
     * // Update one CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseStatusHistoryUpdateArgs>(args: SelectSubset<T, CaseStatusHistoryUpdateArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseStatusHistories.
     * @param {CaseStatusHistoryDeleteManyArgs} args - Arguments to filter CaseStatusHistories to delete.
     * @example
     * // Delete a few CaseStatusHistories
     * const { count } = await prisma.caseStatusHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseStatusHistoryDeleteManyArgs>(args?: SelectSubset<T, CaseStatusHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseStatusHistories
     * const caseStatusHistory = await prisma.caseStatusHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseStatusHistoryUpdateManyArgs>(args: SelectSubset<T, CaseStatusHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseStatusHistories and returns the data updated in the database.
     * @param {CaseStatusHistoryUpdateManyAndReturnArgs} args - Arguments to update many CaseStatusHistories.
     * @example
     * // Update many CaseStatusHistories
     * const caseStatusHistory = await prisma.caseStatusHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseStatusHistories and only return the `id`
     * const caseStatusHistoryWithIdOnly = await prisma.caseStatusHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseStatusHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseStatusHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseStatusHistory.
     * @param {CaseStatusHistoryUpsertArgs} args - Arguments to update or create a CaseStatusHistory.
     * @example
     * // Update or create a CaseStatusHistory
     * const caseStatusHistory = await prisma.caseStatusHistory.upsert({
     *   create: {
     *     // ... data to create a CaseStatusHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseStatusHistory we want to update
     *   }
     * })
     */
    upsert<T extends CaseStatusHistoryUpsertArgs>(args: SelectSubset<T, CaseStatusHistoryUpsertArgs<ExtArgs>>): Prisma__CaseStatusHistoryClient<$Result.GetResult<Prisma.$CaseStatusHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseStatusHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryCountArgs} args - Arguments to filter CaseStatusHistories to count.
     * @example
     * // Count the number of CaseStatusHistories
     * const count = await prisma.caseStatusHistory.count({
     *   where: {
     *     // ... the filter for the CaseStatusHistories we want to count
     *   }
     * })
    **/
    count<T extends CaseStatusHistoryCountArgs>(
      args?: Subset<T, CaseStatusHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseStatusHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseStatusHistoryAggregateArgs>(args: Subset<T, CaseStatusHistoryAggregateArgs>): Prisma.PrismaPromise<GetCaseStatusHistoryAggregateType<T>>

    /**
     * Group by CaseStatusHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseStatusHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseStatusHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseStatusHistoryGroupByArgs['orderBy'] }
        : { orderBy?: CaseStatusHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseStatusHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseStatusHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseStatusHistory model
   */
  readonly fields: CaseStatusHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseStatusHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseStatusHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseStatusHistory model
   */
  interface CaseStatusHistoryFieldRefs {
    readonly id: FieldRef<"CaseStatusHistory", 'String'>
    readonly caseId: FieldRef<"CaseStatusHistory", 'String'>
    readonly fromStatus: FieldRef<"CaseStatusHistory", 'String'>
    readonly toStatus: FieldRef<"CaseStatusHistory", 'String'>
    readonly reason: FieldRef<"CaseStatusHistory", 'String'>
    readonly notes: FieldRef<"CaseStatusHistory", 'String'>
    readonly changedByType: FieldRef<"CaseStatusHistory", 'String'>
    readonly changedById: FieldRef<"CaseStatusHistory", 'String'>
    readonly createdAt: FieldRef<"CaseStatusHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CaseStatusHistory findUnique
   */
  export type CaseStatusHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CaseStatusHistory to fetch.
     */
    where: CaseStatusHistoryWhereUniqueInput
  }

  /**
   * CaseStatusHistory findUniqueOrThrow
   */
  export type CaseStatusHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CaseStatusHistory to fetch.
     */
    where: CaseStatusHistoryWhereUniqueInput
  }

  /**
   * CaseStatusHistory findFirst
   */
  export type CaseStatusHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CaseStatusHistory to fetch.
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseStatusHistories to fetch.
     */
    orderBy?: CaseStatusHistoryOrderByWithRelationInput | CaseStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseStatusHistories.
     */
    cursor?: CaseStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseStatusHistories.
     */
    distinct?: CaseStatusHistoryScalarFieldEnum | CaseStatusHistoryScalarFieldEnum[]
  }

  /**
   * CaseStatusHistory findFirstOrThrow
   */
  export type CaseStatusHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CaseStatusHistory to fetch.
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseStatusHistories to fetch.
     */
    orderBy?: CaseStatusHistoryOrderByWithRelationInput | CaseStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseStatusHistories.
     */
    cursor?: CaseStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseStatusHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseStatusHistories.
     */
    distinct?: CaseStatusHistoryScalarFieldEnum | CaseStatusHistoryScalarFieldEnum[]
  }

  /**
   * CaseStatusHistory findMany
   */
  export type CaseStatusHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter, which CaseStatusHistories to fetch.
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseStatusHistories to fetch.
     */
    orderBy?: CaseStatusHistoryOrderByWithRelationInput | CaseStatusHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseStatusHistories.
     */
    cursor?: CaseStatusHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseStatusHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseStatusHistories.
     */
    skip?: number
    distinct?: CaseStatusHistoryScalarFieldEnum | CaseStatusHistoryScalarFieldEnum[]
  }

  /**
   * CaseStatusHistory create
   */
  export type CaseStatusHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseStatusHistory.
     */
    data: XOR<CaseStatusHistoryCreateInput, CaseStatusHistoryUncheckedCreateInput>
  }

  /**
   * CaseStatusHistory createMany
   */
  export type CaseStatusHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseStatusHistories.
     */
    data: CaseStatusHistoryCreateManyInput | CaseStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseStatusHistory createManyAndReturn
   */
  export type CaseStatusHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many CaseStatusHistories.
     */
    data: CaseStatusHistoryCreateManyInput | CaseStatusHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseStatusHistory update
   */
  export type CaseStatusHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseStatusHistory.
     */
    data: XOR<CaseStatusHistoryUpdateInput, CaseStatusHistoryUncheckedUpdateInput>
    /**
     * Choose, which CaseStatusHistory to update.
     */
    where: CaseStatusHistoryWhereUniqueInput
  }

  /**
   * CaseStatusHistory updateMany
   */
  export type CaseStatusHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseStatusHistories.
     */
    data: XOR<CaseStatusHistoryUpdateManyMutationInput, CaseStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CaseStatusHistories to update
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * Limit how many CaseStatusHistories to update.
     */
    limit?: number
  }

  /**
   * CaseStatusHistory updateManyAndReturn
   */
  export type CaseStatusHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * The data used to update CaseStatusHistories.
     */
    data: XOR<CaseStatusHistoryUpdateManyMutationInput, CaseStatusHistoryUncheckedUpdateManyInput>
    /**
     * Filter which CaseStatusHistories to update
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * Limit how many CaseStatusHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseStatusHistory upsert
   */
  export type CaseStatusHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseStatusHistory to update in case it exists.
     */
    where: CaseStatusHistoryWhereUniqueInput
    /**
     * In case the CaseStatusHistory found by the `where` argument doesn't exist, create a new CaseStatusHistory with this data.
     */
    create: XOR<CaseStatusHistoryCreateInput, CaseStatusHistoryUncheckedCreateInput>
    /**
     * In case the CaseStatusHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseStatusHistoryUpdateInput, CaseStatusHistoryUncheckedUpdateInput>
  }

  /**
   * CaseStatusHistory delete
   */
  export type CaseStatusHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
    /**
     * Filter which CaseStatusHistory to delete.
     */
    where: CaseStatusHistoryWhereUniqueInput
  }

  /**
   * CaseStatusHistory deleteMany
   */
  export type CaseStatusHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseStatusHistories to delete
     */
    where?: CaseStatusHistoryWhereInput
    /**
     * Limit how many CaseStatusHistories to delete.
     */
    limit?: number
  }

  /**
   * CaseStatusHistory without action
   */
  export type CaseStatusHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseStatusHistory
     */
    select?: CaseStatusHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseStatusHistory
     */
    omit?: CaseStatusHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseStatusHistoryInclude<ExtArgs> | null
  }


  /**
   * Model UploadedFile
   */

  export type AggregateUploadedFile = {
    _count: UploadedFileCountAggregateOutputType | null
    _avg: UploadedFileAvgAggregateOutputType | null
    _sum: UploadedFileSumAggregateOutputType | null
    _min: UploadedFileMinAggregateOutputType | null
    _max: UploadedFileMaxAggregateOutputType | null
  }

  export type UploadedFileAvgAggregateOutputType = {
    size: number | null
  }

  export type UploadedFileSumAggregateOutputType = {
    size: number | null
  }

  export type UploadedFileMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    filename: string | null
    s3Key: string | null
    mimetype: string | null
    size: number | null
    category: string | null
    checksum: string | null
    encrypted: boolean | null
    createdAt: Date | null
  }

  export type UploadedFileMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    filename: string | null
    s3Key: string | null
    mimetype: string | null
    size: number | null
    category: string | null
    checksum: string | null
    encrypted: boolean | null
    createdAt: Date | null
  }

  export type UploadedFileCountAggregateOutputType = {
    id: number
    caseId: number
    filename: number
    s3Key: number
    mimetype: number
    size: number
    category: number
    metadata: number
    checksum: number
    encrypted: number
    createdAt: number
    _all: number
  }


  export type UploadedFileAvgAggregateInputType = {
    size?: true
  }

  export type UploadedFileSumAggregateInputType = {
    size?: true
  }

  export type UploadedFileMinAggregateInputType = {
    id?: true
    caseId?: true
    filename?: true
    s3Key?: true
    mimetype?: true
    size?: true
    category?: true
    checksum?: true
    encrypted?: true
    createdAt?: true
  }

  export type UploadedFileMaxAggregateInputType = {
    id?: true
    caseId?: true
    filename?: true
    s3Key?: true
    mimetype?: true
    size?: true
    category?: true
    checksum?: true
    encrypted?: true
    createdAt?: true
  }

  export type UploadedFileCountAggregateInputType = {
    id?: true
    caseId?: true
    filename?: true
    s3Key?: true
    mimetype?: true
    size?: true
    category?: true
    metadata?: true
    checksum?: true
    encrypted?: true
    createdAt?: true
    _all?: true
  }

  export type UploadedFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadedFile to aggregate.
     */
    where?: UploadedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadedFiles to fetch.
     */
    orderBy?: UploadedFileOrderByWithRelationInput | UploadedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UploadedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UploadedFiles
    **/
    _count?: true | UploadedFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UploadedFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UploadedFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UploadedFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UploadedFileMaxAggregateInputType
  }

  export type GetUploadedFileAggregateType<T extends UploadedFileAggregateArgs> = {
        [P in keyof T & keyof AggregateUploadedFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUploadedFile[P]>
      : GetScalarType<T[P], AggregateUploadedFile[P]>
  }




  export type UploadedFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UploadedFileWhereInput
    orderBy?: UploadedFileOrderByWithAggregationInput | UploadedFileOrderByWithAggregationInput[]
    by: UploadedFileScalarFieldEnum[] | UploadedFileScalarFieldEnum
    having?: UploadedFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UploadedFileCountAggregateInputType | true
    _avg?: UploadedFileAvgAggregateInputType
    _sum?: UploadedFileSumAggregateInputType
    _min?: UploadedFileMinAggregateInputType
    _max?: UploadedFileMaxAggregateInputType
  }

  export type UploadedFileGroupByOutputType = {
    id: string
    caseId: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata: JsonValue | null
    checksum: string | null
    encrypted: boolean
    createdAt: Date
    _count: UploadedFileCountAggregateOutputType | null
    _avg: UploadedFileAvgAggregateOutputType | null
    _sum: UploadedFileSumAggregateOutputType | null
    _min: UploadedFileMinAggregateOutputType | null
    _max: UploadedFileMaxAggregateOutputType | null
  }

  type GetUploadedFileGroupByPayload<T extends UploadedFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UploadedFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UploadedFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UploadedFileGroupByOutputType[P]>
            : GetScalarType<T[P], UploadedFileGroupByOutputType[P]>
        }
      >
    >


  export type UploadedFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    filename?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    metadata?: boolean
    checksum?: boolean
    encrypted?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uploadedFile"]>

  export type UploadedFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    filename?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    metadata?: boolean
    checksum?: boolean
    encrypted?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uploadedFile"]>

  export type UploadedFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    filename?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    metadata?: boolean
    checksum?: boolean
    encrypted?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uploadedFile"]>

  export type UploadedFileSelectScalar = {
    id?: boolean
    caseId?: boolean
    filename?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    category?: boolean
    metadata?: boolean
    checksum?: boolean
    encrypted?: boolean
    createdAt?: boolean
  }

  export type UploadedFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "filename" | "s3Key" | "mimetype" | "size" | "category" | "metadata" | "checksum" | "encrypted" | "createdAt", ExtArgs["result"]["uploadedFile"]>
  export type UploadedFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type UploadedFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type UploadedFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }

  export type $UploadedFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UploadedFile"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      filename: string
      s3Key: string
      mimetype: string
      size: number
      category: string
      metadata: Prisma.JsonValue | null
      checksum: string | null
      encrypted: boolean
      createdAt: Date
    }, ExtArgs["result"]["uploadedFile"]>
    composites: {}
  }

  type UploadedFileGetPayload<S extends boolean | null | undefined | UploadedFileDefaultArgs> = $Result.GetResult<Prisma.$UploadedFilePayload, S>

  type UploadedFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UploadedFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UploadedFileCountAggregateInputType | true
    }

  export interface UploadedFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UploadedFile'], meta: { name: 'UploadedFile' } }
    /**
     * Find zero or one UploadedFile that matches the filter.
     * @param {UploadedFileFindUniqueArgs} args - Arguments to find a UploadedFile
     * @example
     * // Get one UploadedFile
     * const uploadedFile = await prisma.uploadedFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UploadedFileFindUniqueArgs>(args: SelectSubset<T, UploadedFileFindUniqueArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UploadedFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UploadedFileFindUniqueOrThrowArgs} args - Arguments to find a UploadedFile
     * @example
     * // Get one UploadedFile
     * const uploadedFile = await prisma.uploadedFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UploadedFileFindUniqueOrThrowArgs>(args: SelectSubset<T, UploadedFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UploadedFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileFindFirstArgs} args - Arguments to find a UploadedFile
     * @example
     * // Get one UploadedFile
     * const uploadedFile = await prisma.uploadedFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UploadedFileFindFirstArgs>(args?: SelectSubset<T, UploadedFileFindFirstArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UploadedFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileFindFirstOrThrowArgs} args - Arguments to find a UploadedFile
     * @example
     * // Get one UploadedFile
     * const uploadedFile = await prisma.uploadedFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UploadedFileFindFirstOrThrowArgs>(args?: SelectSubset<T, UploadedFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UploadedFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UploadedFiles
     * const uploadedFiles = await prisma.uploadedFile.findMany()
     * 
     * // Get first 10 UploadedFiles
     * const uploadedFiles = await prisma.uploadedFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const uploadedFileWithIdOnly = await prisma.uploadedFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UploadedFileFindManyArgs>(args?: SelectSubset<T, UploadedFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UploadedFile.
     * @param {UploadedFileCreateArgs} args - Arguments to create a UploadedFile.
     * @example
     * // Create one UploadedFile
     * const UploadedFile = await prisma.uploadedFile.create({
     *   data: {
     *     // ... data to create a UploadedFile
     *   }
     * })
     * 
     */
    create<T extends UploadedFileCreateArgs>(args: SelectSubset<T, UploadedFileCreateArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UploadedFiles.
     * @param {UploadedFileCreateManyArgs} args - Arguments to create many UploadedFiles.
     * @example
     * // Create many UploadedFiles
     * const uploadedFile = await prisma.uploadedFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UploadedFileCreateManyArgs>(args?: SelectSubset<T, UploadedFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UploadedFiles and returns the data saved in the database.
     * @param {UploadedFileCreateManyAndReturnArgs} args - Arguments to create many UploadedFiles.
     * @example
     * // Create many UploadedFiles
     * const uploadedFile = await prisma.uploadedFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UploadedFiles and only return the `id`
     * const uploadedFileWithIdOnly = await prisma.uploadedFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UploadedFileCreateManyAndReturnArgs>(args?: SelectSubset<T, UploadedFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UploadedFile.
     * @param {UploadedFileDeleteArgs} args - Arguments to delete one UploadedFile.
     * @example
     * // Delete one UploadedFile
     * const UploadedFile = await prisma.uploadedFile.delete({
     *   where: {
     *     // ... filter to delete one UploadedFile
     *   }
     * })
     * 
     */
    delete<T extends UploadedFileDeleteArgs>(args: SelectSubset<T, UploadedFileDeleteArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UploadedFile.
     * @param {UploadedFileUpdateArgs} args - Arguments to update one UploadedFile.
     * @example
     * // Update one UploadedFile
     * const uploadedFile = await prisma.uploadedFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UploadedFileUpdateArgs>(args: SelectSubset<T, UploadedFileUpdateArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UploadedFiles.
     * @param {UploadedFileDeleteManyArgs} args - Arguments to filter UploadedFiles to delete.
     * @example
     * // Delete a few UploadedFiles
     * const { count } = await prisma.uploadedFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UploadedFileDeleteManyArgs>(args?: SelectSubset<T, UploadedFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UploadedFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UploadedFiles
     * const uploadedFile = await prisma.uploadedFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UploadedFileUpdateManyArgs>(args: SelectSubset<T, UploadedFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UploadedFiles and returns the data updated in the database.
     * @param {UploadedFileUpdateManyAndReturnArgs} args - Arguments to update many UploadedFiles.
     * @example
     * // Update many UploadedFiles
     * const uploadedFile = await prisma.uploadedFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UploadedFiles and only return the `id`
     * const uploadedFileWithIdOnly = await prisma.uploadedFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UploadedFileUpdateManyAndReturnArgs>(args: SelectSubset<T, UploadedFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UploadedFile.
     * @param {UploadedFileUpsertArgs} args - Arguments to update or create a UploadedFile.
     * @example
     * // Update or create a UploadedFile
     * const uploadedFile = await prisma.uploadedFile.upsert({
     *   create: {
     *     // ... data to create a UploadedFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UploadedFile we want to update
     *   }
     * })
     */
    upsert<T extends UploadedFileUpsertArgs>(args: SelectSubset<T, UploadedFileUpsertArgs<ExtArgs>>): Prisma__UploadedFileClient<$Result.GetResult<Prisma.$UploadedFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UploadedFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileCountArgs} args - Arguments to filter UploadedFiles to count.
     * @example
     * // Count the number of UploadedFiles
     * const count = await prisma.uploadedFile.count({
     *   where: {
     *     // ... the filter for the UploadedFiles we want to count
     *   }
     * })
    **/
    count<T extends UploadedFileCountArgs>(
      args?: Subset<T, UploadedFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UploadedFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UploadedFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UploadedFileAggregateArgs>(args: Subset<T, UploadedFileAggregateArgs>): Prisma.PrismaPromise<GetUploadedFileAggregateType<T>>

    /**
     * Group by UploadedFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadedFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UploadedFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UploadedFileGroupByArgs['orderBy'] }
        : { orderBy?: UploadedFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UploadedFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUploadedFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UploadedFile model
   */
  readonly fields: UploadedFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UploadedFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UploadedFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UploadedFile model
   */
  interface UploadedFileFieldRefs {
    readonly id: FieldRef<"UploadedFile", 'String'>
    readonly caseId: FieldRef<"UploadedFile", 'String'>
    readonly filename: FieldRef<"UploadedFile", 'String'>
    readonly s3Key: FieldRef<"UploadedFile", 'String'>
    readonly mimetype: FieldRef<"UploadedFile", 'String'>
    readonly size: FieldRef<"UploadedFile", 'Int'>
    readonly category: FieldRef<"UploadedFile", 'String'>
    readonly metadata: FieldRef<"UploadedFile", 'Json'>
    readonly checksum: FieldRef<"UploadedFile", 'String'>
    readonly encrypted: FieldRef<"UploadedFile", 'Boolean'>
    readonly createdAt: FieldRef<"UploadedFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UploadedFile findUnique
   */
  export type UploadedFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter, which UploadedFile to fetch.
     */
    where: UploadedFileWhereUniqueInput
  }

  /**
   * UploadedFile findUniqueOrThrow
   */
  export type UploadedFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter, which UploadedFile to fetch.
     */
    where: UploadedFileWhereUniqueInput
  }

  /**
   * UploadedFile findFirst
   */
  export type UploadedFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter, which UploadedFile to fetch.
     */
    where?: UploadedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadedFiles to fetch.
     */
    orderBy?: UploadedFileOrderByWithRelationInput | UploadedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadedFiles.
     */
    cursor?: UploadedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadedFiles.
     */
    distinct?: UploadedFileScalarFieldEnum | UploadedFileScalarFieldEnum[]
  }

  /**
   * UploadedFile findFirstOrThrow
   */
  export type UploadedFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter, which UploadedFile to fetch.
     */
    where?: UploadedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadedFiles to fetch.
     */
    orderBy?: UploadedFileOrderByWithRelationInput | UploadedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadedFiles.
     */
    cursor?: UploadedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadedFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadedFiles.
     */
    distinct?: UploadedFileScalarFieldEnum | UploadedFileScalarFieldEnum[]
  }

  /**
   * UploadedFile findMany
   */
  export type UploadedFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter, which UploadedFiles to fetch.
     */
    where?: UploadedFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadedFiles to fetch.
     */
    orderBy?: UploadedFileOrderByWithRelationInput | UploadedFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UploadedFiles.
     */
    cursor?: UploadedFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadedFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadedFiles.
     */
    skip?: number
    distinct?: UploadedFileScalarFieldEnum | UploadedFileScalarFieldEnum[]
  }

  /**
   * UploadedFile create
   */
  export type UploadedFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * The data needed to create a UploadedFile.
     */
    data: XOR<UploadedFileCreateInput, UploadedFileUncheckedCreateInput>
  }

  /**
   * UploadedFile createMany
   */
  export type UploadedFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UploadedFiles.
     */
    data: UploadedFileCreateManyInput | UploadedFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UploadedFile createManyAndReturn
   */
  export type UploadedFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * The data used to create many UploadedFiles.
     */
    data: UploadedFileCreateManyInput | UploadedFileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UploadedFile update
   */
  export type UploadedFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * The data needed to update a UploadedFile.
     */
    data: XOR<UploadedFileUpdateInput, UploadedFileUncheckedUpdateInput>
    /**
     * Choose, which UploadedFile to update.
     */
    where: UploadedFileWhereUniqueInput
  }

  /**
   * UploadedFile updateMany
   */
  export type UploadedFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UploadedFiles.
     */
    data: XOR<UploadedFileUpdateManyMutationInput, UploadedFileUncheckedUpdateManyInput>
    /**
     * Filter which UploadedFiles to update
     */
    where?: UploadedFileWhereInput
    /**
     * Limit how many UploadedFiles to update.
     */
    limit?: number
  }

  /**
   * UploadedFile updateManyAndReturn
   */
  export type UploadedFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * The data used to update UploadedFiles.
     */
    data: XOR<UploadedFileUpdateManyMutationInput, UploadedFileUncheckedUpdateManyInput>
    /**
     * Filter which UploadedFiles to update
     */
    where?: UploadedFileWhereInput
    /**
     * Limit how many UploadedFiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UploadedFile upsert
   */
  export type UploadedFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * The filter to search for the UploadedFile to update in case it exists.
     */
    where: UploadedFileWhereUniqueInput
    /**
     * In case the UploadedFile found by the `where` argument doesn't exist, create a new UploadedFile with this data.
     */
    create: XOR<UploadedFileCreateInput, UploadedFileUncheckedCreateInput>
    /**
     * In case the UploadedFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UploadedFileUpdateInput, UploadedFileUncheckedUpdateInput>
  }

  /**
   * UploadedFile delete
   */
  export type UploadedFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
    /**
     * Filter which UploadedFile to delete.
     */
    where: UploadedFileWhereUniqueInput
  }

  /**
   * UploadedFile deleteMany
   */
  export type UploadedFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadedFiles to delete
     */
    where?: UploadedFileWhereInput
    /**
     * Limit how many UploadedFiles to delete.
     */
    limit?: number
  }

  /**
   * UploadedFile without action
   */
  export type UploadedFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadedFile
     */
    select?: UploadedFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadedFile
     */
    omit?: UploadedFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UploadedFileInclude<ExtArgs> | null
  }


  /**
   * Model MedicalProfessional
   */

  export type AggregateMedicalProfessional = {
    _count: MedicalProfessionalCountAggregateOutputType | null
    _avg: MedicalProfessionalAvgAggregateOutputType | null
    _sum: MedicalProfessionalSumAggregateOutputType | null
    _min: MedicalProfessionalMinAggregateOutputType | null
    _max: MedicalProfessionalMaxAggregateOutputType | null
  }

  export type MedicalProfessionalAvgAggregateOutputType = {
    yearsPractice: number | null
    publications: number | null
    score: number | null
    billingRate: number | null
  }

  export type MedicalProfessionalSumAggregateOutputType = {
    yearsPractice: number | null
    publications: number | null
    score: number | null
    billingRate: number | null
  }

  export type MedicalProfessionalMinAggregateOutputType = {
    id: string | null
    proNumber: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dob: Date | null
    email: string | null
    phone: string | null
    nationality: string | null
    licenseNumber: string | null
    licenseCountry: string | null
    licenseExpiry: Date | null
    vetted: boolean | null
    level: $Enums.ProLevel | null
    cvUrl: string | null
    yearsPractice: number | null
    publications: number | null
    trialInvolved: boolean | null
    leadership: string | null
    score: number | null
    hashedPassword: string | null
    twoFactorMethod: $Enums.TwoFactorMethod | null
    twoFactorSecret: string | null
    profileLastUpdated: Date | null
    codeOfConductAcknowledged: Date | null
    address: string | null
    billingAddress: string | null
    vatNumber: string | null
    billingRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalProfessionalMaxAggregateOutputType = {
    id: string | null
    proNumber: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dob: Date | null
    email: string | null
    phone: string | null
    nationality: string | null
    licenseNumber: string | null
    licenseCountry: string | null
    licenseExpiry: Date | null
    vetted: boolean | null
    level: $Enums.ProLevel | null
    cvUrl: string | null
    yearsPractice: number | null
    publications: number | null
    trialInvolved: boolean | null
    leadership: string | null
    score: number | null
    hashedPassword: string | null
    twoFactorMethod: $Enums.TwoFactorMethod | null
    twoFactorSecret: string | null
    profileLastUpdated: Date | null
    codeOfConductAcknowledged: Date | null
    address: string | null
    billingAddress: string | null
    vatNumber: string | null
    billingRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalProfessionalCountAggregateOutputType = {
    id: number
    proNumber: number
    firstName: number
    middleName: number
    lastName: number
    dob: number
    email: number
    phone: number
    nationality: number
    licenseNumber: number
    licenseCountry: number
    licenseExpiry: number
    vetted: number
    level: number
    cvUrl: number
    documents: number
    subspecialties: number
    yearsPractice: number
    publications: number
    trialInvolved: number
    leadership: number
    societyMemberships: number
    competencyData: number
    availability: number
    score: number
    hashedPassword: number
    twoFactorMethod: number
    twoFactorSecret: number
    profileLastUpdated: number
    codeOfConductAcknowledged: number
    address: number
    billingAddress: number
    bankDetails: number
    vatNumber: number
    billingRate: number
    performanceMetrics: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalProfessionalAvgAggregateInputType = {
    yearsPractice?: true
    publications?: true
    score?: true
    billingRate?: true
  }

  export type MedicalProfessionalSumAggregateInputType = {
    yearsPractice?: true
    publications?: true
    score?: true
    billingRate?: true
  }

  export type MedicalProfessionalMinAggregateInputType = {
    id?: true
    proNumber?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dob?: true
    email?: true
    phone?: true
    nationality?: true
    licenseNumber?: true
    licenseCountry?: true
    licenseExpiry?: true
    vetted?: true
    level?: true
    cvUrl?: true
    yearsPractice?: true
    publications?: true
    trialInvolved?: true
    leadership?: true
    score?: true
    hashedPassword?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    profileLastUpdated?: true
    codeOfConductAcknowledged?: true
    address?: true
    billingAddress?: true
    vatNumber?: true
    billingRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalProfessionalMaxAggregateInputType = {
    id?: true
    proNumber?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dob?: true
    email?: true
    phone?: true
    nationality?: true
    licenseNumber?: true
    licenseCountry?: true
    licenseExpiry?: true
    vetted?: true
    level?: true
    cvUrl?: true
    yearsPractice?: true
    publications?: true
    trialInvolved?: true
    leadership?: true
    score?: true
    hashedPassword?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    profileLastUpdated?: true
    codeOfConductAcknowledged?: true
    address?: true
    billingAddress?: true
    vatNumber?: true
    billingRate?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalProfessionalCountAggregateInputType = {
    id?: true
    proNumber?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dob?: true
    email?: true
    phone?: true
    nationality?: true
    licenseNumber?: true
    licenseCountry?: true
    licenseExpiry?: true
    vetted?: true
    level?: true
    cvUrl?: true
    documents?: true
    subspecialties?: true
    yearsPractice?: true
    publications?: true
    trialInvolved?: true
    leadership?: true
    societyMemberships?: true
    competencyData?: true
    availability?: true
    score?: true
    hashedPassword?: true
    twoFactorMethod?: true
    twoFactorSecret?: true
    profileLastUpdated?: true
    codeOfConductAcknowledged?: true
    address?: true
    billingAddress?: true
    bankDetails?: true
    vatNumber?: true
    billingRate?: true
    performanceMetrics?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalProfessionalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalProfessional to aggregate.
     */
    where?: MedicalProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalProfessionals to fetch.
     */
    orderBy?: MedicalProfessionalOrderByWithRelationInput | MedicalProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalProfessionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalProfessionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalProfessionals
    **/
    _count?: true | MedicalProfessionalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalProfessionalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalProfessionalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalProfessionalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalProfessionalMaxAggregateInputType
  }

  export type GetMedicalProfessionalAggregateType<T extends MedicalProfessionalAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalProfessional]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalProfessional[P]>
      : GetScalarType<T[P], AggregateMedicalProfessional[P]>
  }




  export type MedicalProfessionalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalProfessionalWhereInput
    orderBy?: MedicalProfessionalOrderByWithAggregationInput | MedicalProfessionalOrderByWithAggregationInput[]
    by: MedicalProfessionalScalarFieldEnum[] | MedicalProfessionalScalarFieldEnum
    having?: MedicalProfessionalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalProfessionalCountAggregateInputType | true
    _avg?: MedicalProfessionalAvgAggregateInputType
    _sum?: MedicalProfessionalSumAggregateInputType
    _min?: MedicalProfessionalMinAggregateInputType
    _max?: MedicalProfessionalMaxAggregateInputType
  }

  export type MedicalProfessionalGroupByOutputType = {
    id: string
    proNumber: string
    firstName: string
    middleName: string | null
    lastName: string
    dob: Date
    email: string
    phone: string | null
    nationality: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date
    vetted: boolean
    level: $Enums.ProLevel
    cvUrl: string | null
    documents: JsonValue | null
    subspecialties: JsonValue | null
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership: string | null
    societyMemberships: JsonValue | null
    competencyData: JsonValue | null
    availability: JsonValue | null
    score: number | null
    hashedPassword: string | null
    twoFactorMethod: $Enums.TwoFactorMethod
    twoFactorSecret: string | null
    profileLastUpdated: Date | null
    codeOfConductAcknowledged: Date | null
    address: string | null
    billingAddress: string | null
    bankDetails: JsonValue | null
    vatNumber: string | null
    billingRate: number | null
    performanceMetrics: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: MedicalProfessionalCountAggregateOutputType | null
    _avg: MedicalProfessionalAvgAggregateOutputType | null
    _sum: MedicalProfessionalSumAggregateOutputType | null
    _min: MedicalProfessionalMinAggregateOutputType | null
    _max: MedicalProfessionalMaxAggregateOutputType | null
  }

  type GetMedicalProfessionalGroupByPayload<T extends MedicalProfessionalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalProfessionalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalProfessionalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalProfessionalGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalProfessionalGroupByOutputType[P]>
        }
      >
    >


  export type MedicalProfessionalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proNumber?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nationality?: boolean
    licenseNumber?: boolean
    licenseCountry?: boolean
    licenseExpiry?: boolean
    vetted?: boolean
    level?: boolean
    cvUrl?: boolean
    documents?: boolean
    subspecialties?: boolean
    yearsPractice?: boolean
    publications?: boolean
    trialInvolved?: boolean
    leadership?: boolean
    societyMemberships?: boolean
    competencyData?: boolean
    availability?: boolean
    score?: boolean
    hashedPassword?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    profileLastUpdated?: boolean
    codeOfConductAcknowledged?: boolean
    address?: boolean
    billingAddress?: boolean
    bankDetails?: boolean
    vatNumber?: boolean
    billingRate?: boolean
    performanceMetrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    caseAssignments?: boolean | MedicalProfessional$caseAssignmentsArgs<ExtArgs>
    medicalOpinions?: boolean | MedicalProfessional$medicalOpinionsArgs<ExtArgs>
    professionalPayments?: boolean | MedicalProfessional$professionalPaymentsArgs<ExtArgs>
    professionalSessions?: boolean | MedicalProfessional$professionalSessionsArgs<ExtArgs>
    _count?: boolean | MedicalProfessionalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalProfessional"]>

  export type MedicalProfessionalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proNumber?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nationality?: boolean
    licenseNumber?: boolean
    licenseCountry?: boolean
    licenseExpiry?: boolean
    vetted?: boolean
    level?: boolean
    cvUrl?: boolean
    documents?: boolean
    subspecialties?: boolean
    yearsPractice?: boolean
    publications?: boolean
    trialInvolved?: boolean
    leadership?: boolean
    societyMemberships?: boolean
    competencyData?: boolean
    availability?: boolean
    score?: boolean
    hashedPassword?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    profileLastUpdated?: boolean
    codeOfConductAcknowledged?: boolean
    address?: boolean
    billingAddress?: boolean
    bankDetails?: boolean
    vatNumber?: boolean
    billingRate?: boolean
    performanceMetrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["medicalProfessional"]>

  export type MedicalProfessionalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proNumber?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nationality?: boolean
    licenseNumber?: boolean
    licenseCountry?: boolean
    licenseExpiry?: boolean
    vetted?: boolean
    level?: boolean
    cvUrl?: boolean
    documents?: boolean
    subspecialties?: boolean
    yearsPractice?: boolean
    publications?: boolean
    trialInvolved?: boolean
    leadership?: boolean
    societyMemberships?: boolean
    competencyData?: boolean
    availability?: boolean
    score?: boolean
    hashedPassword?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    profileLastUpdated?: boolean
    codeOfConductAcknowledged?: boolean
    address?: boolean
    billingAddress?: boolean
    bankDetails?: boolean
    vatNumber?: boolean
    billingRate?: boolean
    performanceMetrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["medicalProfessional"]>

  export type MedicalProfessionalSelectScalar = {
    id?: boolean
    proNumber?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dob?: boolean
    email?: boolean
    phone?: boolean
    nationality?: boolean
    licenseNumber?: boolean
    licenseCountry?: boolean
    licenseExpiry?: boolean
    vetted?: boolean
    level?: boolean
    cvUrl?: boolean
    documents?: boolean
    subspecialties?: boolean
    yearsPractice?: boolean
    publications?: boolean
    trialInvolved?: boolean
    leadership?: boolean
    societyMemberships?: boolean
    competencyData?: boolean
    availability?: boolean
    score?: boolean
    hashedPassword?: boolean
    twoFactorMethod?: boolean
    twoFactorSecret?: boolean
    profileLastUpdated?: boolean
    codeOfConductAcknowledged?: boolean
    address?: boolean
    billingAddress?: boolean
    bankDetails?: boolean
    vatNumber?: boolean
    billingRate?: boolean
    performanceMetrics?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalProfessionalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "proNumber" | "firstName" | "middleName" | "lastName" | "dob" | "email" | "phone" | "nationality" | "licenseNumber" | "licenseCountry" | "licenseExpiry" | "vetted" | "level" | "cvUrl" | "documents" | "subspecialties" | "yearsPractice" | "publications" | "trialInvolved" | "leadership" | "societyMemberships" | "competencyData" | "availability" | "score" | "hashedPassword" | "twoFactorMethod" | "twoFactorSecret" | "profileLastUpdated" | "codeOfConductAcknowledged" | "address" | "billingAddress" | "bankDetails" | "vatNumber" | "billingRate" | "performanceMetrics" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalProfessional"]>
  export type MedicalProfessionalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    caseAssignments?: boolean | MedicalProfessional$caseAssignmentsArgs<ExtArgs>
    medicalOpinions?: boolean | MedicalProfessional$medicalOpinionsArgs<ExtArgs>
    professionalPayments?: boolean | MedicalProfessional$professionalPaymentsArgs<ExtArgs>
    professionalSessions?: boolean | MedicalProfessional$professionalSessionsArgs<ExtArgs>
    _count?: boolean | MedicalProfessionalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicalProfessionalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MedicalProfessionalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MedicalProfessionalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalProfessional"
    objects: {
      caseAssignments: Prisma.$CaseAssignmentPayload<ExtArgs>[]
      medicalOpinions: Prisma.$MedicalOpinionPayload<ExtArgs>[]
      professionalPayments: Prisma.$ProfessionalPaymentPayload<ExtArgs>[]
      professionalSessions: Prisma.$ProfessionalSessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proNumber: string
      firstName: string
      middleName: string | null
      lastName: string
      dob: Date
      email: string
      phone: string | null
      nationality: string | null
      licenseNumber: string
      licenseCountry: string
      licenseExpiry: Date
      vetted: boolean
      level: $Enums.ProLevel
      cvUrl: string | null
      documents: Prisma.JsonValue | null
      subspecialties: Prisma.JsonValue | null
      yearsPractice: number
      publications: number
      trialInvolved: boolean
      leadership: string | null
      societyMemberships: Prisma.JsonValue | null
      competencyData: Prisma.JsonValue | null
      availability: Prisma.JsonValue | null
      score: number | null
      hashedPassword: string | null
      twoFactorMethod: $Enums.TwoFactorMethod
      twoFactorSecret: string | null
      profileLastUpdated: Date | null
      codeOfConductAcknowledged: Date | null
      address: string | null
      billingAddress: string | null
      bankDetails: Prisma.JsonValue | null
      vatNumber: string | null
      billingRate: number | null
      performanceMetrics: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalProfessional"]>
    composites: {}
  }

  type MedicalProfessionalGetPayload<S extends boolean | null | undefined | MedicalProfessionalDefaultArgs> = $Result.GetResult<Prisma.$MedicalProfessionalPayload, S>

  type MedicalProfessionalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalProfessionalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalProfessionalCountAggregateInputType | true
    }

  export interface MedicalProfessionalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalProfessional'], meta: { name: 'MedicalProfessional' } }
    /**
     * Find zero or one MedicalProfessional that matches the filter.
     * @param {MedicalProfessionalFindUniqueArgs} args - Arguments to find a MedicalProfessional
     * @example
     * // Get one MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalProfessionalFindUniqueArgs>(args: SelectSubset<T, MedicalProfessionalFindUniqueArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalProfessional that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalProfessionalFindUniqueOrThrowArgs} args - Arguments to find a MedicalProfessional
     * @example
     * // Get one MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalProfessionalFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalProfessionalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalProfessional that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalFindFirstArgs} args - Arguments to find a MedicalProfessional
     * @example
     * // Get one MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalProfessionalFindFirstArgs>(args?: SelectSubset<T, MedicalProfessionalFindFirstArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalProfessional that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalFindFirstOrThrowArgs} args - Arguments to find a MedicalProfessional
     * @example
     * // Get one MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalProfessionalFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalProfessionalFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalProfessionals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalProfessionals
     * const medicalProfessionals = await prisma.medicalProfessional.findMany()
     * 
     * // Get first 10 MedicalProfessionals
     * const medicalProfessionals = await prisma.medicalProfessional.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalProfessionalWithIdOnly = await prisma.medicalProfessional.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalProfessionalFindManyArgs>(args?: SelectSubset<T, MedicalProfessionalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalProfessional.
     * @param {MedicalProfessionalCreateArgs} args - Arguments to create a MedicalProfessional.
     * @example
     * // Create one MedicalProfessional
     * const MedicalProfessional = await prisma.medicalProfessional.create({
     *   data: {
     *     // ... data to create a MedicalProfessional
     *   }
     * })
     * 
     */
    create<T extends MedicalProfessionalCreateArgs>(args: SelectSubset<T, MedicalProfessionalCreateArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalProfessionals.
     * @param {MedicalProfessionalCreateManyArgs} args - Arguments to create many MedicalProfessionals.
     * @example
     * // Create many MedicalProfessionals
     * const medicalProfessional = await prisma.medicalProfessional.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalProfessionalCreateManyArgs>(args?: SelectSubset<T, MedicalProfessionalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalProfessionals and returns the data saved in the database.
     * @param {MedicalProfessionalCreateManyAndReturnArgs} args - Arguments to create many MedicalProfessionals.
     * @example
     * // Create many MedicalProfessionals
     * const medicalProfessional = await prisma.medicalProfessional.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalProfessionals and only return the `id`
     * const medicalProfessionalWithIdOnly = await prisma.medicalProfessional.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalProfessionalCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalProfessionalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalProfessional.
     * @param {MedicalProfessionalDeleteArgs} args - Arguments to delete one MedicalProfessional.
     * @example
     * // Delete one MedicalProfessional
     * const MedicalProfessional = await prisma.medicalProfessional.delete({
     *   where: {
     *     // ... filter to delete one MedicalProfessional
     *   }
     * })
     * 
     */
    delete<T extends MedicalProfessionalDeleteArgs>(args: SelectSubset<T, MedicalProfessionalDeleteArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalProfessional.
     * @param {MedicalProfessionalUpdateArgs} args - Arguments to update one MedicalProfessional.
     * @example
     * // Update one MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalProfessionalUpdateArgs>(args: SelectSubset<T, MedicalProfessionalUpdateArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalProfessionals.
     * @param {MedicalProfessionalDeleteManyArgs} args - Arguments to filter MedicalProfessionals to delete.
     * @example
     * // Delete a few MedicalProfessionals
     * const { count } = await prisma.medicalProfessional.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalProfessionalDeleteManyArgs>(args?: SelectSubset<T, MedicalProfessionalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalProfessionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalProfessionals
     * const medicalProfessional = await prisma.medicalProfessional.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalProfessionalUpdateManyArgs>(args: SelectSubset<T, MedicalProfessionalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalProfessionals and returns the data updated in the database.
     * @param {MedicalProfessionalUpdateManyAndReturnArgs} args - Arguments to update many MedicalProfessionals.
     * @example
     * // Update many MedicalProfessionals
     * const medicalProfessional = await prisma.medicalProfessional.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalProfessionals and only return the `id`
     * const medicalProfessionalWithIdOnly = await prisma.medicalProfessional.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalProfessionalUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalProfessionalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalProfessional.
     * @param {MedicalProfessionalUpsertArgs} args - Arguments to update or create a MedicalProfessional.
     * @example
     * // Update or create a MedicalProfessional
     * const medicalProfessional = await prisma.medicalProfessional.upsert({
     *   create: {
     *     // ... data to create a MedicalProfessional
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalProfessional we want to update
     *   }
     * })
     */
    upsert<T extends MedicalProfessionalUpsertArgs>(args: SelectSubset<T, MedicalProfessionalUpsertArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalProfessionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalCountArgs} args - Arguments to filter MedicalProfessionals to count.
     * @example
     * // Count the number of MedicalProfessionals
     * const count = await prisma.medicalProfessional.count({
     *   where: {
     *     // ... the filter for the MedicalProfessionals we want to count
     *   }
     * })
    **/
    count<T extends MedicalProfessionalCountArgs>(
      args?: Subset<T, MedicalProfessionalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalProfessionalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalProfessional.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalProfessionalAggregateArgs>(args: Subset<T, MedicalProfessionalAggregateArgs>): Prisma.PrismaPromise<GetMedicalProfessionalAggregateType<T>>

    /**
     * Group by MedicalProfessional.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalProfessionalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalProfessionalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalProfessionalGroupByArgs['orderBy'] }
        : { orderBy?: MedicalProfessionalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalProfessionalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalProfessionalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalProfessional model
   */
  readonly fields: MedicalProfessionalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalProfessional.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalProfessionalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    caseAssignments<T extends MedicalProfessional$caseAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessional$caseAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    medicalOpinions<T extends MedicalProfessional$medicalOpinionsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessional$medicalOpinionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionalPayments<T extends MedicalProfessional$professionalPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessional$professionalPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    professionalSessions<T extends MedicalProfessional$professionalSessionsArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessional$professionalSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalProfessional model
   */
  interface MedicalProfessionalFieldRefs {
    readonly id: FieldRef<"MedicalProfessional", 'String'>
    readonly proNumber: FieldRef<"MedicalProfessional", 'String'>
    readonly firstName: FieldRef<"MedicalProfessional", 'String'>
    readonly middleName: FieldRef<"MedicalProfessional", 'String'>
    readonly lastName: FieldRef<"MedicalProfessional", 'String'>
    readonly dob: FieldRef<"MedicalProfessional", 'DateTime'>
    readonly email: FieldRef<"MedicalProfessional", 'String'>
    readonly phone: FieldRef<"MedicalProfessional", 'String'>
    readonly nationality: FieldRef<"MedicalProfessional", 'String'>
    readonly licenseNumber: FieldRef<"MedicalProfessional", 'String'>
    readonly licenseCountry: FieldRef<"MedicalProfessional", 'String'>
    readonly licenseExpiry: FieldRef<"MedicalProfessional", 'DateTime'>
    readonly vetted: FieldRef<"MedicalProfessional", 'Boolean'>
    readonly level: FieldRef<"MedicalProfessional", 'ProLevel'>
    readonly cvUrl: FieldRef<"MedicalProfessional", 'String'>
    readonly documents: FieldRef<"MedicalProfessional", 'Json'>
    readonly subspecialties: FieldRef<"MedicalProfessional", 'Json'>
    readonly yearsPractice: FieldRef<"MedicalProfessional", 'Int'>
    readonly publications: FieldRef<"MedicalProfessional", 'Int'>
    readonly trialInvolved: FieldRef<"MedicalProfessional", 'Boolean'>
    readonly leadership: FieldRef<"MedicalProfessional", 'String'>
    readonly societyMemberships: FieldRef<"MedicalProfessional", 'Json'>
    readonly competencyData: FieldRef<"MedicalProfessional", 'Json'>
    readonly availability: FieldRef<"MedicalProfessional", 'Json'>
    readonly score: FieldRef<"MedicalProfessional", 'Int'>
    readonly hashedPassword: FieldRef<"MedicalProfessional", 'String'>
    readonly twoFactorMethod: FieldRef<"MedicalProfessional", 'TwoFactorMethod'>
    readonly twoFactorSecret: FieldRef<"MedicalProfessional", 'String'>
    readonly profileLastUpdated: FieldRef<"MedicalProfessional", 'DateTime'>
    readonly codeOfConductAcknowledged: FieldRef<"MedicalProfessional", 'DateTime'>
    readonly address: FieldRef<"MedicalProfessional", 'String'>
    readonly billingAddress: FieldRef<"MedicalProfessional", 'String'>
    readonly bankDetails: FieldRef<"MedicalProfessional", 'Json'>
    readonly vatNumber: FieldRef<"MedicalProfessional", 'String'>
    readonly billingRate: FieldRef<"MedicalProfessional", 'Float'>
    readonly performanceMetrics: FieldRef<"MedicalProfessional", 'Json'>
    readonly createdAt: FieldRef<"MedicalProfessional", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalProfessional", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalProfessional findUnique
   */
  export type MedicalProfessionalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which MedicalProfessional to fetch.
     */
    where: MedicalProfessionalWhereUniqueInput
  }

  /**
   * MedicalProfessional findUniqueOrThrow
   */
  export type MedicalProfessionalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which MedicalProfessional to fetch.
     */
    where: MedicalProfessionalWhereUniqueInput
  }

  /**
   * MedicalProfessional findFirst
   */
  export type MedicalProfessionalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which MedicalProfessional to fetch.
     */
    where?: MedicalProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalProfessionals to fetch.
     */
    orderBy?: MedicalProfessionalOrderByWithRelationInput | MedicalProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalProfessionals.
     */
    cursor?: MedicalProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalProfessionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalProfessionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalProfessionals.
     */
    distinct?: MedicalProfessionalScalarFieldEnum | MedicalProfessionalScalarFieldEnum[]
  }

  /**
   * MedicalProfessional findFirstOrThrow
   */
  export type MedicalProfessionalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which MedicalProfessional to fetch.
     */
    where?: MedicalProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalProfessionals to fetch.
     */
    orderBy?: MedicalProfessionalOrderByWithRelationInput | MedicalProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalProfessionals.
     */
    cursor?: MedicalProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalProfessionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalProfessionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalProfessionals.
     */
    distinct?: MedicalProfessionalScalarFieldEnum | MedicalProfessionalScalarFieldEnum[]
  }

  /**
   * MedicalProfessional findMany
   */
  export type MedicalProfessionalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter, which MedicalProfessionals to fetch.
     */
    where?: MedicalProfessionalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalProfessionals to fetch.
     */
    orderBy?: MedicalProfessionalOrderByWithRelationInput | MedicalProfessionalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalProfessionals.
     */
    cursor?: MedicalProfessionalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalProfessionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalProfessionals.
     */
    skip?: number
    distinct?: MedicalProfessionalScalarFieldEnum | MedicalProfessionalScalarFieldEnum[]
  }

  /**
   * MedicalProfessional create
   */
  export type MedicalProfessionalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalProfessional.
     */
    data: XOR<MedicalProfessionalCreateInput, MedicalProfessionalUncheckedCreateInput>
  }

  /**
   * MedicalProfessional createMany
   */
  export type MedicalProfessionalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalProfessionals.
     */
    data: MedicalProfessionalCreateManyInput | MedicalProfessionalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalProfessional createManyAndReturn
   */
  export type MedicalProfessionalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalProfessionals.
     */
    data: MedicalProfessionalCreateManyInput | MedicalProfessionalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalProfessional update
   */
  export type MedicalProfessionalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalProfessional.
     */
    data: XOR<MedicalProfessionalUpdateInput, MedicalProfessionalUncheckedUpdateInput>
    /**
     * Choose, which MedicalProfessional to update.
     */
    where: MedicalProfessionalWhereUniqueInput
  }

  /**
   * MedicalProfessional updateMany
   */
  export type MedicalProfessionalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalProfessionals.
     */
    data: XOR<MedicalProfessionalUpdateManyMutationInput, MedicalProfessionalUncheckedUpdateManyInput>
    /**
     * Filter which MedicalProfessionals to update
     */
    where?: MedicalProfessionalWhereInput
    /**
     * Limit how many MedicalProfessionals to update.
     */
    limit?: number
  }

  /**
   * MedicalProfessional updateManyAndReturn
   */
  export type MedicalProfessionalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * The data used to update MedicalProfessionals.
     */
    data: XOR<MedicalProfessionalUpdateManyMutationInput, MedicalProfessionalUncheckedUpdateManyInput>
    /**
     * Filter which MedicalProfessionals to update
     */
    where?: MedicalProfessionalWhereInput
    /**
     * Limit how many MedicalProfessionals to update.
     */
    limit?: number
  }

  /**
   * MedicalProfessional upsert
   */
  export type MedicalProfessionalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalProfessional to update in case it exists.
     */
    where: MedicalProfessionalWhereUniqueInput
    /**
     * In case the MedicalProfessional found by the `where` argument doesn't exist, create a new MedicalProfessional with this data.
     */
    create: XOR<MedicalProfessionalCreateInput, MedicalProfessionalUncheckedCreateInput>
    /**
     * In case the MedicalProfessional was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalProfessionalUpdateInput, MedicalProfessionalUncheckedUpdateInput>
  }

  /**
   * MedicalProfessional delete
   */
  export type MedicalProfessionalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
    /**
     * Filter which MedicalProfessional to delete.
     */
    where: MedicalProfessionalWhereUniqueInput
  }

  /**
   * MedicalProfessional deleteMany
   */
  export type MedicalProfessionalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalProfessionals to delete
     */
    where?: MedicalProfessionalWhereInput
    /**
     * Limit how many MedicalProfessionals to delete.
     */
    limit?: number
  }

  /**
   * MedicalProfessional.caseAssignments
   */
  export type MedicalProfessional$caseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    where?: CaseAssignmentWhereInput
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    cursor?: CaseAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CaseAssignmentScalarFieldEnum | CaseAssignmentScalarFieldEnum[]
  }

  /**
   * MedicalProfessional.medicalOpinions
   */
  export type MedicalProfessional$medicalOpinionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    where?: MedicalOpinionWhereInput
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    cursor?: MedicalOpinionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalOpinionScalarFieldEnum | MedicalOpinionScalarFieldEnum[]
  }

  /**
   * MedicalProfessional.professionalPayments
   */
  export type MedicalProfessional$professionalPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    where?: ProfessionalPaymentWhereInput
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    cursor?: ProfessionalPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalPaymentScalarFieldEnum | ProfessionalPaymentScalarFieldEnum[]
  }

  /**
   * MedicalProfessional.professionalSessions
   */
  export type MedicalProfessional$professionalSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    where?: ProfessionalSessionWhereInput
    orderBy?: ProfessionalSessionOrderByWithRelationInput | ProfessionalSessionOrderByWithRelationInput[]
    cursor?: ProfessionalSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalSessionScalarFieldEnum | ProfessionalSessionScalarFieldEnum[]
  }

  /**
   * MedicalProfessional without action
   */
  export type MedicalProfessionalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalProfessional
     */
    select?: MedicalProfessionalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalProfessional
     */
    omit?: MedicalProfessionalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalProfessionalInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionalSession
   */

  export type AggregateProfessionalSession = {
    _count: ProfessionalSessionCountAggregateOutputType | null
    _min: ProfessionalSessionMinAggregateOutputType | null
    _max: ProfessionalSessionMaxAggregateOutputType | null
  }

  export type ProfessionalSessionMinAggregateOutputType = {
    id: string | null
    professionalId: string | null
    sessionToken: string | null
    twoFactorVerified: boolean | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ProfessionalSessionMaxAggregateOutputType = {
    id: string | null
    professionalId: string | null
    sessionToken: string | null
    twoFactorVerified: boolean | null
    expiresAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type ProfessionalSessionCountAggregateOutputType = {
    id: number
    professionalId: number
    sessionToken: number
    twoFactorVerified: number
    expiresAt: number
    ipAddress: number
    userAgent: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type ProfessionalSessionMinAggregateInputType = {
    id?: true
    professionalId?: true
    sessionToken?: true
    twoFactorVerified?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ProfessionalSessionMaxAggregateInputType = {
    id?: true
    professionalId?: true
    sessionToken?: true
    twoFactorVerified?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type ProfessionalSessionCountAggregateInputType = {
    id?: true
    professionalId?: true
    sessionToken?: true
    twoFactorVerified?: true
    expiresAt?: true
    ipAddress?: true
    userAgent?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type ProfessionalSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalSession to aggregate.
     */
    where?: ProfessionalSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalSessions to fetch.
     */
    orderBy?: ProfessionalSessionOrderByWithRelationInput | ProfessionalSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalSessions
    **/
    _count?: true | ProfessionalSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalSessionMaxAggregateInputType
  }

  export type GetProfessionalSessionAggregateType<T extends ProfessionalSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalSession[P]>
      : GetScalarType<T[P], AggregateProfessionalSession[P]>
  }




  export type ProfessionalSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalSessionWhereInput
    orderBy?: ProfessionalSessionOrderByWithAggregationInput | ProfessionalSessionOrderByWithAggregationInput[]
    by: ProfessionalSessionScalarFieldEnum[] | ProfessionalSessionScalarFieldEnum
    having?: ProfessionalSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalSessionCountAggregateInputType | true
    _min?: ProfessionalSessionMinAggregateInputType
    _max?: ProfessionalSessionMaxAggregateInputType
  }

  export type ProfessionalSessionGroupByOutputType = {
    id: string
    professionalId: string
    sessionToken: string
    twoFactorVerified: boolean
    expiresAt: Date
    ipAddress: string | null
    userAgent: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: ProfessionalSessionCountAggregateOutputType | null
    _min: ProfessionalSessionMinAggregateOutputType | null
    _max: ProfessionalSessionMaxAggregateOutputType | null
  }

  type GetProfessionalSessionGroupByPayload<T extends ProfessionalSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalSessionGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalSession"]>

  export type ProfessionalSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalSession"]>

  export type ProfessionalSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    professionalId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalSession"]>

  export type ProfessionalSessionSelectScalar = {
    id?: boolean
    professionalId?: boolean
    sessionToken?: boolean
    twoFactorVerified?: boolean
    expiresAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type ProfessionalSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "professionalId" | "sessionToken" | "twoFactorVerified" | "expiresAt" | "ipAddress" | "userAgent" | "metadata" | "createdAt", ExtArgs["result"]["professionalSession"]>
  export type ProfessionalSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type ProfessionalSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type ProfessionalSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }

  export type $ProfessionalSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalSession"
    objects: {
      professional: Prisma.$MedicalProfessionalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      professionalId: string
      sessionToken: string
      twoFactorVerified: boolean
      expiresAt: Date
      ipAddress: string | null
      userAgent: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["professionalSession"]>
    composites: {}
  }

  type ProfessionalSessionGetPayload<S extends boolean | null | undefined | ProfessionalSessionDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalSessionPayload, S>

  type ProfessionalSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionalSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalSessionCountAggregateInputType | true
    }

  export interface ProfessionalSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalSession'], meta: { name: 'ProfessionalSession' } }
    /**
     * Find zero or one ProfessionalSession that matches the filter.
     * @param {ProfessionalSessionFindUniqueArgs} args - Arguments to find a ProfessionalSession
     * @example
     * // Get one ProfessionalSession
     * const professionalSession = await prisma.professionalSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalSessionFindUniqueArgs>(args: SelectSubset<T, ProfessionalSessionFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionalSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionalSessionFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalSession
     * @example
     * // Get one ProfessionalSession
     * const professionalSession = await prisma.professionalSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionFindFirstArgs} args - Arguments to find a ProfessionalSession
     * @example
     * // Get one ProfessionalSession
     * const professionalSession = await prisma.professionalSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalSessionFindFirstArgs>(args?: SelectSubset<T, ProfessionalSessionFindFirstArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionFindFirstOrThrowArgs} args - Arguments to find a ProfessionalSession
     * @example
     * // Get one ProfessionalSession
     * const professionalSession = await prisma.professionalSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionalSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalSessions
     * const professionalSessions = await prisma.professionalSession.findMany()
     * 
     * // Get first 10 ProfessionalSessions
     * const professionalSessions = await prisma.professionalSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalSessionWithIdOnly = await prisma.professionalSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalSessionFindManyArgs>(args?: SelectSubset<T, ProfessionalSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionalSession.
     * @param {ProfessionalSessionCreateArgs} args - Arguments to create a ProfessionalSession.
     * @example
     * // Create one ProfessionalSession
     * const ProfessionalSession = await prisma.professionalSession.create({
     *   data: {
     *     // ... data to create a ProfessionalSession
     *   }
     * })
     * 
     */
    create<T extends ProfessionalSessionCreateArgs>(args: SelectSubset<T, ProfessionalSessionCreateArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionalSessions.
     * @param {ProfessionalSessionCreateManyArgs} args - Arguments to create many ProfessionalSessions.
     * @example
     * // Create many ProfessionalSessions
     * const professionalSession = await prisma.professionalSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalSessionCreateManyArgs>(args?: SelectSubset<T, ProfessionalSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionalSessions and returns the data saved in the database.
     * @param {ProfessionalSessionCreateManyAndReturnArgs} args - Arguments to create many ProfessionalSessions.
     * @example
     * // Create many ProfessionalSessions
     * const professionalSession = await prisma.professionalSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionalSessions and only return the `id`
     * const professionalSessionWithIdOnly = await prisma.professionalSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionalSession.
     * @param {ProfessionalSessionDeleteArgs} args - Arguments to delete one ProfessionalSession.
     * @example
     * // Delete one ProfessionalSession
     * const ProfessionalSession = await prisma.professionalSession.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalSession
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalSessionDeleteArgs>(args: SelectSubset<T, ProfessionalSessionDeleteArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionalSession.
     * @param {ProfessionalSessionUpdateArgs} args - Arguments to update one ProfessionalSession.
     * @example
     * // Update one ProfessionalSession
     * const professionalSession = await prisma.professionalSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalSessionUpdateArgs>(args: SelectSubset<T, ProfessionalSessionUpdateArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionalSessions.
     * @param {ProfessionalSessionDeleteManyArgs} args - Arguments to filter ProfessionalSessions to delete.
     * @example
     * // Delete a few ProfessionalSessions
     * const { count } = await prisma.professionalSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalSessionDeleteManyArgs>(args?: SelectSubset<T, ProfessionalSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalSessions
     * const professionalSession = await prisma.professionalSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalSessionUpdateManyArgs>(args: SelectSubset<T, ProfessionalSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalSessions and returns the data updated in the database.
     * @param {ProfessionalSessionUpdateManyAndReturnArgs} args - Arguments to update many ProfessionalSessions.
     * @example
     * // Update many ProfessionalSessions
     * const professionalSession = await prisma.professionalSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionalSessions and only return the `id`
     * const professionalSessionWithIdOnly = await prisma.professionalSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionalSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionalSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionalSession.
     * @param {ProfessionalSessionUpsertArgs} args - Arguments to update or create a ProfessionalSession.
     * @example
     * // Update or create a ProfessionalSession
     * const professionalSession = await prisma.professionalSession.upsert({
     *   create: {
     *     // ... data to create a ProfessionalSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalSession we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalSessionUpsertArgs>(args: SelectSubset<T, ProfessionalSessionUpsertArgs<ExtArgs>>): Prisma__ProfessionalSessionClient<$Result.GetResult<Prisma.$ProfessionalSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionalSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionCountArgs} args - Arguments to filter ProfessionalSessions to count.
     * @example
     * // Count the number of ProfessionalSessions
     * const count = await prisma.professionalSession.count({
     *   where: {
     *     // ... the filter for the ProfessionalSessions we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalSessionCountArgs>(
      args?: Subset<T, ProfessionalSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalSessionAggregateArgs>(args: Subset<T, ProfessionalSessionAggregateArgs>): Prisma.PrismaPromise<GetProfessionalSessionAggregateType<T>>

    /**
     * Group by ProfessionalSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalSessionGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalSession model
   */
  readonly fields: ProfessionalSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professional<T extends MedicalProfessionalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessionalDefaultArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionalSession model
   */
  interface ProfessionalSessionFieldRefs {
    readonly id: FieldRef<"ProfessionalSession", 'String'>
    readonly professionalId: FieldRef<"ProfessionalSession", 'String'>
    readonly sessionToken: FieldRef<"ProfessionalSession", 'String'>
    readonly twoFactorVerified: FieldRef<"ProfessionalSession", 'Boolean'>
    readonly expiresAt: FieldRef<"ProfessionalSession", 'DateTime'>
    readonly ipAddress: FieldRef<"ProfessionalSession", 'String'>
    readonly userAgent: FieldRef<"ProfessionalSession", 'String'>
    readonly metadata: FieldRef<"ProfessionalSession", 'Json'>
    readonly createdAt: FieldRef<"ProfessionalSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionalSession findUnique
   */
  export type ProfessionalSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalSession to fetch.
     */
    where: ProfessionalSessionWhereUniqueInput
  }

  /**
   * ProfessionalSession findUniqueOrThrow
   */
  export type ProfessionalSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalSession to fetch.
     */
    where: ProfessionalSessionWhereUniqueInput
  }

  /**
   * ProfessionalSession findFirst
   */
  export type ProfessionalSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalSession to fetch.
     */
    where?: ProfessionalSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalSessions to fetch.
     */
    orderBy?: ProfessionalSessionOrderByWithRelationInput | ProfessionalSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalSessions.
     */
    cursor?: ProfessionalSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalSessions.
     */
    distinct?: ProfessionalSessionScalarFieldEnum | ProfessionalSessionScalarFieldEnum[]
  }

  /**
   * ProfessionalSession findFirstOrThrow
   */
  export type ProfessionalSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalSession to fetch.
     */
    where?: ProfessionalSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalSessions to fetch.
     */
    orderBy?: ProfessionalSessionOrderByWithRelationInput | ProfessionalSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalSessions.
     */
    cursor?: ProfessionalSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalSessions.
     */
    distinct?: ProfessionalSessionScalarFieldEnum | ProfessionalSessionScalarFieldEnum[]
  }

  /**
   * ProfessionalSession findMany
   */
  export type ProfessionalSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalSessions to fetch.
     */
    where?: ProfessionalSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalSessions to fetch.
     */
    orderBy?: ProfessionalSessionOrderByWithRelationInput | ProfessionalSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalSessions.
     */
    cursor?: ProfessionalSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalSessions.
     */
    skip?: number
    distinct?: ProfessionalSessionScalarFieldEnum | ProfessionalSessionScalarFieldEnum[]
  }

  /**
   * ProfessionalSession create
   */
  export type ProfessionalSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalSession.
     */
    data: XOR<ProfessionalSessionCreateInput, ProfessionalSessionUncheckedCreateInput>
  }

  /**
   * ProfessionalSession createMany
   */
  export type ProfessionalSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalSessions.
     */
    data: ProfessionalSessionCreateManyInput | ProfessionalSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalSession createManyAndReturn
   */
  export type ProfessionalSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionalSessions.
     */
    data: ProfessionalSessionCreateManyInput | ProfessionalSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalSession update
   */
  export type ProfessionalSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalSession.
     */
    data: XOR<ProfessionalSessionUpdateInput, ProfessionalSessionUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalSession to update.
     */
    where: ProfessionalSessionWhereUniqueInput
  }

  /**
   * ProfessionalSession updateMany
   */
  export type ProfessionalSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalSessions.
     */
    data: XOR<ProfessionalSessionUpdateManyMutationInput, ProfessionalSessionUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalSessions to update
     */
    where?: ProfessionalSessionWhereInput
    /**
     * Limit how many ProfessionalSessions to update.
     */
    limit?: number
  }

  /**
   * ProfessionalSession updateManyAndReturn
   */
  export type ProfessionalSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionalSessions.
     */
    data: XOR<ProfessionalSessionUpdateManyMutationInput, ProfessionalSessionUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalSessions to update
     */
    where?: ProfessionalSessionWhereInput
    /**
     * Limit how many ProfessionalSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalSession upsert
   */
  export type ProfessionalSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalSession to update in case it exists.
     */
    where: ProfessionalSessionWhereUniqueInput
    /**
     * In case the ProfessionalSession found by the `where` argument doesn't exist, create a new ProfessionalSession with this data.
     */
    create: XOR<ProfessionalSessionCreateInput, ProfessionalSessionUncheckedCreateInput>
    /**
     * In case the ProfessionalSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalSessionUpdateInput, ProfessionalSessionUncheckedUpdateInput>
  }

  /**
   * ProfessionalSession delete
   */
  export type ProfessionalSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalSession to delete.
     */
    where: ProfessionalSessionWhereUniqueInput
  }

  /**
   * ProfessionalSession deleteMany
   */
  export type ProfessionalSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalSessions to delete
     */
    where?: ProfessionalSessionWhereInput
    /**
     * Limit how many ProfessionalSessions to delete.
     */
    limit?: number
  }

  /**
   * ProfessionalSession without action
   */
  export type ProfessionalSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalSession
     */
    select?: ProfessionalSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalSession
     */
    omit?: ProfessionalSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalSessionInclude<ExtArgs> | null
  }


  /**
   * Model CaseAssignment
   */

  export type AggregateCaseAssignment = {
    _count: CaseAssignmentCountAggregateOutputType | null
    _avg: CaseAssignmentAvgAggregateOutputType | null
    _sum: CaseAssignmentSumAggregateOutputType | null
    _min: CaseAssignmentMinAggregateOutputType | null
    _max: CaseAssignmentMaxAggregateOutputType | null
  }

  export type CaseAssignmentAvgAggregateOutputType = {
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type CaseAssignmentSumAggregateOutputType = {
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type CaseAssignmentMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    status: string | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type CaseAssignmentMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    status: string | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type CaseAssignmentCountAggregateOutputType = {
    id: number
    caseId: number
    professionalId: number
    status: number
    assignedAt: number
    startedAt: number
    completedAt: number
    estimatedDuration: number
    actualDuration: number
    metadata: number
    _all: number
  }


  export type CaseAssignmentAvgAggregateInputType = {
    estimatedDuration?: true
    actualDuration?: true
  }

  export type CaseAssignmentSumAggregateInputType = {
    estimatedDuration?: true
    actualDuration?: true
  }

  export type CaseAssignmentMinAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    status?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    estimatedDuration?: true
    actualDuration?: true
  }

  export type CaseAssignmentMaxAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    status?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    estimatedDuration?: true
    actualDuration?: true
  }

  export type CaseAssignmentCountAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    status?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    estimatedDuration?: true
    actualDuration?: true
    metadata?: true
    _all?: true
  }

  export type CaseAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseAssignment to aggregate.
     */
    where?: CaseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseAssignments to fetch.
     */
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CaseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CaseAssignments
    **/
    _count?: true | CaseAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CaseAssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CaseAssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CaseAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CaseAssignmentMaxAggregateInputType
  }

  export type GetCaseAssignmentAggregateType<T extends CaseAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateCaseAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCaseAssignment[P]>
      : GetScalarType<T[P], AggregateCaseAssignment[P]>
  }




  export type CaseAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CaseAssignmentWhereInput
    orderBy?: CaseAssignmentOrderByWithAggregationInput | CaseAssignmentOrderByWithAggregationInput[]
    by: CaseAssignmentScalarFieldEnum[] | CaseAssignmentScalarFieldEnum
    having?: CaseAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CaseAssignmentCountAggregateInputType | true
    _avg?: CaseAssignmentAvgAggregateInputType
    _sum?: CaseAssignmentSumAggregateInputType
    _min?: CaseAssignmentMinAggregateInputType
    _max?: CaseAssignmentMaxAggregateInputType
  }

  export type CaseAssignmentGroupByOutputType = {
    id: string
    caseId: string
    professionalId: string
    status: string
    assignedAt: Date
    startedAt: Date | null
    completedAt: Date | null
    estimatedDuration: number | null
    actualDuration: number | null
    metadata: JsonValue | null
    _count: CaseAssignmentCountAggregateOutputType | null
    _avg: CaseAssignmentAvgAggregateOutputType | null
    _sum: CaseAssignmentSumAggregateOutputType | null
    _min: CaseAssignmentMinAggregateOutputType | null
    _max: CaseAssignmentMaxAggregateOutputType | null
  }

  type GetCaseAssignmentGroupByPayload<T extends CaseAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CaseAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CaseAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CaseAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], CaseAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type CaseAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    status?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    metadata?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseAssignment"]>

  export type CaseAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    status?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    metadata?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseAssignment"]>

  export type CaseAssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    status?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    metadata?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["caseAssignment"]>

  export type CaseAssignmentSelectScalar = {
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    status?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    metadata?: boolean
  }

  export type CaseAssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "professionalId" | "status" | "assignedAt" | "startedAt" | "completedAt" | "estimatedDuration" | "actualDuration" | "metadata", ExtArgs["result"]["caseAssignment"]>
  export type CaseAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type CaseAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type CaseAssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }

  export type $CaseAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CaseAssignment"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
      professional: Prisma.$MedicalProfessionalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      professionalId: string
      status: string
      assignedAt: Date
      startedAt: Date | null
      completedAt: Date | null
      estimatedDuration: number | null
      actualDuration: number | null
      metadata: Prisma.JsonValue | null
    }, ExtArgs["result"]["caseAssignment"]>
    composites: {}
  }

  type CaseAssignmentGetPayload<S extends boolean | null | undefined | CaseAssignmentDefaultArgs> = $Result.GetResult<Prisma.$CaseAssignmentPayload, S>

  type CaseAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CaseAssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CaseAssignmentCountAggregateInputType | true
    }

  export interface CaseAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CaseAssignment'], meta: { name: 'CaseAssignment' } }
    /**
     * Find zero or one CaseAssignment that matches the filter.
     * @param {CaseAssignmentFindUniqueArgs} args - Arguments to find a CaseAssignment
     * @example
     * // Get one CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CaseAssignmentFindUniqueArgs>(args: SelectSubset<T, CaseAssignmentFindUniqueArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CaseAssignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CaseAssignmentFindUniqueOrThrowArgs} args - Arguments to find a CaseAssignment
     * @example
     * // Get one CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CaseAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, CaseAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentFindFirstArgs} args - Arguments to find a CaseAssignment
     * @example
     * // Get one CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CaseAssignmentFindFirstArgs>(args?: SelectSubset<T, CaseAssignmentFindFirstArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CaseAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentFindFirstOrThrowArgs} args - Arguments to find a CaseAssignment
     * @example
     * // Get one CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CaseAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, CaseAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CaseAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CaseAssignments
     * const caseAssignments = await prisma.caseAssignment.findMany()
     * 
     * // Get first 10 CaseAssignments
     * const caseAssignments = await prisma.caseAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const caseAssignmentWithIdOnly = await prisma.caseAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CaseAssignmentFindManyArgs>(args?: SelectSubset<T, CaseAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CaseAssignment.
     * @param {CaseAssignmentCreateArgs} args - Arguments to create a CaseAssignment.
     * @example
     * // Create one CaseAssignment
     * const CaseAssignment = await prisma.caseAssignment.create({
     *   data: {
     *     // ... data to create a CaseAssignment
     *   }
     * })
     * 
     */
    create<T extends CaseAssignmentCreateArgs>(args: SelectSubset<T, CaseAssignmentCreateArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CaseAssignments.
     * @param {CaseAssignmentCreateManyArgs} args - Arguments to create many CaseAssignments.
     * @example
     * // Create many CaseAssignments
     * const caseAssignment = await prisma.caseAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CaseAssignmentCreateManyArgs>(args?: SelectSubset<T, CaseAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CaseAssignments and returns the data saved in the database.
     * @param {CaseAssignmentCreateManyAndReturnArgs} args - Arguments to create many CaseAssignments.
     * @example
     * // Create many CaseAssignments
     * const caseAssignment = await prisma.caseAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CaseAssignments and only return the `id`
     * const caseAssignmentWithIdOnly = await prisma.caseAssignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CaseAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, CaseAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CaseAssignment.
     * @param {CaseAssignmentDeleteArgs} args - Arguments to delete one CaseAssignment.
     * @example
     * // Delete one CaseAssignment
     * const CaseAssignment = await prisma.caseAssignment.delete({
     *   where: {
     *     // ... filter to delete one CaseAssignment
     *   }
     * })
     * 
     */
    delete<T extends CaseAssignmentDeleteArgs>(args: SelectSubset<T, CaseAssignmentDeleteArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CaseAssignment.
     * @param {CaseAssignmentUpdateArgs} args - Arguments to update one CaseAssignment.
     * @example
     * // Update one CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CaseAssignmentUpdateArgs>(args: SelectSubset<T, CaseAssignmentUpdateArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CaseAssignments.
     * @param {CaseAssignmentDeleteManyArgs} args - Arguments to filter CaseAssignments to delete.
     * @example
     * // Delete a few CaseAssignments
     * const { count } = await prisma.caseAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CaseAssignmentDeleteManyArgs>(args?: SelectSubset<T, CaseAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CaseAssignments
     * const caseAssignment = await prisma.caseAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CaseAssignmentUpdateManyArgs>(args: SelectSubset<T, CaseAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CaseAssignments and returns the data updated in the database.
     * @param {CaseAssignmentUpdateManyAndReturnArgs} args - Arguments to update many CaseAssignments.
     * @example
     * // Update many CaseAssignments
     * const caseAssignment = await prisma.caseAssignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CaseAssignments and only return the `id`
     * const caseAssignmentWithIdOnly = await prisma.caseAssignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CaseAssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, CaseAssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CaseAssignment.
     * @param {CaseAssignmentUpsertArgs} args - Arguments to update or create a CaseAssignment.
     * @example
     * // Update or create a CaseAssignment
     * const caseAssignment = await prisma.caseAssignment.upsert({
     *   create: {
     *     // ... data to create a CaseAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CaseAssignment we want to update
     *   }
     * })
     */
    upsert<T extends CaseAssignmentUpsertArgs>(args: SelectSubset<T, CaseAssignmentUpsertArgs<ExtArgs>>): Prisma__CaseAssignmentClient<$Result.GetResult<Prisma.$CaseAssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CaseAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentCountArgs} args - Arguments to filter CaseAssignments to count.
     * @example
     * // Count the number of CaseAssignments
     * const count = await prisma.caseAssignment.count({
     *   where: {
     *     // ... the filter for the CaseAssignments we want to count
     *   }
     * })
    **/
    count<T extends CaseAssignmentCountArgs>(
      args?: Subset<T, CaseAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CaseAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CaseAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CaseAssignmentAggregateArgs>(args: Subset<T, CaseAssignmentAggregateArgs>): Prisma.PrismaPromise<GetCaseAssignmentAggregateType<T>>

    /**
     * Group by CaseAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CaseAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CaseAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CaseAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: CaseAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CaseAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCaseAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CaseAssignment model
   */
  readonly fields: CaseAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CaseAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CaseAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professional<T extends MedicalProfessionalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessionalDefaultArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CaseAssignment model
   */
  interface CaseAssignmentFieldRefs {
    readonly id: FieldRef<"CaseAssignment", 'String'>
    readonly caseId: FieldRef<"CaseAssignment", 'String'>
    readonly professionalId: FieldRef<"CaseAssignment", 'String'>
    readonly status: FieldRef<"CaseAssignment", 'String'>
    readonly assignedAt: FieldRef<"CaseAssignment", 'DateTime'>
    readonly startedAt: FieldRef<"CaseAssignment", 'DateTime'>
    readonly completedAt: FieldRef<"CaseAssignment", 'DateTime'>
    readonly estimatedDuration: FieldRef<"CaseAssignment", 'Int'>
    readonly actualDuration: FieldRef<"CaseAssignment", 'Int'>
    readonly metadata: FieldRef<"CaseAssignment", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * CaseAssignment findUnique
   */
  export type CaseAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which CaseAssignment to fetch.
     */
    where: CaseAssignmentWhereUniqueInput
  }

  /**
   * CaseAssignment findUniqueOrThrow
   */
  export type CaseAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which CaseAssignment to fetch.
     */
    where: CaseAssignmentWhereUniqueInput
  }

  /**
   * CaseAssignment findFirst
   */
  export type CaseAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which CaseAssignment to fetch.
     */
    where?: CaseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseAssignments to fetch.
     */
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseAssignments.
     */
    cursor?: CaseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseAssignments.
     */
    distinct?: CaseAssignmentScalarFieldEnum | CaseAssignmentScalarFieldEnum[]
  }

  /**
   * CaseAssignment findFirstOrThrow
   */
  export type CaseAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which CaseAssignment to fetch.
     */
    where?: CaseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseAssignments to fetch.
     */
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CaseAssignments.
     */
    cursor?: CaseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CaseAssignments.
     */
    distinct?: CaseAssignmentScalarFieldEnum | CaseAssignmentScalarFieldEnum[]
  }

  /**
   * CaseAssignment findMany
   */
  export type CaseAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which CaseAssignments to fetch.
     */
    where?: CaseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CaseAssignments to fetch.
     */
    orderBy?: CaseAssignmentOrderByWithRelationInput | CaseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CaseAssignments.
     */
    cursor?: CaseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CaseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CaseAssignments.
     */
    skip?: number
    distinct?: CaseAssignmentScalarFieldEnum | CaseAssignmentScalarFieldEnum[]
  }

  /**
   * CaseAssignment create
   */
  export type CaseAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a CaseAssignment.
     */
    data: XOR<CaseAssignmentCreateInput, CaseAssignmentUncheckedCreateInput>
  }

  /**
   * CaseAssignment createMany
   */
  export type CaseAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CaseAssignments.
     */
    data: CaseAssignmentCreateManyInput | CaseAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CaseAssignment createManyAndReturn
   */
  export type CaseAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many CaseAssignments.
     */
    data: CaseAssignmentCreateManyInput | CaseAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseAssignment update
   */
  export type CaseAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a CaseAssignment.
     */
    data: XOR<CaseAssignmentUpdateInput, CaseAssignmentUncheckedUpdateInput>
    /**
     * Choose, which CaseAssignment to update.
     */
    where: CaseAssignmentWhereUniqueInput
  }

  /**
   * CaseAssignment updateMany
   */
  export type CaseAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CaseAssignments.
     */
    data: XOR<CaseAssignmentUpdateManyMutationInput, CaseAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which CaseAssignments to update
     */
    where?: CaseAssignmentWhereInput
    /**
     * Limit how many CaseAssignments to update.
     */
    limit?: number
  }

  /**
   * CaseAssignment updateManyAndReturn
   */
  export type CaseAssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * The data used to update CaseAssignments.
     */
    data: XOR<CaseAssignmentUpdateManyMutationInput, CaseAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which CaseAssignments to update
     */
    where?: CaseAssignmentWhereInput
    /**
     * Limit how many CaseAssignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CaseAssignment upsert
   */
  export type CaseAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the CaseAssignment to update in case it exists.
     */
    where: CaseAssignmentWhereUniqueInput
    /**
     * In case the CaseAssignment found by the `where` argument doesn't exist, create a new CaseAssignment with this data.
     */
    create: XOR<CaseAssignmentCreateInput, CaseAssignmentUncheckedCreateInput>
    /**
     * In case the CaseAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CaseAssignmentUpdateInput, CaseAssignmentUncheckedUpdateInput>
  }

  /**
   * CaseAssignment delete
   */
  export type CaseAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
    /**
     * Filter which CaseAssignment to delete.
     */
    where: CaseAssignmentWhereUniqueInput
  }

  /**
   * CaseAssignment deleteMany
   */
  export type CaseAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CaseAssignments to delete
     */
    where?: CaseAssignmentWhereInput
    /**
     * Limit how many CaseAssignments to delete.
     */
    limit?: number
  }

  /**
   * CaseAssignment without action
   */
  export type CaseAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CaseAssignment
     */
    select?: CaseAssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CaseAssignment
     */
    omit?: CaseAssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CaseAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model AIAnalysis
   */

  export type AggregateAIAnalysis = {
    _count: AIAnalysisCountAggregateOutputType | null
    _avg: AIAnalysisAvgAggregateOutputType | null
    _sum: AIAnalysisSumAggregateOutputType | null
    _min: AIAnalysisMinAggregateOutputType | null
    _max: AIAnalysisMaxAggregateOutputType | null
  }

  export type AIAnalysisAvgAggregateOutputType = {
    confidence: number | null
    processingTime: number | null
    cost: number | null
  }

  export type AIAnalysisSumAggregateOutputType = {
    confidence: number | null
    processingTime: number | null
    cost: number | null
  }

  export type AIAnalysisMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    analysisType: string | null
    confidence: number | null
    processingTime: number | null
    aiProvider: string | null
    modelVersion: string | null
    cost: number | null
    createdAt: Date | null
  }

  export type AIAnalysisMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    analysisType: string | null
    confidence: number | null
    processingTime: number | null
    aiProvider: string | null
    modelVersion: string | null
    cost: number | null
    createdAt: Date | null
  }

  export type AIAnalysisCountAggregateOutputType = {
    id: number
    caseId: number
    analysisType: number
    results: number
    confidence: number
    processingTime: number
    aiProvider: number
    modelVersion: number
    cost: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type AIAnalysisAvgAggregateInputType = {
    confidence?: true
    processingTime?: true
    cost?: true
  }

  export type AIAnalysisSumAggregateInputType = {
    confidence?: true
    processingTime?: true
    cost?: true
  }

  export type AIAnalysisMinAggregateInputType = {
    id?: true
    caseId?: true
    analysisType?: true
    confidence?: true
    processingTime?: true
    aiProvider?: true
    modelVersion?: true
    cost?: true
    createdAt?: true
  }

  export type AIAnalysisMaxAggregateInputType = {
    id?: true
    caseId?: true
    analysisType?: true
    confidence?: true
    processingTime?: true
    aiProvider?: true
    modelVersion?: true
    cost?: true
    createdAt?: true
  }

  export type AIAnalysisCountAggregateInputType = {
    id?: true
    caseId?: true
    analysisType?: true
    results?: true
    confidence?: true
    processingTime?: true
    aiProvider?: true
    modelVersion?: true
    cost?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type AIAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIAnalysis to aggregate.
     */
    where?: AIAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIAnalyses to fetch.
     */
    orderBy?: AIAnalysisOrderByWithRelationInput | AIAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIAnalyses
    **/
    _count?: true | AIAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AIAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AIAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIAnalysisMaxAggregateInputType
  }

  export type GetAIAnalysisAggregateType<T extends AIAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateAIAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIAnalysis[P]>
      : GetScalarType<T[P], AggregateAIAnalysis[P]>
  }




  export type AIAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIAnalysisWhereInput
    orderBy?: AIAnalysisOrderByWithAggregationInput | AIAnalysisOrderByWithAggregationInput[]
    by: AIAnalysisScalarFieldEnum[] | AIAnalysisScalarFieldEnum
    having?: AIAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIAnalysisCountAggregateInputType | true
    _avg?: AIAnalysisAvgAggregateInputType
    _sum?: AIAnalysisSumAggregateInputType
    _min?: AIAnalysisMinAggregateInputType
    _max?: AIAnalysisMaxAggregateInputType
  }

  export type AIAnalysisGroupByOutputType = {
    id: string
    caseId: string
    analysisType: string
    results: JsonValue
    confidence: number | null
    processingTime: number | null
    aiProvider: string | null
    modelVersion: string | null
    cost: number | null
    metadata: JsonValue | null
    createdAt: Date
    _count: AIAnalysisCountAggregateOutputType | null
    _avg: AIAnalysisAvgAggregateOutputType | null
    _sum: AIAnalysisSumAggregateOutputType | null
    _min: AIAnalysisMinAggregateOutputType | null
    _max: AIAnalysisMaxAggregateOutputType | null
  }

  type GetAIAnalysisGroupByPayload<T extends AIAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], AIAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type AIAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    analysisType?: boolean
    results?: boolean
    confidence?: boolean
    processingTime?: boolean
    aiProvider?: boolean
    modelVersion?: boolean
    cost?: boolean
    metadata?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIAnalysis"]>

  export type AIAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    analysisType?: boolean
    results?: boolean
    confidence?: boolean
    processingTime?: boolean
    aiProvider?: boolean
    modelVersion?: boolean
    cost?: boolean
    metadata?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIAnalysis"]>

  export type AIAnalysisSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    analysisType?: boolean
    results?: boolean
    confidence?: boolean
    processingTime?: boolean
    aiProvider?: boolean
    modelVersion?: boolean
    cost?: boolean
    metadata?: boolean
    createdAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIAnalysis"]>

  export type AIAnalysisSelectScalar = {
    id?: boolean
    caseId?: boolean
    analysisType?: boolean
    results?: boolean
    confidence?: boolean
    processingTime?: boolean
    aiProvider?: boolean
    modelVersion?: boolean
    cost?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type AIAnalysisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "analysisType" | "results" | "confidence" | "processingTime" | "aiProvider" | "modelVersion" | "cost" | "metadata" | "createdAt", ExtArgs["result"]["aIAnalysis"]>
  export type AIAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type AIAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }
  export type AIAnalysisIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
  }

  export type $AIAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIAnalysis"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      analysisType: string
      results: Prisma.JsonValue
      confidence: number | null
      processingTime: number | null
      aiProvider: string | null
      modelVersion: string | null
      cost: number | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["aIAnalysis"]>
    composites: {}
  }

  type AIAnalysisGetPayload<S extends boolean | null | undefined | AIAnalysisDefaultArgs> = $Result.GetResult<Prisma.$AIAnalysisPayload, S>

  type AIAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AIAnalysisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AIAnalysisCountAggregateInputType | true
    }

  export interface AIAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIAnalysis'], meta: { name: 'AIAnalysis' } }
    /**
     * Find zero or one AIAnalysis that matches the filter.
     * @param {AIAnalysisFindUniqueArgs} args - Arguments to find a AIAnalysis
     * @example
     * // Get one AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIAnalysisFindUniqueArgs>(args: SelectSubset<T, AIAnalysisFindUniqueArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AIAnalysis that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AIAnalysisFindUniqueOrThrowArgs} args - Arguments to find a AIAnalysis
     * @example
     * // Get one AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, AIAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisFindFirstArgs} args - Arguments to find a AIAnalysis
     * @example
     * // Get one AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIAnalysisFindFirstArgs>(args?: SelectSubset<T, AIAnalysisFindFirstArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisFindFirstOrThrowArgs} args - Arguments to find a AIAnalysis
     * @example
     * // Get one AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, AIAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AIAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIAnalyses
     * const aIAnalyses = await prisma.aIAnalysis.findMany()
     * 
     * // Get first 10 AIAnalyses
     * const aIAnalyses = await prisma.aIAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIAnalysisWithIdOnly = await prisma.aIAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIAnalysisFindManyArgs>(args?: SelectSubset<T, AIAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AIAnalysis.
     * @param {AIAnalysisCreateArgs} args - Arguments to create a AIAnalysis.
     * @example
     * // Create one AIAnalysis
     * const AIAnalysis = await prisma.aIAnalysis.create({
     *   data: {
     *     // ... data to create a AIAnalysis
     *   }
     * })
     * 
     */
    create<T extends AIAnalysisCreateArgs>(args: SelectSubset<T, AIAnalysisCreateArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AIAnalyses.
     * @param {AIAnalysisCreateManyArgs} args - Arguments to create many AIAnalyses.
     * @example
     * // Create many AIAnalyses
     * const aIAnalysis = await prisma.aIAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIAnalysisCreateManyArgs>(args?: SelectSubset<T, AIAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIAnalyses and returns the data saved in the database.
     * @param {AIAnalysisCreateManyAndReturnArgs} args - Arguments to create many AIAnalyses.
     * @example
     * // Create many AIAnalyses
     * const aIAnalysis = await prisma.aIAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIAnalyses and only return the `id`
     * const aIAnalysisWithIdOnly = await prisma.aIAnalysis.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, AIAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AIAnalysis.
     * @param {AIAnalysisDeleteArgs} args - Arguments to delete one AIAnalysis.
     * @example
     * // Delete one AIAnalysis
     * const AIAnalysis = await prisma.aIAnalysis.delete({
     *   where: {
     *     // ... filter to delete one AIAnalysis
     *   }
     * })
     * 
     */
    delete<T extends AIAnalysisDeleteArgs>(args: SelectSubset<T, AIAnalysisDeleteArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AIAnalysis.
     * @param {AIAnalysisUpdateArgs} args - Arguments to update one AIAnalysis.
     * @example
     * // Update one AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIAnalysisUpdateArgs>(args: SelectSubset<T, AIAnalysisUpdateArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AIAnalyses.
     * @param {AIAnalysisDeleteManyArgs} args - Arguments to filter AIAnalyses to delete.
     * @example
     * // Delete a few AIAnalyses
     * const { count } = await prisma.aIAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIAnalysisDeleteManyArgs>(args?: SelectSubset<T, AIAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIAnalyses
     * const aIAnalysis = await prisma.aIAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIAnalysisUpdateManyArgs>(args: SelectSubset<T, AIAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIAnalyses and returns the data updated in the database.
     * @param {AIAnalysisUpdateManyAndReturnArgs} args - Arguments to update many AIAnalyses.
     * @example
     * // Update many AIAnalyses
     * const aIAnalysis = await prisma.aIAnalysis.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AIAnalyses and only return the `id`
     * const aIAnalysisWithIdOnly = await prisma.aIAnalysis.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AIAnalysisUpdateManyAndReturnArgs>(args: SelectSubset<T, AIAnalysisUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AIAnalysis.
     * @param {AIAnalysisUpsertArgs} args - Arguments to update or create a AIAnalysis.
     * @example
     * // Update or create a AIAnalysis
     * const aIAnalysis = await prisma.aIAnalysis.upsert({
     *   create: {
     *     // ... data to create a AIAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends AIAnalysisUpsertArgs>(args: SelectSubset<T, AIAnalysisUpsertArgs<ExtArgs>>): Prisma__AIAnalysisClient<$Result.GetResult<Prisma.$AIAnalysisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AIAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisCountArgs} args - Arguments to filter AIAnalyses to count.
     * @example
     * // Count the number of AIAnalyses
     * const count = await prisma.aIAnalysis.count({
     *   where: {
     *     // ... the filter for the AIAnalyses we want to count
     *   }
     * })
    **/
    count<T extends AIAnalysisCountArgs>(
      args?: Subset<T, AIAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIAnalysisAggregateArgs>(args: Subset<T, AIAnalysisAggregateArgs>): Prisma.PrismaPromise<GetAIAnalysisAggregateType<T>>

    /**
     * Group by AIAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: AIAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIAnalysis model
   */
  readonly fields: AIAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIAnalysis model
   */
  interface AIAnalysisFieldRefs {
    readonly id: FieldRef<"AIAnalysis", 'String'>
    readonly caseId: FieldRef<"AIAnalysis", 'String'>
    readonly analysisType: FieldRef<"AIAnalysis", 'String'>
    readonly results: FieldRef<"AIAnalysis", 'Json'>
    readonly confidence: FieldRef<"AIAnalysis", 'Float'>
    readonly processingTime: FieldRef<"AIAnalysis", 'Int'>
    readonly aiProvider: FieldRef<"AIAnalysis", 'String'>
    readonly modelVersion: FieldRef<"AIAnalysis", 'String'>
    readonly cost: FieldRef<"AIAnalysis", 'Float'>
    readonly metadata: FieldRef<"AIAnalysis", 'Json'>
    readonly createdAt: FieldRef<"AIAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIAnalysis findUnique
   */
  export type AIAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which AIAnalysis to fetch.
     */
    where: AIAnalysisWhereUniqueInput
  }

  /**
   * AIAnalysis findUniqueOrThrow
   */
  export type AIAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which AIAnalysis to fetch.
     */
    where: AIAnalysisWhereUniqueInput
  }

  /**
   * AIAnalysis findFirst
   */
  export type AIAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which AIAnalysis to fetch.
     */
    where?: AIAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIAnalyses to fetch.
     */
    orderBy?: AIAnalysisOrderByWithRelationInput | AIAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIAnalyses.
     */
    cursor?: AIAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIAnalyses.
     */
    distinct?: AIAnalysisScalarFieldEnum | AIAnalysisScalarFieldEnum[]
  }

  /**
   * AIAnalysis findFirstOrThrow
   */
  export type AIAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which AIAnalysis to fetch.
     */
    where?: AIAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIAnalyses to fetch.
     */
    orderBy?: AIAnalysisOrderByWithRelationInput | AIAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIAnalyses.
     */
    cursor?: AIAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIAnalyses.
     */
    distinct?: AIAnalysisScalarFieldEnum | AIAnalysisScalarFieldEnum[]
  }

  /**
   * AIAnalysis findMany
   */
  export type AIAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which AIAnalyses to fetch.
     */
    where?: AIAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIAnalyses to fetch.
     */
    orderBy?: AIAnalysisOrderByWithRelationInput | AIAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIAnalyses.
     */
    cursor?: AIAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIAnalyses.
     */
    skip?: number
    distinct?: AIAnalysisScalarFieldEnum | AIAnalysisScalarFieldEnum[]
  }

  /**
   * AIAnalysis create
   */
  export type AIAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a AIAnalysis.
     */
    data: XOR<AIAnalysisCreateInput, AIAnalysisUncheckedCreateInput>
  }

  /**
   * AIAnalysis createMany
   */
  export type AIAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIAnalyses.
     */
    data: AIAnalysisCreateManyInput | AIAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIAnalysis createManyAndReturn
   */
  export type AIAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * The data used to create many AIAnalyses.
     */
    data: AIAnalysisCreateManyInput | AIAnalysisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIAnalysis update
   */
  export type AIAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a AIAnalysis.
     */
    data: XOR<AIAnalysisUpdateInput, AIAnalysisUncheckedUpdateInput>
    /**
     * Choose, which AIAnalysis to update.
     */
    where: AIAnalysisWhereUniqueInput
  }

  /**
   * AIAnalysis updateMany
   */
  export type AIAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIAnalyses.
     */
    data: XOR<AIAnalysisUpdateManyMutationInput, AIAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which AIAnalyses to update
     */
    where?: AIAnalysisWhereInput
    /**
     * Limit how many AIAnalyses to update.
     */
    limit?: number
  }

  /**
   * AIAnalysis updateManyAndReturn
   */
  export type AIAnalysisUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * The data used to update AIAnalyses.
     */
    data: XOR<AIAnalysisUpdateManyMutationInput, AIAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which AIAnalyses to update
     */
    where?: AIAnalysisWhereInput
    /**
     * Limit how many AIAnalyses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIAnalysis upsert
   */
  export type AIAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the AIAnalysis to update in case it exists.
     */
    where: AIAnalysisWhereUniqueInput
    /**
     * In case the AIAnalysis found by the `where` argument doesn't exist, create a new AIAnalysis with this data.
     */
    create: XOR<AIAnalysisCreateInput, AIAnalysisUncheckedCreateInput>
    /**
     * In case the AIAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIAnalysisUpdateInput, AIAnalysisUncheckedUpdateInput>
  }

  /**
   * AIAnalysis delete
   */
  export type AIAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
    /**
     * Filter which AIAnalysis to delete.
     */
    where: AIAnalysisWhereUniqueInput
  }

  /**
   * AIAnalysis deleteMany
   */
  export type AIAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIAnalyses to delete
     */
    where?: AIAnalysisWhereInput
    /**
     * Limit how many AIAnalyses to delete.
     */
    limit?: number
  }

  /**
   * AIAnalysis without action
   */
  export type AIAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIAnalysis
     */
    select?: AIAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIAnalysis
     */
    omit?: AIAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIAnalysisInclude<ExtArgs> | null
  }


  /**
   * Model MedicalOpinion
   */

  export type AggregateMedicalOpinion = {
    _count: MedicalOpinionCountAggregateOutputType | null
    _avg: MedicalOpinionAvgAggregateOutputType | null
    _sum: MedicalOpinionSumAggregateOutputType | null
    _min: MedicalOpinionMinAggregateOutputType | null
    _max: MedicalOpinionMaxAggregateOutputType | null
  }

  export type MedicalOpinionAvgAggregateOutputType = {
    version: number | null
  }

  export type MedicalOpinionSumAggregateOutputType = {
    version: number | null
  }

  export type MedicalOpinionMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    content: string | null
    status: string | null
    version: number | null
    digitalSignature: string | null
    reviewedBy: string | null
    reviewedAt: Date | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalOpinionMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    content: string | null
    status: string | null
    version: number | null
    digitalSignature: string | null
    reviewedBy: string | null
    reviewedAt: Date | null
    publishedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MedicalOpinionCountAggregateOutputType = {
    id: number
    caseId: number
    professionalId: number
    content: number
    status: number
    version: number
    digitalSignature: number
    reviewedBy: number
    reviewedAt: number
    publishedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MedicalOpinionAvgAggregateInputType = {
    version?: true
  }

  export type MedicalOpinionSumAggregateInputType = {
    version?: true
  }

  export type MedicalOpinionMinAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    content?: true
    status?: true
    version?: true
    digitalSignature?: true
    reviewedBy?: true
    reviewedAt?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalOpinionMaxAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    content?: true
    status?: true
    version?: true
    digitalSignature?: true
    reviewedBy?: true
    reviewedAt?: true
    publishedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MedicalOpinionCountAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    content?: true
    status?: true
    version?: true
    digitalSignature?: true
    reviewedBy?: true
    reviewedAt?: true
    publishedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MedicalOpinionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalOpinion to aggregate.
     */
    where?: MedicalOpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalOpinions to fetch.
     */
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalOpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalOpinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalOpinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalOpinions
    **/
    _count?: true | MedicalOpinionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalOpinionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalOpinionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalOpinionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalOpinionMaxAggregateInputType
  }

  export type GetMedicalOpinionAggregateType<T extends MedicalOpinionAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalOpinion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalOpinion[P]>
      : GetScalarType<T[P], AggregateMedicalOpinion[P]>
  }




  export type MedicalOpinionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicalOpinionWhereInput
    orderBy?: MedicalOpinionOrderByWithAggregationInput | MedicalOpinionOrderByWithAggregationInput[]
    by: MedicalOpinionScalarFieldEnum[] | MedicalOpinionScalarFieldEnum
    having?: MedicalOpinionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalOpinionCountAggregateInputType | true
    _avg?: MedicalOpinionAvgAggregateInputType
    _sum?: MedicalOpinionSumAggregateInputType
    _min?: MedicalOpinionMinAggregateInputType
    _max?: MedicalOpinionMaxAggregateInputType
  }

  export type MedicalOpinionGroupByOutputType = {
    id: string
    caseId: string
    professionalId: string
    content: string
    status: string
    version: number
    digitalSignature: string | null
    reviewedBy: string | null
    reviewedAt: Date | null
    publishedAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: MedicalOpinionCountAggregateOutputType | null
    _avg: MedicalOpinionAvgAggregateOutputType | null
    _sum: MedicalOpinionSumAggregateOutputType | null
    _min: MedicalOpinionMinAggregateOutputType | null
    _max: MedicalOpinionMaxAggregateOutputType | null
  }

  type GetMedicalOpinionGroupByPayload<T extends MedicalOpinionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalOpinionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalOpinionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalOpinionGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalOpinionGroupByOutputType[P]>
        }
      >
    >


  export type MedicalOpinionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    content?: boolean
    status?: boolean
    version?: boolean
    digitalSignature?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalOpinion"]>

  export type MedicalOpinionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    content?: boolean
    status?: boolean
    version?: boolean
    digitalSignature?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalOpinion"]>

  export type MedicalOpinionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    content?: boolean
    status?: boolean
    version?: boolean
    digitalSignature?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalOpinion"]>

  export type MedicalOpinionSelectScalar = {
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    content?: boolean
    status?: boolean
    version?: boolean
    digitalSignature?: boolean
    reviewedBy?: boolean
    reviewedAt?: boolean
    publishedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MedicalOpinionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "professionalId" | "content" | "status" | "version" | "digitalSignature" | "reviewedBy" | "reviewedAt" | "publishedAt" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["medicalOpinion"]>
  export type MedicalOpinionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type MedicalOpinionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type MedicalOpinionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }

  export type $MedicalOpinionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicalOpinion"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
      professional: Prisma.$MedicalProfessionalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      professionalId: string
      content: string
      status: string
      version: number
      digitalSignature: string | null
      reviewedBy: string | null
      reviewedAt: Date | null
      publishedAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["medicalOpinion"]>
    composites: {}
  }

  type MedicalOpinionGetPayload<S extends boolean | null | undefined | MedicalOpinionDefaultArgs> = $Result.GetResult<Prisma.$MedicalOpinionPayload, S>

  type MedicalOpinionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicalOpinionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicalOpinionCountAggregateInputType | true
    }

  export interface MedicalOpinionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalOpinion'], meta: { name: 'MedicalOpinion' } }
    /**
     * Find zero or one MedicalOpinion that matches the filter.
     * @param {MedicalOpinionFindUniqueArgs} args - Arguments to find a MedicalOpinion
     * @example
     * // Get one MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicalOpinionFindUniqueArgs>(args: SelectSubset<T, MedicalOpinionFindUniqueArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MedicalOpinion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicalOpinionFindUniqueOrThrowArgs} args - Arguments to find a MedicalOpinion
     * @example
     * // Get one MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicalOpinionFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicalOpinionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalOpinion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionFindFirstArgs} args - Arguments to find a MedicalOpinion
     * @example
     * // Get one MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicalOpinionFindFirstArgs>(args?: SelectSubset<T, MedicalOpinionFindFirstArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MedicalOpinion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionFindFirstOrThrowArgs} args - Arguments to find a MedicalOpinion
     * @example
     * // Get one MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicalOpinionFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicalOpinionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MedicalOpinions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalOpinions
     * const medicalOpinions = await prisma.medicalOpinion.findMany()
     * 
     * // Get first 10 MedicalOpinions
     * const medicalOpinions = await prisma.medicalOpinion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalOpinionWithIdOnly = await prisma.medicalOpinion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicalOpinionFindManyArgs>(args?: SelectSubset<T, MedicalOpinionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MedicalOpinion.
     * @param {MedicalOpinionCreateArgs} args - Arguments to create a MedicalOpinion.
     * @example
     * // Create one MedicalOpinion
     * const MedicalOpinion = await prisma.medicalOpinion.create({
     *   data: {
     *     // ... data to create a MedicalOpinion
     *   }
     * })
     * 
     */
    create<T extends MedicalOpinionCreateArgs>(args: SelectSubset<T, MedicalOpinionCreateArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MedicalOpinions.
     * @param {MedicalOpinionCreateManyArgs} args - Arguments to create many MedicalOpinions.
     * @example
     * // Create many MedicalOpinions
     * const medicalOpinion = await prisma.medicalOpinion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicalOpinionCreateManyArgs>(args?: SelectSubset<T, MedicalOpinionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicalOpinions and returns the data saved in the database.
     * @param {MedicalOpinionCreateManyAndReturnArgs} args - Arguments to create many MedicalOpinions.
     * @example
     * // Create many MedicalOpinions
     * const medicalOpinion = await prisma.medicalOpinion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicalOpinions and only return the `id`
     * const medicalOpinionWithIdOnly = await prisma.medicalOpinion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicalOpinionCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicalOpinionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MedicalOpinion.
     * @param {MedicalOpinionDeleteArgs} args - Arguments to delete one MedicalOpinion.
     * @example
     * // Delete one MedicalOpinion
     * const MedicalOpinion = await prisma.medicalOpinion.delete({
     *   where: {
     *     // ... filter to delete one MedicalOpinion
     *   }
     * })
     * 
     */
    delete<T extends MedicalOpinionDeleteArgs>(args: SelectSubset<T, MedicalOpinionDeleteArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MedicalOpinion.
     * @param {MedicalOpinionUpdateArgs} args - Arguments to update one MedicalOpinion.
     * @example
     * // Update one MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicalOpinionUpdateArgs>(args: SelectSubset<T, MedicalOpinionUpdateArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MedicalOpinions.
     * @param {MedicalOpinionDeleteManyArgs} args - Arguments to filter MedicalOpinions to delete.
     * @example
     * // Delete a few MedicalOpinions
     * const { count } = await prisma.medicalOpinion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicalOpinionDeleteManyArgs>(args?: SelectSubset<T, MedicalOpinionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalOpinions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalOpinions
     * const medicalOpinion = await prisma.medicalOpinion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicalOpinionUpdateManyArgs>(args: SelectSubset<T, MedicalOpinionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalOpinions and returns the data updated in the database.
     * @param {MedicalOpinionUpdateManyAndReturnArgs} args - Arguments to update many MedicalOpinions.
     * @example
     * // Update many MedicalOpinions
     * const medicalOpinion = await prisma.medicalOpinion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MedicalOpinions and only return the `id`
     * const medicalOpinionWithIdOnly = await prisma.medicalOpinion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicalOpinionUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicalOpinionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MedicalOpinion.
     * @param {MedicalOpinionUpsertArgs} args - Arguments to update or create a MedicalOpinion.
     * @example
     * // Update or create a MedicalOpinion
     * const medicalOpinion = await prisma.medicalOpinion.upsert({
     *   create: {
     *     // ... data to create a MedicalOpinion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalOpinion we want to update
     *   }
     * })
     */
    upsert<T extends MedicalOpinionUpsertArgs>(args: SelectSubset<T, MedicalOpinionUpsertArgs<ExtArgs>>): Prisma__MedicalOpinionClient<$Result.GetResult<Prisma.$MedicalOpinionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MedicalOpinions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionCountArgs} args - Arguments to filter MedicalOpinions to count.
     * @example
     * // Count the number of MedicalOpinions
     * const count = await prisma.medicalOpinion.count({
     *   where: {
     *     // ... the filter for the MedicalOpinions we want to count
     *   }
     * })
    **/
    count<T extends MedicalOpinionCountArgs>(
      args?: Subset<T, MedicalOpinionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalOpinionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalOpinion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalOpinionAggregateArgs>(args: Subset<T, MedicalOpinionAggregateArgs>): Prisma.PrismaPromise<GetMedicalOpinionAggregateType<T>>

    /**
     * Group by MedicalOpinion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalOpinionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalOpinionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalOpinionGroupByArgs['orderBy'] }
        : { orderBy?: MedicalOpinionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalOpinionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalOpinionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalOpinion model
   */
  readonly fields: MedicalOpinionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalOpinion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalOpinionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professional<T extends MedicalProfessionalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessionalDefaultArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicalOpinion model
   */
  interface MedicalOpinionFieldRefs {
    readonly id: FieldRef<"MedicalOpinion", 'String'>
    readonly caseId: FieldRef<"MedicalOpinion", 'String'>
    readonly professionalId: FieldRef<"MedicalOpinion", 'String'>
    readonly content: FieldRef<"MedicalOpinion", 'String'>
    readonly status: FieldRef<"MedicalOpinion", 'String'>
    readonly version: FieldRef<"MedicalOpinion", 'Int'>
    readonly digitalSignature: FieldRef<"MedicalOpinion", 'String'>
    readonly reviewedBy: FieldRef<"MedicalOpinion", 'String'>
    readonly reviewedAt: FieldRef<"MedicalOpinion", 'DateTime'>
    readonly publishedAt: FieldRef<"MedicalOpinion", 'DateTime'>
    readonly metadata: FieldRef<"MedicalOpinion", 'Json'>
    readonly createdAt: FieldRef<"MedicalOpinion", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalOpinion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MedicalOpinion findUnique
   */
  export type MedicalOpinionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter, which MedicalOpinion to fetch.
     */
    where: MedicalOpinionWhereUniqueInput
  }

  /**
   * MedicalOpinion findUniqueOrThrow
   */
  export type MedicalOpinionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter, which MedicalOpinion to fetch.
     */
    where: MedicalOpinionWhereUniqueInput
  }

  /**
   * MedicalOpinion findFirst
   */
  export type MedicalOpinionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter, which MedicalOpinion to fetch.
     */
    where?: MedicalOpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalOpinions to fetch.
     */
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalOpinions.
     */
    cursor?: MedicalOpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalOpinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalOpinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalOpinions.
     */
    distinct?: MedicalOpinionScalarFieldEnum | MedicalOpinionScalarFieldEnum[]
  }

  /**
   * MedicalOpinion findFirstOrThrow
   */
  export type MedicalOpinionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter, which MedicalOpinion to fetch.
     */
    where?: MedicalOpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalOpinions to fetch.
     */
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalOpinions.
     */
    cursor?: MedicalOpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalOpinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalOpinions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalOpinions.
     */
    distinct?: MedicalOpinionScalarFieldEnum | MedicalOpinionScalarFieldEnum[]
  }

  /**
   * MedicalOpinion findMany
   */
  export type MedicalOpinionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter, which MedicalOpinions to fetch.
     */
    where?: MedicalOpinionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalOpinions to fetch.
     */
    orderBy?: MedicalOpinionOrderByWithRelationInput | MedicalOpinionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalOpinions.
     */
    cursor?: MedicalOpinionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalOpinions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalOpinions.
     */
    skip?: number
    distinct?: MedicalOpinionScalarFieldEnum | MedicalOpinionScalarFieldEnum[]
  }

  /**
   * MedicalOpinion create
   */
  export type MedicalOpinionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalOpinion.
     */
    data: XOR<MedicalOpinionCreateInput, MedicalOpinionUncheckedCreateInput>
  }

  /**
   * MedicalOpinion createMany
   */
  export type MedicalOpinionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalOpinions.
     */
    data: MedicalOpinionCreateManyInput | MedicalOpinionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MedicalOpinion createManyAndReturn
   */
  export type MedicalOpinionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * The data used to create many MedicalOpinions.
     */
    data: MedicalOpinionCreateManyInput | MedicalOpinionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalOpinion update
   */
  export type MedicalOpinionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalOpinion.
     */
    data: XOR<MedicalOpinionUpdateInput, MedicalOpinionUncheckedUpdateInput>
    /**
     * Choose, which MedicalOpinion to update.
     */
    where: MedicalOpinionWhereUniqueInput
  }

  /**
   * MedicalOpinion updateMany
   */
  export type MedicalOpinionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalOpinions.
     */
    data: XOR<MedicalOpinionUpdateManyMutationInput, MedicalOpinionUncheckedUpdateManyInput>
    /**
     * Filter which MedicalOpinions to update
     */
    where?: MedicalOpinionWhereInput
    /**
     * Limit how many MedicalOpinions to update.
     */
    limit?: number
  }

  /**
   * MedicalOpinion updateManyAndReturn
   */
  export type MedicalOpinionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * The data used to update MedicalOpinions.
     */
    data: XOR<MedicalOpinionUpdateManyMutationInput, MedicalOpinionUncheckedUpdateManyInput>
    /**
     * Filter which MedicalOpinions to update
     */
    where?: MedicalOpinionWhereInput
    /**
     * Limit how many MedicalOpinions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicalOpinion upsert
   */
  export type MedicalOpinionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalOpinion to update in case it exists.
     */
    where: MedicalOpinionWhereUniqueInput
    /**
     * In case the MedicalOpinion found by the `where` argument doesn't exist, create a new MedicalOpinion with this data.
     */
    create: XOR<MedicalOpinionCreateInput, MedicalOpinionUncheckedCreateInput>
    /**
     * In case the MedicalOpinion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalOpinionUpdateInput, MedicalOpinionUncheckedUpdateInput>
  }

  /**
   * MedicalOpinion delete
   */
  export type MedicalOpinionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
    /**
     * Filter which MedicalOpinion to delete.
     */
    where: MedicalOpinionWhereUniqueInput
  }

  /**
   * MedicalOpinion deleteMany
   */
  export type MedicalOpinionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalOpinions to delete
     */
    where?: MedicalOpinionWhereInput
    /**
     * Limit how many MedicalOpinions to delete.
     */
    limit?: number
  }

  /**
   * MedicalOpinion without action
   */
  export type MedicalOpinionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalOpinion
     */
    select?: MedicalOpinionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MedicalOpinion
     */
    omit?: MedicalOpinionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicalOpinionInclude<ExtArgs> | null
  }


  /**
   * Model ProfessionalPayment
   */

  export type AggregateProfessionalPayment = {
    _count: ProfessionalPaymentCountAggregateOutputType | null
    _avg: ProfessionalPaymentAvgAggregateOutputType | null
    _sum: ProfessionalPaymentSumAggregateOutputType | null
    _min: ProfessionalPaymentMinAggregateOutputType | null
    _max: ProfessionalPaymentMaxAggregateOutputType | null
  }

  export type ProfessionalPaymentAvgAggregateOutputType = {
    amount: number | null
  }

  export type ProfessionalPaymentSumAggregateOutputType = {
    amount: number | null
  }

  export type ProfessionalPaymentMinAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    paymentMethod: string | null
    transactionId: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalPaymentMaxAggregateOutputType = {
    id: string | null
    caseId: string | null
    professionalId: string | null
    amount: number | null
    currency: string | null
    status: string | null
    paymentMethod: string | null
    transactionId: string | null
    processedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalPaymentCountAggregateOutputType = {
    id: number
    caseId: number
    professionalId: number
    amount: number
    currency: number
    status: number
    paymentMethod: number
    transactionId: number
    processedAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionalPaymentAvgAggregateInputType = {
    amount?: true
  }

  export type ProfessionalPaymentSumAggregateInputType = {
    amount?: true
  }

  export type ProfessionalPaymentMinAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    amount?: true
    currency?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalPaymentMaxAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    amount?: true
    currency?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    processedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalPaymentCountAggregateInputType = {
    id?: true
    caseId?: true
    professionalId?: true
    amount?: true
    currency?: true
    status?: true
    paymentMethod?: true
    transactionId?: true
    processedAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionalPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalPayment to aggregate.
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalPayments to fetch.
     */
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalPayments
    **/
    _count?: true | ProfessionalPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionalPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionalPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalPaymentMaxAggregateInputType
  }

  export type GetProfessionalPaymentAggregateType<T extends ProfessionalPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalPayment[P]>
      : GetScalarType<T[P], AggregateProfessionalPayment[P]>
  }




  export type ProfessionalPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalPaymentWhereInput
    orderBy?: ProfessionalPaymentOrderByWithAggregationInput | ProfessionalPaymentOrderByWithAggregationInput[]
    by: ProfessionalPaymentScalarFieldEnum[] | ProfessionalPaymentScalarFieldEnum
    having?: ProfessionalPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalPaymentCountAggregateInputType | true
    _avg?: ProfessionalPaymentAvgAggregateInputType
    _sum?: ProfessionalPaymentSumAggregateInputType
    _min?: ProfessionalPaymentMinAggregateInputType
    _max?: ProfessionalPaymentMaxAggregateInputType
  }

  export type ProfessionalPaymentGroupByOutputType = {
    id: string
    caseId: string
    professionalId: string
    amount: number
    currency: string
    status: string
    paymentMethod: string | null
    transactionId: string | null
    processedAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: ProfessionalPaymentCountAggregateOutputType | null
    _avg: ProfessionalPaymentAvgAggregateOutputType | null
    _sum: ProfessionalPaymentSumAggregateOutputType | null
    _min: ProfessionalPaymentMinAggregateOutputType | null
    _max: ProfessionalPaymentMaxAggregateOutputType | null
  }

  type GetProfessionalPaymentGroupByPayload<T extends ProfessionalPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalPaymentGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    processedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalPayment"]>

  export type ProfessionalPaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    processedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalPayment"]>

  export type ProfessionalPaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    processedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalPayment"]>

  export type ProfessionalPaymentSelectScalar = {
    id?: boolean
    caseId?: boolean
    professionalId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    paymentMethod?: boolean
    transactionId?: boolean
    processedAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionalPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "caseId" | "professionalId" | "amount" | "currency" | "status" | "paymentMethod" | "transactionId" | "processedAt" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["professionalPayment"]>
  export type ProfessionalPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type ProfessionalPaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }
  export type ProfessionalPaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    case?: boolean | MedicalCaseDefaultArgs<ExtArgs>
    professional?: boolean | MedicalProfessionalDefaultArgs<ExtArgs>
  }

  export type $ProfessionalPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalPayment"
    objects: {
      case: Prisma.$MedicalCasePayload<ExtArgs>
      professional: Prisma.$MedicalProfessionalPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      caseId: string
      professionalId: string
      amount: number
      currency: string
      status: string
      paymentMethod: string | null
      transactionId: string | null
      processedAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professionalPayment"]>
    composites: {}
  }

  type ProfessionalPaymentGetPayload<S extends boolean | null | undefined | ProfessionalPaymentDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalPaymentPayload, S>

  type ProfessionalPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionalPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalPaymentCountAggregateInputType | true
    }

  export interface ProfessionalPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalPayment'], meta: { name: 'ProfessionalPayment' } }
    /**
     * Find zero or one ProfessionalPayment that matches the filter.
     * @param {ProfessionalPaymentFindUniqueArgs} args - Arguments to find a ProfessionalPayment
     * @example
     * // Get one ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalPaymentFindUniqueArgs>(args: SelectSubset<T, ProfessionalPaymentFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionalPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionalPaymentFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalPayment
     * @example
     * // Get one ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentFindFirstArgs} args - Arguments to find a ProfessionalPayment
     * @example
     * // Get one ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalPaymentFindFirstArgs>(args?: SelectSubset<T, ProfessionalPaymentFindFirstArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentFindFirstOrThrowArgs} args - Arguments to find a ProfessionalPayment
     * @example
     * // Get one ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionalPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalPayments
     * const professionalPayments = await prisma.professionalPayment.findMany()
     * 
     * // Get first 10 ProfessionalPayments
     * const professionalPayments = await prisma.professionalPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalPaymentWithIdOnly = await prisma.professionalPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalPaymentFindManyArgs>(args?: SelectSubset<T, ProfessionalPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionalPayment.
     * @param {ProfessionalPaymentCreateArgs} args - Arguments to create a ProfessionalPayment.
     * @example
     * // Create one ProfessionalPayment
     * const ProfessionalPayment = await prisma.professionalPayment.create({
     *   data: {
     *     // ... data to create a ProfessionalPayment
     *   }
     * })
     * 
     */
    create<T extends ProfessionalPaymentCreateArgs>(args: SelectSubset<T, ProfessionalPaymentCreateArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionalPayments.
     * @param {ProfessionalPaymentCreateManyArgs} args - Arguments to create many ProfessionalPayments.
     * @example
     * // Create many ProfessionalPayments
     * const professionalPayment = await prisma.professionalPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalPaymentCreateManyArgs>(args?: SelectSubset<T, ProfessionalPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionalPayments and returns the data saved in the database.
     * @param {ProfessionalPaymentCreateManyAndReturnArgs} args - Arguments to create many ProfessionalPayments.
     * @example
     * // Create many ProfessionalPayments
     * const professionalPayment = await prisma.professionalPayment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionalPayments and only return the `id`
     * const professionalPaymentWithIdOnly = await prisma.professionalPayment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalPaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalPaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionalPayment.
     * @param {ProfessionalPaymentDeleteArgs} args - Arguments to delete one ProfessionalPayment.
     * @example
     * // Delete one ProfessionalPayment
     * const ProfessionalPayment = await prisma.professionalPayment.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalPayment
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalPaymentDeleteArgs>(args: SelectSubset<T, ProfessionalPaymentDeleteArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionalPayment.
     * @param {ProfessionalPaymentUpdateArgs} args - Arguments to update one ProfessionalPayment.
     * @example
     * // Update one ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalPaymentUpdateArgs>(args: SelectSubset<T, ProfessionalPaymentUpdateArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionalPayments.
     * @param {ProfessionalPaymentDeleteManyArgs} args - Arguments to filter ProfessionalPayments to delete.
     * @example
     * // Delete a few ProfessionalPayments
     * const { count } = await prisma.professionalPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalPaymentDeleteManyArgs>(args?: SelectSubset<T, ProfessionalPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalPayments
     * const professionalPayment = await prisma.professionalPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalPaymentUpdateManyArgs>(args: SelectSubset<T, ProfessionalPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalPayments and returns the data updated in the database.
     * @param {ProfessionalPaymentUpdateManyAndReturnArgs} args - Arguments to update many ProfessionalPayments.
     * @example
     * // Update many ProfessionalPayments
     * const professionalPayment = await prisma.professionalPayment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionalPayments and only return the `id`
     * const professionalPaymentWithIdOnly = await prisma.professionalPayment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionalPaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionalPaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionalPayment.
     * @param {ProfessionalPaymentUpsertArgs} args - Arguments to update or create a ProfessionalPayment.
     * @example
     * // Update or create a ProfessionalPayment
     * const professionalPayment = await prisma.professionalPayment.upsert({
     *   create: {
     *     // ... data to create a ProfessionalPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalPayment we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalPaymentUpsertArgs>(args: SelectSubset<T, ProfessionalPaymentUpsertArgs<ExtArgs>>): Prisma__ProfessionalPaymentClient<$Result.GetResult<Prisma.$ProfessionalPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionalPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentCountArgs} args - Arguments to filter ProfessionalPayments to count.
     * @example
     * // Count the number of ProfessionalPayments
     * const count = await prisma.professionalPayment.count({
     *   where: {
     *     // ... the filter for the ProfessionalPayments we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalPaymentCountArgs>(
      args?: Subset<T, ProfessionalPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalPaymentAggregateArgs>(args: Subset<T, ProfessionalPaymentAggregateArgs>): Prisma.PrismaPromise<GetProfessionalPaymentAggregateType<T>>

    /**
     * Group by ProfessionalPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalPaymentGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalPayment model
   */
  readonly fields: ProfessionalPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    case<T extends MedicalCaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalCaseDefaultArgs<ExtArgs>>): Prisma__MedicalCaseClient<$Result.GetResult<Prisma.$MedicalCasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professional<T extends MedicalProfessionalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicalProfessionalDefaultArgs<ExtArgs>>): Prisma__MedicalProfessionalClient<$Result.GetResult<Prisma.$MedicalProfessionalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionalPayment model
   */
  interface ProfessionalPaymentFieldRefs {
    readonly id: FieldRef<"ProfessionalPayment", 'String'>
    readonly caseId: FieldRef<"ProfessionalPayment", 'String'>
    readonly professionalId: FieldRef<"ProfessionalPayment", 'String'>
    readonly amount: FieldRef<"ProfessionalPayment", 'Float'>
    readonly currency: FieldRef<"ProfessionalPayment", 'String'>
    readonly status: FieldRef<"ProfessionalPayment", 'String'>
    readonly paymentMethod: FieldRef<"ProfessionalPayment", 'String'>
    readonly transactionId: FieldRef<"ProfessionalPayment", 'String'>
    readonly processedAt: FieldRef<"ProfessionalPayment", 'DateTime'>
    readonly metadata: FieldRef<"ProfessionalPayment", 'Json'>
    readonly createdAt: FieldRef<"ProfessionalPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionalPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionalPayment findUnique
   */
  export type ProfessionalPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalPayment to fetch.
     */
    where: ProfessionalPaymentWhereUniqueInput
  }

  /**
   * ProfessionalPayment findUniqueOrThrow
   */
  export type ProfessionalPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalPayment to fetch.
     */
    where: ProfessionalPaymentWhereUniqueInput
  }

  /**
   * ProfessionalPayment findFirst
   */
  export type ProfessionalPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalPayment to fetch.
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalPayments to fetch.
     */
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalPayments.
     */
    cursor?: ProfessionalPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalPayments.
     */
    distinct?: ProfessionalPaymentScalarFieldEnum | ProfessionalPaymentScalarFieldEnum[]
  }

  /**
   * ProfessionalPayment findFirstOrThrow
   */
  export type ProfessionalPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalPayment to fetch.
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalPayments to fetch.
     */
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalPayments.
     */
    cursor?: ProfessionalPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalPayments.
     */
    distinct?: ProfessionalPaymentScalarFieldEnum | ProfessionalPaymentScalarFieldEnum[]
  }

  /**
   * ProfessionalPayment findMany
   */
  export type ProfessionalPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalPayments to fetch.
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalPayments to fetch.
     */
    orderBy?: ProfessionalPaymentOrderByWithRelationInput | ProfessionalPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalPayments.
     */
    cursor?: ProfessionalPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalPayments.
     */
    skip?: number
    distinct?: ProfessionalPaymentScalarFieldEnum | ProfessionalPaymentScalarFieldEnum[]
  }

  /**
   * ProfessionalPayment create
   */
  export type ProfessionalPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalPayment.
     */
    data: XOR<ProfessionalPaymentCreateInput, ProfessionalPaymentUncheckedCreateInput>
  }

  /**
   * ProfessionalPayment createMany
   */
  export type ProfessionalPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalPayments.
     */
    data: ProfessionalPaymentCreateManyInput | ProfessionalPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalPayment createManyAndReturn
   */
  export type ProfessionalPaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionalPayments.
     */
    data: ProfessionalPaymentCreateManyInput | ProfessionalPaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalPayment update
   */
  export type ProfessionalPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalPayment.
     */
    data: XOR<ProfessionalPaymentUpdateInput, ProfessionalPaymentUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalPayment to update.
     */
    where: ProfessionalPaymentWhereUniqueInput
  }

  /**
   * ProfessionalPayment updateMany
   */
  export type ProfessionalPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalPayments.
     */
    data: XOR<ProfessionalPaymentUpdateManyMutationInput, ProfessionalPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalPayments to update
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * Limit how many ProfessionalPayments to update.
     */
    limit?: number
  }

  /**
   * ProfessionalPayment updateManyAndReturn
   */
  export type ProfessionalPaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionalPayments.
     */
    data: XOR<ProfessionalPaymentUpdateManyMutationInput, ProfessionalPaymentUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalPayments to update
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * Limit how many ProfessionalPayments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProfessionalPayment upsert
   */
  export type ProfessionalPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalPayment to update in case it exists.
     */
    where: ProfessionalPaymentWhereUniqueInput
    /**
     * In case the ProfessionalPayment found by the `where` argument doesn't exist, create a new ProfessionalPayment with this data.
     */
    create: XOR<ProfessionalPaymentCreateInput, ProfessionalPaymentUncheckedCreateInput>
    /**
     * In case the ProfessionalPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalPaymentUpdateInput, ProfessionalPaymentUncheckedUpdateInput>
  }

  /**
   * ProfessionalPayment delete
   */
  export type ProfessionalPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalPayment to delete.
     */
    where: ProfessionalPaymentWhereUniqueInput
  }

  /**
   * ProfessionalPayment deleteMany
   */
  export type ProfessionalPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalPayments to delete
     */
    where?: ProfessionalPaymentWhereInput
    /**
     * Limit how many ProfessionalPayments to delete.
     */
    limit?: number
  }

  /**
   * ProfessionalPayment without action
   */
  export type ProfessionalPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalPayment
     */
    select?: ProfessionalPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalPayment
     */
    omit?: ProfessionalPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalPaymentInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    role: string | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    role: string | null
    lastLoginAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    email: number
    hashedPassword: number
    role: number
    permissions: number
    lastLoginAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    role?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    role?: true
    lastLoginAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    role?: true
    permissions?: true
    lastLoginAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    email: string
    hashedPassword: string
    role: string
    permissions: JsonValue | null
    lastLoginAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    role?: boolean
    permissions?: boolean
    lastLoginAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    role?: boolean
    permissions?: boolean
    lastLoginAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    role?: boolean
    permissions?: boolean
    lastLoginAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    role?: boolean
    permissions?: boolean
    lastLoginAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "hashedPassword" | "role" | "permissions" | "lastLoginAt" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["admin"]>

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      hashedPassword: string
      role: string
      permissions: Prisma.JsonValue | null
      lastLoginAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly hashedPassword: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'String'>
    readonly permissions: FieldRef<"Admin", 'Json'>
    readonly lastLoginAt: FieldRef<"Admin", 'DateTime'>
    readonly metadata: FieldRef<"Admin", 'Json'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
  }


  /**
   * Model ProfessionalCandidate
   */

  export type AggregateProfessionalCandidate = {
    _count: ProfessionalCandidateCountAggregateOutputType | null
    _avg: ProfessionalCandidateAvgAggregateOutputType | null
    _sum: ProfessionalCandidateSumAggregateOutputType | null
    _min: ProfessionalCandidateMinAggregateOutputType | null
    _max: ProfessionalCandidateMaxAggregateOutputType | null
  }

  export type ProfessionalCandidateAvgAggregateOutputType = {
    yearsIndependentPractice: number | null
    annualPatientLoad: number | null
    secondOpinionsGiven: number | null
    peerReviewedPublications: number | null
    competencyScore: number | null
  }

  export type ProfessionalCandidateSumAggregateOutputType = {
    yearsIndependentPractice: number | null
    annualPatientLoad: number | null
    secondOpinionsGiven: number | null
    peerReviewedPublications: number | null
    competencyScore: number | null
  }

  export type ProfessionalCandidateMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    nationality: string | null
    email: string | null
    phone: string | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    medicalDegreeUploaded: boolean | null
    residencyCompleted: boolean | null
    fellowshipCompleted: boolean | null
    boardCertificationNumber: string | null
    medicalLicenseNumber: string | null
    licenseCountry: string | null
    licenseState: string | null
    licenseExpiry: Date | null
    certificateGoodStanding: boolean | null
    yearsIndependentPractice: number | null
    currentAffiliation: string | null
    annualPatientLoad: number | null
    secondOpinionsGiven: number | null
    peerReviewedPublications: number | null
    clinicalTrialInvolvement: boolean | null
    clinicalTrialDetails: string | null
    conferencepresentations: boolean | null
    conferenceDetails: string | null
    teachingRoles: boolean | null
    teachingDetails: string | null
    awardsHonors: string | null
    leadershipRoles: string | null
    malpracticeInsurance: boolean | null
    noActiveDisciplinary: boolean | null
    dataProtectionAgreed: boolean | null
    competencyScore: number | null
    competencyLevel: $Enums.ProLevel | null
    applicationStatus: $Enums.CandidateStatus | null
    submittedAt: Date | null
    reviewStartedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    reviewNotes: string | null
    rejectionReason: string | null
    approvedToProfessionalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalCandidateMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    nationality: string | null
    email: string | null
    phone: string | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    medicalDegreeUploaded: boolean | null
    residencyCompleted: boolean | null
    fellowshipCompleted: boolean | null
    boardCertificationNumber: string | null
    medicalLicenseNumber: string | null
    licenseCountry: string | null
    licenseState: string | null
    licenseExpiry: Date | null
    certificateGoodStanding: boolean | null
    yearsIndependentPractice: number | null
    currentAffiliation: string | null
    annualPatientLoad: number | null
    secondOpinionsGiven: number | null
    peerReviewedPublications: number | null
    clinicalTrialInvolvement: boolean | null
    clinicalTrialDetails: string | null
    conferencepresentations: boolean | null
    conferenceDetails: string | null
    teachingRoles: boolean | null
    teachingDetails: string | null
    awardsHonors: string | null
    leadershipRoles: string | null
    malpracticeInsurance: boolean | null
    noActiveDisciplinary: boolean | null
    dataProtectionAgreed: boolean | null
    competencyScore: number | null
    competencyLevel: $Enums.ProLevel | null
    applicationStatus: $Enums.CandidateStatus | null
    submittedAt: Date | null
    reviewStartedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    reviewNotes: string | null
    rejectionReason: string | null
    approvedToProfessionalId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfessionalCandidateCountAggregateOutputType = {
    id: number
    firstName: number
    middleName: number
    lastName: number
    dateOfBirth: number
    nationality: number
    email: number
    phone: number
    emailVerified: number
    emailVerificationToken: number
    medicalDegreeUploaded: number
    residencyCompleted: number
    fellowshipCompleted: number
    boardCertificationNumber: number
    medicalLicenseNumber: number
    licenseCountry: number
    licenseState: number
    licenseExpiry: number
    certificateGoodStanding: number
    yearsIndependentPractice: number
    currentAffiliation: number
    subspecialties: number
    annualPatientLoad: number
    secondOpinionsGiven: number
    peerReviewedPublications: number
    clinicalTrialInvolvement: number
    clinicalTrialDetails: number
    conferencepresentations: number
    conferenceDetails: number
    teachingRoles: number
    teachingDetails: number
    oncologySocieties: number
    awardsHonors: number
    leadershipRoles: number
    professionalReferences: number
    malpracticeInsurance: number
    noActiveDisciplinary: number
    dataProtectionAgreed: number
    competencyScore: number
    competencyLevel: number
    scoreBreakdown: number
    applicationStatus: number
    submittedAt: number
    reviewStartedAt: number
    reviewedAt: number
    reviewedBy: number
    reviewNotes: number
    rejectionReason: number
    approvedToProfessionalId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfessionalCandidateAvgAggregateInputType = {
    yearsIndependentPractice?: true
    annualPatientLoad?: true
    secondOpinionsGiven?: true
    peerReviewedPublications?: true
    competencyScore?: true
  }

  export type ProfessionalCandidateSumAggregateInputType = {
    yearsIndependentPractice?: true
    annualPatientLoad?: true
    secondOpinionsGiven?: true
    peerReviewedPublications?: true
    competencyScore?: true
  }

  export type ProfessionalCandidateMinAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    nationality?: true
    email?: true
    phone?: true
    emailVerified?: true
    emailVerificationToken?: true
    medicalDegreeUploaded?: true
    residencyCompleted?: true
    fellowshipCompleted?: true
    boardCertificationNumber?: true
    medicalLicenseNumber?: true
    licenseCountry?: true
    licenseState?: true
    licenseExpiry?: true
    certificateGoodStanding?: true
    yearsIndependentPractice?: true
    currentAffiliation?: true
    annualPatientLoad?: true
    secondOpinionsGiven?: true
    peerReviewedPublications?: true
    clinicalTrialInvolvement?: true
    clinicalTrialDetails?: true
    conferencepresentations?: true
    conferenceDetails?: true
    teachingRoles?: true
    teachingDetails?: true
    awardsHonors?: true
    leadershipRoles?: true
    malpracticeInsurance?: true
    noActiveDisciplinary?: true
    dataProtectionAgreed?: true
    competencyScore?: true
    competencyLevel?: true
    applicationStatus?: true
    submittedAt?: true
    reviewStartedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNotes?: true
    rejectionReason?: true
    approvedToProfessionalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalCandidateMaxAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    nationality?: true
    email?: true
    phone?: true
    emailVerified?: true
    emailVerificationToken?: true
    medicalDegreeUploaded?: true
    residencyCompleted?: true
    fellowshipCompleted?: true
    boardCertificationNumber?: true
    medicalLicenseNumber?: true
    licenseCountry?: true
    licenseState?: true
    licenseExpiry?: true
    certificateGoodStanding?: true
    yearsIndependentPractice?: true
    currentAffiliation?: true
    annualPatientLoad?: true
    secondOpinionsGiven?: true
    peerReviewedPublications?: true
    clinicalTrialInvolvement?: true
    clinicalTrialDetails?: true
    conferencepresentations?: true
    conferenceDetails?: true
    teachingRoles?: true
    teachingDetails?: true
    awardsHonors?: true
    leadershipRoles?: true
    malpracticeInsurance?: true
    noActiveDisciplinary?: true
    dataProtectionAgreed?: true
    competencyScore?: true
    competencyLevel?: true
    applicationStatus?: true
    submittedAt?: true
    reviewStartedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNotes?: true
    rejectionReason?: true
    approvedToProfessionalId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfessionalCandidateCountAggregateInputType = {
    id?: true
    firstName?: true
    middleName?: true
    lastName?: true
    dateOfBirth?: true
    nationality?: true
    email?: true
    phone?: true
    emailVerified?: true
    emailVerificationToken?: true
    medicalDegreeUploaded?: true
    residencyCompleted?: true
    fellowshipCompleted?: true
    boardCertificationNumber?: true
    medicalLicenseNumber?: true
    licenseCountry?: true
    licenseState?: true
    licenseExpiry?: true
    certificateGoodStanding?: true
    yearsIndependentPractice?: true
    currentAffiliation?: true
    subspecialties?: true
    annualPatientLoad?: true
    secondOpinionsGiven?: true
    peerReviewedPublications?: true
    clinicalTrialInvolvement?: true
    clinicalTrialDetails?: true
    conferencepresentations?: true
    conferenceDetails?: true
    teachingRoles?: true
    teachingDetails?: true
    oncologySocieties?: true
    awardsHonors?: true
    leadershipRoles?: true
    professionalReferences?: true
    malpracticeInsurance?: true
    noActiveDisciplinary?: true
    dataProtectionAgreed?: true
    competencyScore?: true
    competencyLevel?: true
    scoreBreakdown?: true
    applicationStatus?: true
    submittedAt?: true
    reviewStartedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    reviewNotes?: true
    rejectionReason?: true
    approvedToProfessionalId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfessionalCandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalCandidate to aggregate.
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalCandidates to fetch.
     */
    orderBy?: ProfessionalCandidateOrderByWithRelationInput | ProfessionalCandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfessionalCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalCandidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalCandidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfessionalCandidates
    **/
    _count?: true | ProfessionalCandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionalCandidateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionalCandidateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalCandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalCandidateMaxAggregateInputType
  }

  export type GetProfessionalCandidateAggregateType<T extends ProfessionalCandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionalCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionalCandidate[P]>
      : GetScalarType<T[P], AggregateProfessionalCandidate[P]>
  }




  export type ProfessionalCandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfessionalCandidateWhereInput
    orderBy?: ProfessionalCandidateOrderByWithAggregationInput | ProfessionalCandidateOrderByWithAggregationInput[]
    by: ProfessionalCandidateScalarFieldEnum[] | ProfessionalCandidateScalarFieldEnum
    having?: ProfessionalCandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalCandidateCountAggregateInputType | true
    _avg?: ProfessionalCandidateAvgAggregateInputType
    _sum?: ProfessionalCandidateSumAggregateInputType
    _min?: ProfessionalCandidateMinAggregateInputType
    _max?: ProfessionalCandidateMaxAggregateInputType
  }

  export type ProfessionalCandidateGroupByOutputType = {
    id: string
    firstName: string
    middleName: string | null
    lastName: string
    dateOfBirth: Date
    nationality: string
    email: string
    phone: string | null
    emailVerified: boolean
    emailVerificationToken: string | null
    medicalDegreeUploaded: boolean
    residencyCompleted: boolean
    fellowshipCompleted: boolean
    boardCertificationNumber: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState: string | null
    licenseExpiry: Date
    certificateGoodStanding: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties: JsonValue | null
    annualPatientLoad: number | null
    secondOpinionsGiven: number | null
    peerReviewedPublications: number
    clinicalTrialInvolvement: boolean
    clinicalTrialDetails: string | null
    conferencepresentations: boolean
    conferenceDetails: string | null
    teachingRoles: boolean
    teachingDetails: string | null
    oncologySocieties: JsonValue | null
    awardsHonors: string | null
    leadershipRoles: string | null
    professionalReferences: JsonValue | null
    malpracticeInsurance: boolean
    noActiveDisciplinary: boolean
    dataProtectionAgreed: boolean
    competencyScore: number | null
    competencyLevel: $Enums.ProLevel | null
    scoreBreakdown: JsonValue | null
    applicationStatus: $Enums.CandidateStatus
    submittedAt: Date | null
    reviewStartedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    reviewNotes: string | null
    rejectionReason: string | null
    approvedToProfessionalId: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProfessionalCandidateCountAggregateOutputType | null
    _avg: ProfessionalCandidateAvgAggregateOutputType | null
    _sum: ProfessionalCandidateSumAggregateOutputType | null
    _min: ProfessionalCandidateMinAggregateOutputType | null
    _max: ProfessionalCandidateMaxAggregateOutputType | null
  }

  type GetProfessionalCandidateGroupByPayload<T extends ProfessionalCandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalCandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalCandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalCandidateGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalCandidateGroupByOutputType[P]>
        }
      >
    >


  export type ProfessionalCandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: boolean
    medicalLicenseNumber?: boolean
    licenseCountry?: boolean
    licenseState?: boolean
    licenseExpiry?: boolean
    certificateGoodStanding?: boolean
    yearsIndependentPractice?: boolean
    currentAffiliation?: boolean
    subspecialties?: boolean
    annualPatientLoad?: boolean
    secondOpinionsGiven?: boolean
    peerReviewedPublications?: boolean
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: boolean
    conferencepresentations?: boolean
    conferenceDetails?: boolean
    teachingRoles?: boolean
    teachingDetails?: boolean
    oncologySocieties?: boolean
    awardsHonors?: boolean
    leadershipRoles?: boolean
    professionalReferences?: boolean
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: boolean
    competencyLevel?: boolean
    scoreBreakdown?: boolean
    applicationStatus?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNotes?: boolean
    rejectionReason?: boolean
    approvedToProfessionalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documents?: boolean | ProfessionalCandidate$documentsArgs<ExtArgs>
    reviews?: boolean | ProfessionalCandidate$reviewsArgs<ExtArgs>
    _count?: boolean | ProfessionalCandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionalCandidate"]>

  export type ProfessionalCandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: boolean
    medicalLicenseNumber?: boolean
    licenseCountry?: boolean
    licenseState?: boolean
    licenseExpiry?: boolean
    certificateGoodStanding?: boolean
    yearsIndependentPractice?: boolean
    currentAffiliation?: boolean
    subspecialties?: boolean
    annualPatientLoad?: boolean
    secondOpinionsGiven?: boolean
    peerReviewedPublications?: boolean
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: boolean
    conferencepresentations?: boolean
    conferenceDetails?: boolean
    teachingRoles?: boolean
    teachingDetails?: boolean
    oncologySocieties?: boolean
    awardsHonors?: boolean
    leadershipRoles?: boolean
    professionalReferences?: boolean
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: boolean
    competencyLevel?: boolean
    scoreBreakdown?: boolean
    applicationStatus?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNotes?: boolean
    rejectionReason?: boolean
    approvedToProfessionalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["professionalCandidate"]>

  export type ProfessionalCandidateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: boolean
    medicalLicenseNumber?: boolean
    licenseCountry?: boolean
    licenseState?: boolean
    licenseExpiry?: boolean
    certificateGoodStanding?: boolean
    yearsIndependentPractice?: boolean
    currentAffiliation?: boolean
    subspecialties?: boolean
    annualPatientLoad?: boolean
    secondOpinionsGiven?: boolean
    peerReviewedPublications?: boolean
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: boolean
    conferencepresentations?: boolean
    conferenceDetails?: boolean
    teachingRoles?: boolean
    teachingDetails?: boolean
    oncologySocieties?: boolean
    awardsHonors?: boolean
    leadershipRoles?: boolean
    professionalReferences?: boolean
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: boolean
    competencyLevel?: boolean
    scoreBreakdown?: boolean
    applicationStatus?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNotes?: boolean
    rejectionReason?: boolean
    approvedToProfessionalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["professionalCandidate"]>

  export type ProfessionalCandidateSelectScalar = {
    id?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    email?: boolean
    phone?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: boolean
    medicalLicenseNumber?: boolean
    licenseCountry?: boolean
    licenseState?: boolean
    licenseExpiry?: boolean
    certificateGoodStanding?: boolean
    yearsIndependentPractice?: boolean
    currentAffiliation?: boolean
    subspecialties?: boolean
    annualPatientLoad?: boolean
    secondOpinionsGiven?: boolean
    peerReviewedPublications?: boolean
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: boolean
    conferencepresentations?: boolean
    conferenceDetails?: boolean
    teachingRoles?: boolean
    teachingDetails?: boolean
    oncologySocieties?: boolean
    awardsHonors?: boolean
    leadershipRoles?: boolean
    professionalReferences?: boolean
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: boolean
    competencyLevel?: boolean
    scoreBreakdown?: boolean
    applicationStatus?: boolean
    submittedAt?: boolean
    reviewStartedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    reviewNotes?: boolean
    rejectionReason?: boolean
    approvedToProfessionalId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfessionalCandidateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "middleName" | "lastName" | "dateOfBirth" | "nationality" | "email" | "phone" | "emailVerified" | "emailVerificationToken" | "medicalDegreeUploaded" | "residencyCompleted" | "fellowshipCompleted" | "boardCertificationNumber" | "medicalLicenseNumber" | "licenseCountry" | "licenseState" | "licenseExpiry" | "certificateGoodStanding" | "yearsIndependentPractice" | "currentAffiliation" | "subspecialties" | "annualPatientLoad" | "secondOpinionsGiven" | "peerReviewedPublications" | "clinicalTrialInvolvement" | "clinicalTrialDetails" | "conferencepresentations" | "conferenceDetails" | "teachingRoles" | "teachingDetails" | "oncologySocieties" | "awardsHonors" | "leadershipRoles" | "professionalReferences" | "malpracticeInsurance" | "noActiveDisciplinary" | "dataProtectionAgreed" | "competencyScore" | "competencyLevel" | "scoreBreakdown" | "applicationStatus" | "submittedAt" | "reviewStartedAt" | "reviewedAt" | "reviewedBy" | "reviewNotes" | "rejectionReason" | "approvedToProfessionalId" | "createdAt" | "updatedAt", ExtArgs["result"]["professionalCandidate"]>
  export type ProfessionalCandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documents?: boolean | ProfessionalCandidate$documentsArgs<ExtArgs>
    reviews?: boolean | ProfessionalCandidate$reviewsArgs<ExtArgs>
    _count?: boolean | ProfessionalCandidateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProfessionalCandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProfessionalCandidateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProfessionalCandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfessionalCandidate"
    objects: {
      documents: Prisma.$CandidateDocumentPayload<ExtArgs>[]
      reviews: Prisma.$ApplicationReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      middleName: string | null
      lastName: string
      dateOfBirth: Date
      nationality: string
      email: string
      phone: string | null
      emailVerified: boolean
      emailVerificationToken: string | null
      medicalDegreeUploaded: boolean
      residencyCompleted: boolean
      fellowshipCompleted: boolean
      boardCertificationNumber: string | null
      medicalLicenseNumber: string
      licenseCountry: string
      licenseState: string | null
      licenseExpiry: Date
      certificateGoodStanding: boolean
      yearsIndependentPractice: number
      currentAffiliation: string
      subspecialties: Prisma.JsonValue | null
      annualPatientLoad: number | null
      secondOpinionsGiven: number | null
      peerReviewedPublications: number
      clinicalTrialInvolvement: boolean
      clinicalTrialDetails: string | null
      conferencepresentations: boolean
      conferenceDetails: string | null
      teachingRoles: boolean
      teachingDetails: string | null
      oncologySocieties: Prisma.JsonValue | null
      awardsHonors: string | null
      leadershipRoles: string | null
      professionalReferences: Prisma.JsonValue | null
      malpracticeInsurance: boolean
      noActiveDisciplinary: boolean
      dataProtectionAgreed: boolean
      competencyScore: number | null
      competencyLevel: $Enums.ProLevel | null
      scoreBreakdown: Prisma.JsonValue | null
      applicationStatus: $Enums.CandidateStatus
      submittedAt: Date | null
      reviewStartedAt: Date | null
      reviewedAt: Date | null
      reviewedBy: string | null
      reviewNotes: string | null
      rejectionReason: string | null
      approvedToProfessionalId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["professionalCandidate"]>
    composites: {}
  }

  type ProfessionalCandidateGetPayload<S extends boolean | null | undefined | ProfessionalCandidateDefaultArgs> = $Result.GetResult<Prisma.$ProfessionalCandidatePayload, S>

  type ProfessionalCandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfessionalCandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalCandidateCountAggregateInputType | true
    }

  export interface ProfessionalCandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfessionalCandidate'], meta: { name: 'ProfessionalCandidate' } }
    /**
     * Find zero or one ProfessionalCandidate that matches the filter.
     * @param {ProfessionalCandidateFindUniqueArgs} args - Arguments to find a ProfessionalCandidate
     * @example
     * // Get one ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfessionalCandidateFindUniqueArgs>(args: SelectSubset<T, ProfessionalCandidateFindUniqueArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfessionalCandidate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfessionalCandidateFindUniqueOrThrowArgs} args - Arguments to find a ProfessionalCandidate
     * @example
     * // Get one ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfessionalCandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfessionalCandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalCandidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateFindFirstArgs} args - Arguments to find a ProfessionalCandidate
     * @example
     * // Get one ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfessionalCandidateFindFirstArgs>(args?: SelectSubset<T, ProfessionalCandidateFindFirstArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfessionalCandidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateFindFirstOrThrowArgs} args - Arguments to find a ProfessionalCandidate
     * @example
     * // Get one ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfessionalCandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfessionalCandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfessionalCandidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfessionalCandidates
     * const professionalCandidates = await prisma.professionalCandidate.findMany()
     * 
     * // Get first 10 ProfessionalCandidates
     * const professionalCandidates = await prisma.professionalCandidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalCandidateWithIdOnly = await prisma.professionalCandidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfessionalCandidateFindManyArgs>(args?: SelectSubset<T, ProfessionalCandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfessionalCandidate.
     * @param {ProfessionalCandidateCreateArgs} args - Arguments to create a ProfessionalCandidate.
     * @example
     * // Create one ProfessionalCandidate
     * const ProfessionalCandidate = await prisma.professionalCandidate.create({
     *   data: {
     *     // ... data to create a ProfessionalCandidate
     *   }
     * })
     * 
     */
    create<T extends ProfessionalCandidateCreateArgs>(args: SelectSubset<T, ProfessionalCandidateCreateArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfessionalCandidates.
     * @param {ProfessionalCandidateCreateManyArgs} args - Arguments to create many ProfessionalCandidates.
     * @example
     * // Create many ProfessionalCandidates
     * const professionalCandidate = await prisma.professionalCandidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfessionalCandidateCreateManyArgs>(args?: SelectSubset<T, ProfessionalCandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProfessionalCandidates and returns the data saved in the database.
     * @param {ProfessionalCandidateCreateManyAndReturnArgs} args - Arguments to create many ProfessionalCandidates.
     * @example
     * // Create many ProfessionalCandidates
     * const professionalCandidate = await prisma.professionalCandidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProfessionalCandidates and only return the `id`
     * const professionalCandidateWithIdOnly = await prisma.professionalCandidate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfessionalCandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfessionalCandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProfessionalCandidate.
     * @param {ProfessionalCandidateDeleteArgs} args - Arguments to delete one ProfessionalCandidate.
     * @example
     * // Delete one ProfessionalCandidate
     * const ProfessionalCandidate = await prisma.professionalCandidate.delete({
     *   where: {
     *     // ... filter to delete one ProfessionalCandidate
     *   }
     * })
     * 
     */
    delete<T extends ProfessionalCandidateDeleteArgs>(args: SelectSubset<T, ProfessionalCandidateDeleteArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfessionalCandidate.
     * @param {ProfessionalCandidateUpdateArgs} args - Arguments to update one ProfessionalCandidate.
     * @example
     * // Update one ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfessionalCandidateUpdateArgs>(args: SelectSubset<T, ProfessionalCandidateUpdateArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfessionalCandidates.
     * @param {ProfessionalCandidateDeleteManyArgs} args - Arguments to filter ProfessionalCandidates to delete.
     * @example
     * // Delete a few ProfessionalCandidates
     * const { count } = await prisma.professionalCandidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfessionalCandidateDeleteManyArgs>(args?: SelectSubset<T, ProfessionalCandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalCandidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfessionalCandidates
     * const professionalCandidate = await prisma.professionalCandidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfessionalCandidateUpdateManyArgs>(args: SelectSubset<T, ProfessionalCandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfessionalCandidates and returns the data updated in the database.
     * @param {ProfessionalCandidateUpdateManyAndReturnArgs} args - Arguments to update many ProfessionalCandidates.
     * @example
     * // Update many ProfessionalCandidates
     * const professionalCandidate = await prisma.professionalCandidate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProfessionalCandidates and only return the `id`
     * const professionalCandidateWithIdOnly = await prisma.professionalCandidate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfessionalCandidateUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfessionalCandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProfessionalCandidate.
     * @param {ProfessionalCandidateUpsertArgs} args - Arguments to update or create a ProfessionalCandidate.
     * @example
     * // Update or create a ProfessionalCandidate
     * const professionalCandidate = await prisma.professionalCandidate.upsert({
     *   create: {
     *     // ... data to create a ProfessionalCandidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfessionalCandidate we want to update
     *   }
     * })
     */
    upsert<T extends ProfessionalCandidateUpsertArgs>(args: SelectSubset<T, ProfessionalCandidateUpsertArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfessionalCandidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateCountArgs} args - Arguments to filter ProfessionalCandidates to count.
     * @example
     * // Count the number of ProfessionalCandidates
     * const count = await prisma.professionalCandidate.count({
     *   where: {
     *     // ... the filter for the ProfessionalCandidates we want to count
     *   }
     * })
    **/
    count<T extends ProfessionalCandidateCountArgs>(
      args?: Subset<T, ProfessionalCandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalCandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfessionalCandidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalCandidateAggregateArgs>(args: Subset<T, ProfessionalCandidateAggregateArgs>): Prisma.PrismaPromise<GetProfessionalCandidateAggregateType<T>>

    /**
     * Group by ProfessionalCandidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalCandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfessionalCandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfessionalCandidateGroupByArgs['orderBy'] }
        : { orderBy?: ProfessionalCandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfessionalCandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfessionalCandidate model
   */
  readonly fields: ProfessionalCandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfessionalCandidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfessionalCandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documents<T extends ProfessionalCandidate$documentsArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalCandidate$documentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reviews<T extends ProfessionalCandidate$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalCandidate$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfessionalCandidate model
   */
  interface ProfessionalCandidateFieldRefs {
    readonly id: FieldRef<"ProfessionalCandidate", 'String'>
    readonly firstName: FieldRef<"ProfessionalCandidate", 'String'>
    readonly middleName: FieldRef<"ProfessionalCandidate", 'String'>
    readonly lastName: FieldRef<"ProfessionalCandidate", 'String'>
    readonly dateOfBirth: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly nationality: FieldRef<"ProfessionalCandidate", 'String'>
    readonly email: FieldRef<"ProfessionalCandidate", 'String'>
    readonly phone: FieldRef<"ProfessionalCandidate", 'String'>
    readonly emailVerified: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly emailVerificationToken: FieldRef<"ProfessionalCandidate", 'String'>
    readonly medicalDegreeUploaded: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly residencyCompleted: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly fellowshipCompleted: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly boardCertificationNumber: FieldRef<"ProfessionalCandidate", 'String'>
    readonly medicalLicenseNumber: FieldRef<"ProfessionalCandidate", 'String'>
    readonly licenseCountry: FieldRef<"ProfessionalCandidate", 'String'>
    readonly licenseState: FieldRef<"ProfessionalCandidate", 'String'>
    readonly licenseExpiry: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly certificateGoodStanding: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly yearsIndependentPractice: FieldRef<"ProfessionalCandidate", 'Int'>
    readonly currentAffiliation: FieldRef<"ProfessionalCandidate", 'String'>
    readonly subspecialties: FieldRef<"ProfessionalCandidate", 'Json'>
    readonly annualPatientLoad: FieldRef<"ProfessionalCandidate", 'Int'>
    readonly secondOpinionsGiven: FieldRef<"ProfessionalCandidate", 'Int'>
    readonly peerReviewedPublications: FieldRef<"ProfessionalCandidate", 'Int'>
    readonly clinicalTrialInvolvement: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly clinicalTrialDetails: FieldRef<"ProfessionalCandidate", 'String'>
    readonly conferencepresentations: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly conferenceDetails: FieldRef<"ProfessionalCandidate", 'String'>
    readonly teachingRoles: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly teachingDetails: FieldRef<"ProfessionalCandidate", 'String'>
    readonly oncologySocieties: FieldRef<"ProfessionalCandidate", 'Json'>
    readonly awardsHonors: FieldRef<"ProfessionalCandidate", 'String'>
    readonly leadershipRoles: FieldRef<"ProfessionalCandidate", 'String'>
    readonly professionalReferences: FieldRef<"ProfessionalCandidate", 'Json'>
    readonly malpracticeInsurance: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly noActiveDisciplinary: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly dataProtectionAgreed: FieldRef<"ProfessionalCandidate", 'Boolean'>
    readonly competencyScore: FieldRef<"ProfessionalCandidate", 'Float'>
    readonly competencyLevel: FieldRef<"ProfessionalCandidate", 'ProLevel'>
    readonly scoreBreakdown: FieldRef<"ProfessionalCandidate", 'Json'>
    readonly applicationStatus: FieldRef<"ProfessionalCandidate", 'CandidateStatus'>
    readonly submittedAt: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly reviewStartedAt: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly reviewedAt: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly reviewedBy: FieldRef<"ProfessionalCandidate", 'String'>
    readonly reviewNotes: FieldRef<"ProfessionalCandidate", 'String'>
    readonly rejectionReason: FieldRef<"ProfessionalCandidate", 'String'>
    readonly approvedToProfessionalId: FieldRef<"ProfessionalCandidate", 'String'>
    readonly createdAt: FieldRef<"ProfessionalCandidate", 'DateTime'>
    readonly updatedAt: FieldRef<"ProfessionalCandidate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProfessionalCandidate findUnique
   */
  export type ProfessionalCandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalCandidate to fetch.
     */
    where: ProfessionalCandidateWhereUniqueInput
  }

  /**
   * ProfessionalCandidate findUniqueOrThrow
   */
  export type ProfessionalCandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalCandidate to fetch.
     */
    where: ProfessionalCandidateWhereUniqueInput
  }

  /**
   * ProfessionalCandidate findFirst
   */
  export type ProfessionalCandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalCandidate to fetch.
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalCandidates to fetch.
     */
    orderBy?: ProfessionalCandidateOrderByWithRelationInput | ProfessionalCandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalCandidates.
     */
    cursor?: ProfessionalCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalCandidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalCandidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalCandidates.
     */
    distinct?: ProfessionalCandidateScalarFieldEnum | ProfessionalCandidateScalarFieldEnum[]
  }

  /**
   * ProfessionalCandidate findFirstOrThrow
   */
  export type ProfessionalCandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalCandidate to fetch.
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalCandidates to fetch.
     */
    orderBy?: ProfessionalCandidateOrderByWithRelationInput | ProfessionalCandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfessionalCandidates.
     */
    cursor?: ProfessionalCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalCandidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalCandidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfessionalCandidates.
     */
    distinct?: ProfessionalCandidateScalarFieldEnum | ProfessionalCandidateScalarFieldEnum[]
  }

  /**
   * ProfessionalCandidate findMany
   */
  export type ProfessionalCandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter, which ProfessionalCandidates to fetch.
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfessionalCandidates to fetch.
     */
    orderBy?: ProfessionalCandidateOrderByWithRelationInput | ProfessionalCandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfessionalCandidates.
     */
    cursor?: ProfessionalCandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfessionalCandidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfessionalCandidates.
     */
    skip?: number
    distinct?: ProfessionalCandidateScalarFieldEnum | ProfessionalCandidateScalarFieldEnum[]
  }

  /**
   * ProfessionalCandidate create
   */
  export type ProfessionalCandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfessionalCandidate.
     */
    data: XOR<ProfessionalCandidateCreateInput, ProfessionalCandidateUncheckedCreateInput>
  }

  /**
   * ProfessionalCandidate createMany
   */
  export type ProfessionalCandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfessionalCandidates.
     */
    data: ProfessionalCandidateCreateManyInput | ProfessionalCandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalCandidate createManyAndReturn
   */
  export type ProfessionalCandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * The data used to create many ProfessionalCandidates.
     */
    data: ProfessionalCandidateCreateManyInput | ProfessionalCandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfessionalCandidate update
   */
  export type ProfessionalCandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfessionalCandidate.
     */
    data: XOR<ProfessionalCandidateUpdateInput, ProfessionalCandidateUncheckedUpdateInput>
    /**
     * Choose, which ProfessionalCandidate to update.
     */
    where: ProfessionalCandidateWhereUniqueInput
  }

  /**
   * ProfessionalCandidate updateMany
   */
  export type ProfessionalCandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfessionalCandidates.
     */
    data: XOR<ProfessionalCandidateUpdateManyMutationInput, ProfessionalCandidateUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalCandidates to update
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * Limit how many ProfessionalCandidates to update.
     */
    limit?: number
  }

  /**
   * ProfessionalCandidate updateManyAndReturn
   */
  export type ProfessionalCandidateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * The data used to update ProfessionalCandidates.
     */
    data: XOR<ProfessionalCandidateUpdateManyMutationInput, ProfessionalCandidateUncheckedUpdateManyInput>
    /**
     * Filter which ProfessionalCandidates to update
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * Limit how many ProfessionalCandidates to update.
     */
    limit?: number
  }

  /**
   * ProfessionalCandidate upsert
   */
  export type ProfessionalCandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfessionalCandidate to update in case it exists.
     */
    where: ProfessionalCandidateWhereUniqueInput
    /**
     * In case the ProfessionalCandidate found by the `where` argument doesn't exist, create a new ProfessionalCandidate with this data.
     */
    create: XOR<ProfessionalCandidateCreateInput, ProfessionalCandidateUncheckedCreateInput>
    /**
     * In case the ProfessionalCandidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfessionalCandidateUpdateInput, ProfessionalCandidateUncheckedUpdateInput>
  }

  /**
   * ProfessionalCandidate delete
   */
  export type ProfessionalCandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
    /**
     * Filter which ProfessionalCandidate to delete.
     */
    where: ProfessionalCandidateWhereUniqueInput
  }

  /**
   * ProfessionalCandidate deleteMany
   */
  export type ProfessionalCandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfessionalCandidates to delete
     */
    where?: ProfessionalCandidateWhereInput
    /**
     * Limit how many ProfessionalCandidates to delete.
     */
    limit?: number
  }

  /**
   * ProfessionalCandidate.documents
   */
  export type ProfessionalCandidate$documentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    where?: CandidateDocumentWhereInput
    orderBy?: CandidateDocumentOrderByWithRelationInput | CandidateDocumentOrderByWithRelationInput[]
    cursor?: CandidateDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateDocumentScalarFieldEnum | CandidateDocumentScalarFieldEnum[]
  }

  /**
   * ProfessionalCandidate.reviews
   */
  export type ProfessionalCandidate$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    where?: ApplicationReviewWhereInput
    orderBy?: ApplicationReviewOrderByWithRelationInput | ApplicationReviewOrderByWithRelationInput[]
    cursor?: ApplicationReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationReviewScalarFieldEnum | ApplicationReviewScalarFieldEnum[]
  }

  /**
   * ProfessionalCandidate without action
   */
  export type ProfessionalCandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalCandidate
     */
    select?: ProfessionalCandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfessionalCandidate
     */
    omit?: ProfessionalCandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfessionalCandidateInclude<ExtArgs> | null
  }


  /**
   * Model CandidateDocument
   */

  export type AggregateCandidateDocument = {
    _count: CandidateDocumentCountAggregateOutputType | null
    _avg: CandidateDocumentAvgAggregateOutputType | null
    _sum: CandidateDocumentSumAggregateOutputType | null
    _min: CandidateDocumentMinAggregateOutputType | null
    _max: CandidateDocumentMaxAggregateOutputType | null
  }

  export type CandidateDocumentAvgAggregateOutputType = {
    size: number | null
  }

  export type CandidateDocumentSumAggregateOutputType = {
    size: number | null
  }

  export type CandidateDocumentMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    documentType: $Enums.DocumentType | null
    fileName: string | null
    originalName: string | null
    s3Key: string | null
    mimetype: string | null
    size: number | null
    checksum: string | null
    encrypted: boolean | null
    uploadedAt: Date | null
  }

  export type CandidateDocumentMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    documentType: $Enums.DocumentType | null
    fileName: string | null
    originalName: string | null
    s3Key: string | null
    mimetype: string | null
    size: number | null
    checksum: string | null
    encrypted: boolean | null
    uploadedAt: Date | null
  }

  export type CandidateDocumentCountAggregateOutputType = {
    id: number
    candidateId: number
    documentType: number
    fileName: number
    originalName: number
    s3Key: number
    mimetype: number
    size: number
    checksum: number
    encrypted: number
    uploadedAt: number
    _all: number
  }


  export type CandidateDocumentAvgAggregateInputType = {
    size?: true
  }

  export type CandidateDocumentSumAggregateInputType = {
    size?: true
  }

  export type CandidateDocumentMinAggregateInputType = {
    id?: true
    candidateId?: true
    documentType?: true
    fileName?: true
    originalName?: true
    s3Key?: true
    mimetype?: true
    size?: true
    checksum?: true
    encrypted?: true
    uploadedAt?: true
  }

  export type CandidateDocumentMaxAggregateInputType = {
    id?: true
    candidateId?: true
    documentType?: true
    fileName?: true
    originalName?: true
    s3Key?: true
    mimetype?: true
    size?: true
    checksum?: true
    encrypted?: true
    uploadedAt?: true
  }

  export type CandidateDocumentCountAggregateInputType = {
    id?: true
    candidateId?: true
    documentType?: true
    fileName?: true
    originalName?: true
    s3Key?: true
    mimetype?: true
    size?: true
    checksum?: true
    encrypted?: true
    uploadedAt?: true
    _all?: true
  }

  export type CandidateDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateDocument to aggregate.
     */
    where?: CandidateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateDocuments to fetch.
     */
    orderBy?: CandidateDocumentOrderByWithRelationInput | CandidateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateDocuments
    **/
    _count?: true | CandidateDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateDocumentMaxAggregateInputType
  }

  export type GetCandidateDocumentAggregateType<T extends CandidateDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateDocument[P]>
      : GetScalarType<T[P], AggregateCandidateDocument[P]>
  }




  export type CandidateDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateDocumentWhereInput
    orderBy?: CandidateDocumentOrderByWithAggregationInput | CandidateDocumentOrderByWithAggregationInput[]
    by: CandidateDocumentScalarFieldEnum[] | CandidateDocumentScalarFieldEnum
    having?: CandidateDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateDocumentCountAggregateInputType | true
    _avg?: CandidateDocumentAvgAggregateInputType
    _sum?: CandidateDocumentSumAggregateInputType
    _min?: CandidateDocumentMinAggregateInputType
    _max?: CandidateDocumentMaxAggregateInputType
  }

  export type CandidateDocumentGroupByOutputType = {
    id: string
    candidateId: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum: string | null
    encrypted: boolean
    uploadedAt: Date
    _count: CandidateDocumentCountAggregateOutputType | null
    _avg: CandidateDocumentAvgAggregateOutputType | null
    _sum: CandidateDocumentSumAggregateOutputType | null
    _min: CandidateDocumentMinAggregateOutputType | null
    _max: CandidateDocumentMaxAggregateOutputType | null
  }

  type GetCandidateDocumentGroupByPayload<T extends CandidateDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateDocumentGroupByOutputType[P]>
        }
      >
    >


  export type CandidateDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    documentType?: boolean
    fileName?: boolean
    originalName?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    checksum?: boolean
    encrypted?: boolean
    uploadedAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateDocument"]>

  export type CandidateDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    documentType?: boolean
    fileName?: boolean
    originalName?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    checksum?: boolean
    encrypted?: boolean
    uploadedAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateDocument"]>

  export type CandidateDocumentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    documentType?: boolean
    fileName?: boolean
    originalName?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    checksum?: boolean
    encrypted?: boolean
    uploadedAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateDocument"]>

  export type CandidateDocumentSelectScalar = {
    id?: boolean
    candidateId?: boolean
    documentType?: boolean
    fileName?: boolean
    originalName?: boolean
    s3Key?: boolean
    mimetype?: boolean
    size?: boolean
    checksum?: boolean
    encrypted?: boolean
    uploadedAt?: boolean
  }

  export type CandidateDocumentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateId" | "documentType" | "fileName" | "originalName" | "s3Key" | "mimetype" | "size" | "checksum" | "encrypted" | "uploadedAt", ExtArgs["result"]["candidateDocument"]>
  export type CandidateDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }
  export type CandidateDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }
  export type CandidateDocumentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }

  export type $CandidateDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidateDocument"
    objects: {
      candidate: Prisma.$ProfessionalCandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      documentType: $Enums.DocumentType
      fileName: string
      originalName: string
      s3Key: string
      mimetype: string
      size: number
      checksum: string | null
      encrypted: boolean
      uploadedAt: Date
    }, ExtArgs["result"]["candidateDocument"]>
    composites: {}
  }

  type CandidateDocumentGetPayload<S extends boolean | null | undefined | CandidateDocumentDefaultArgs> = $Result.GetResult<Prisma.$CandidateDocumentPayload, S>

  type CandidateDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateDocumentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateDocumentCountAggregateInputType | true
    }

  export interface CandidateDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidateDocument'], meta: { name: 'CandidateDocument' } }
    /**
     * Find zero or one CandidateDocument that matches the filter.
     * @param {CandidateDocumentFindUniqueArgs} args - Arguments to find a CandidateDocument
     * @example
     * // Get one CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateDocumentFindUniqueArgs>(args: SelectSubset<T, CandidateDocumentFindUniqueArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidateDocument that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateDocumentFindUniqueOrThrowArgs} args - Arguments to find a CandidateDocument
     * @example
     * // Get one CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentFindFirstArgs} args - Arguments to find a CandidateDocument
     * @example
     * // Get one CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateDocumentFindFirstArgs>(args?: SelectSubset<T, CandidateDocumentFindFirstArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentFindFirstOrThrowArgs} args - Arguments to find a CandidateDocument
     * @example
     * // Get one CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidateDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateDocuments
     * const candidateDocuments = await prisma.candidateDocument.findMany()
     * 
     * // Get first 10 CandidateDocuments
     * const candidateDocuments = await prisma.candidateDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateDocumentWithIdOnly = await prisma.candidateDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateDocumentFindManyArgs>(args?: SelectSubset<T, CandidateDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidateDocument.
     * @param {CandidateDocumentCreateArgs} args - Arguments to create a CandidateDocument.
     * @example
     * // Create one CandidateDocument
     * const CandidateDocument = await prisma.candidateDocument.create({
     *   data: {
     *     // ... data to create a CandidateDocument
     *   }
     * })
     * 
     */
    create<T extends CandidateDocumentCreateArgs>(args: SelectSubset<T, CandidateDocumentCreateArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidateDocuments.
     * @param {CandidateDocumentCreateManyArgs} args - Arguments to create many CandidateDocuments.
     * @example
     * // Create many CandidateDocuments
     * const candidateDocument = await prisma.candidateDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateDocumentCreateManyArgs>(args?: SelectSubset<T, CandidateDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidateDocuments and returns the data saved in the database.
     * @param {CandidateDocumentCreateManyAndReturnArgs} args - Arguments to create many CandidateDocuments.
     * @example
     * // Create many CandidateDocuments
     * const candidateDocument = await prisma.candidateDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidateDocuments and only return the `id`
     * const candidateDocumentWithIdOnly = await prisma.candidateDocument.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidateDocument.
     * @param {CandidateDocumentDeleteArgs} args - Arguments to delete one CandidateDocument.
     * @example
     * // Delete one CandidateDocument
     * const CandidateDocument = await prisma.candidateDocument.delete({
     *   where: {
     *     // ... filter to delete one CandidateDocument
     *   }
     * })
     * 
     */
    delete<T extends CandidateDocumentDeleteArgs>(args: SelectSubset<T, CandidateDocumentDeleteArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidateDocument.
     * @param {CandidateDocumentUpdateArgs} args - Arguments to update one CandidateDocument.
     * @example
     * // Update one CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateDocumentUpdateArgs>(args: SelectSubset<T, CandidateDocumentUpdateArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidateDocuments.
     * @param {CandidateDocumentDeleteManyArgs} args - Arguments to filter CandidateDocuments to delete.
     * @example
     * // Delete a few CandidateDocuments
     * const { count } = await prisma.candidateDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDocumentDeleteManyArgs>(args?: SelectSubset<T, CandidateDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateDocuments
     * const candidateDocument = await prisma.candidateDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateDocumentUpdateManyArgs>(args: SelectSubset<T, CandidateDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateDocuments and returns the data updated in the database.
     * @param {CandidateDocumentUpdateManyAndReturnArgs} args - Arguments to update many CandidateDocuments.
     * @example
     * // Update many CandidateDocuments
     * const candidateDocument = await prisma.candidateDocument.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidateDocuments and only return the `id`
     * const candidateDocumentWithIdOnly = await prisma.candidateDocument.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateDocumentUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateDocumentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidateDocument.
     * @param {CandidateDocumentUpsertArgs} args - Arguments to update or create a CandidateDocument.
     * @example
     * // Update or create a CandidateDocument
     * const candidateDocument = await prisma.candidateDocument.upsert({
     *   create: {
     *     // ... data to create a CandidateDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateDocument we want to update
     *   }
     * })
     */
    upsert<T extends CandidateDocumentUpsertArgs>(args: SelectSubset<T, CandidateDocumentUpsertArgs<ExtArgs>>): Prisma__CandidateDocumentClient<$Result.GetResult<Prisma.$CandidateDocumentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidateDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentCountArgs} args - Arguments to filter CandidateDocuments to count.
     * @example
     * // Count the number of CandidateDocuments
     * const count = await prisma.candidateDocument.count({
     *   where: {
     *     // ... the filter for the CandidateDocuments we want to count
     *   }
     * })
    **/
    count<T extends CandidateDocumentCountArgs>(
      args?: Subset<T, CandidateDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateDocumentAggregateArgs>(args: Subset<T, CandidateDocumentAggregateArgs>): Prisma.PrismaPromise<GetCandidateDocumentAggregateType<T>>

    /**
     * Group by CandidateDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateDocumentGroupByArgs['orderBy'] }
        : { orderBy?: CandidateDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidateDocument model
   */
  readonly fields: CandidateDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends ProfessionalCandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalCandidateDefaultArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidateDocument model
   */
  interface CandidateDocumentFieldRefs {
    readonly id: FieldRef<"CandidateDocument", 'String'>
    readonly candidateId: FieldRef<"CandidateDocument", 'String'>
    readonly documentType: FieldRef<"CandidateDocument", 'DocumentType'>
    readonly fileName: FieldRef<"CandidateDocument", 'String'>
    readonly originalName: FieldRef<"CandidateDocument", 'String'>
    readonly s3Key: FieldRef<"CandidateDocument", 'String'>
    readonly mimetype: FieldRef<"CandidateDocument", 'String'>
    readonly size: FieldRef<"CandidateDocument", 'Int'>
    readonly checksum: FieldRef<"CandidateDocument", 'String'>
    readonly encrypted: FieldRef<"CandidateDocument", 'Boolean'>
    readonly uploadedAt: FieldRef<"CandidateDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CandidateDocument findUnique
   */
  export type CandidateDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CandidateDocument to fetch.
     */
    where: CandidateDocumentWhereUniqueInput
  }

  /**
   * CandidateDocument findUniqueOrThrow
   */
  export type CandidateDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CandidateDocument to fetch.
     */
    where: CandidateDocumentWhereUniqueInput
  }

  /**
   * CandidateDocument findFirst
   */
  export type CandidateDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CandidateDocument to fetch.
     */
    where?: CandidateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateDocuments to fetch.
     */
    orderBy?: CandidateDocumentOrderByWithRelationInput | CandidateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateDocuments.
     */
    cursor?: CandidateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateDocuments.
     */
    distinct?: CandidateDocumentScalarFieldEnum | CandidateDocumentScalarFieldEnum[]
  }

  /**
   * CandidateDocument findFirstOrThrow
   */
  export type CandidateDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CandidateDocument to fetch.
     */
    where?: CandidateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateDocuments to fetch.
     */
    orderBy?: CandidateDocumentOrderByWithRelationInput | CandidateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateDocuments.
     */
    cursor?: CandidateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateDocuments.
     */
    distinct?: CandidateDocumentScalarFieldEnum | CandidateDocumentScalarFieldEnum[]
  }

  /**
   * CandidateDocument findMany
   */
  export type CandidateDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter, which CandidateDocuments to fetch.
     */
    where?: CandidateDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateDocuments to fetch.
     */
    orderBy?: CandidateDocumentOrderByWithRelationInput | CandidateDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateDocuments.
     */
    cursor?: CandidateDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateDocuments.
     */
    skip?: number
    distinct?: CandidateDocumentScalarFieldEnum | CandidateDocumentScalarFieldEnum[]
  }

  /**
   * CandidateDocument create
   */
  export type CandidateDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidateDocument.
     */
    data: XOR<CandidateDocumentCreateInput, CandidateDocumentUncheckedCreateInput>
  }

  /**
   * CandidateDocument createMany
   */
  export type CandidateDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidateDocuments.
     */
    data: CandidateDocumentCreateManyInput | CandidateDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidateDocument createManyAndReturn
   */
  export type CandidateDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * The data used to create many CandidateDocuments.
     */
    data: CandidateDocumentCreateManyInput | CandidateDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateDocument update
   */
  export type CandidateDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidateDocument.
     */
    data: XOR<CandidateDocumentUpdateInput, CandidateDocumentUncheckedUpdateInput>
    /**
     * Choose, which CandidateDocument to update.
     */
    where: CandidateDocumentWhereUniqueInput
  }

  /**
   * CandidateDocument updateMany
   */
  export type CandidateDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidateDocuments.
     */
    data: XOR<CandidateDocumentUpdateManyMutationInput, CandidateDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CandidateDocuments to update
     */
    where?: CandidateDocumentWhereInput
    /**
     * Limit how many CandidateDocuments to update.
     */
    limit?: number
  }

  /**
   * CandidateDocument updateManyAndReturn
   */
  export type CandidateDocumentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * The data used to update CandidateDocuments.
     */
    data: XOR<CandidateDocumentUpdateManyMutationInput, CandidateDocumentUncheckedUpdateManyInput>
    /**
     * Filter which CandidateDocuments to update
     */
    where?: CandidateDocumentWhereInput
    /**
     * Limit how many CandidateDocuments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateDocument upsert
   */
  export type CandidateDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidateDocument to update in case it exists.
     */
    where: CandidateDocumentWhereUniqueInput
    /**
     * In case the CandidateDocument found by the `where` argument doesn't exist, create a new CandidateDocument with this data.
     */
    create: XOR<CandidateDocumentCreateInput, CandidateDocumentUncheckedCreateInput>
    /**
     * In case the CandidateDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateDocumentUpdateInput, CandidateDocumentUncheckedUpdateInput>
  }

  /**
   * CandidateDocument delete
   */
  export type CandidateDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
    /**
     * Filter which CandidateDocument to delete.
     */
    where: CandidateDocumentWhereUniqueInput
  }

  /**
   * CandidateDocument deleteMany
   */
  export type CandidateDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateDocuments to delete
     */
    where?: CandidateDocumentWhereInput
    /**
     * Limit how many CandidateDocuments to delete.
     */
    limit?: number
  }

  /**
   * CandidateDocument without action
   */
  export type CandidateDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateDocument
     */
    select?: CandidateDocumentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateDocument
     */
    omit?: CandidateDocumentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateDocumentInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationReview
   */

  export type AggregateApplicationReview = {
    _count: ApplicationReviewCountAggregateOutputType | null
    _min: ApplicationReviewMinAggregateOutputType | null
    _max: ApplicationReviewMaxAggregateOutputType | null
  }

  export type ApplicationReviewMinAggregateOutputType = {
    id: string | null
    candidateId: string | null
    reviewerId: string | null
    decision: $Enums.ReviewDecision | null
    notes: string | null
    recommendedLevel: $Enums.ProLevel | null
    createdAt: Date | null
  }

  export type ApplicationReviewMaxAggregateOutputType = {
    id: string | null
    candidateId: string | null
    reviewerId: string | null
    decision: $Enums.ReviewDecision | null
    notes: string | null
    recommendedLevel: $Enums.ProLevel | null
    createdAt: Date | null
  }

  export type ApplicationReviewCountAggregateOutputType = {
    id: number
    candidateId: number
    reviewerId: number
    decision: number
    notes: number
    scoreAdjustment: number
    recommendedLevel: number
    createdAt: number
    _all: number
  }


  export type ApplicationReviewMinAggregateInputType = {
    id?: true
    candidateId?: true
    reviewerId?: true
    decision?: true
    notes?: true
    recommendedLevel?: true
    createdAt?: true
  }

  export type ApplicationReviewMaxAggregateInputType = {
    id?: true
    candidateId?: true
    reviewerId?: true
    decision?: true
    notes?: true
    recommendedLevel?: true
    createdAt?: true
  }

  export type ApplicationReviewCountAggregateInputType = {
    id?: true
    candidateId?: true
    reviewerId?: true
    decision?: true
    notes?: true
    scoreAdjustment?: true
    recommendedLevel?: true
    createdAt?: true
    _all?: true
  }

  export type ApplicationReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationReview to aggregate.
     */
    where?: ApplicationReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationReviews to fetch.
     */
    orderBy?: ApplicationReviewOrderByWithRelationInput | ApplicationReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationReviews
    **/
    _count?: true | ApplicationReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationReviewMaxAggregateInputType
  }

  export type GetApplicationReviewAggregateType<T extends ApplicationReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationReview[P]>
      : GetScalarType<T[P], AggregateApplicationReview[P]>
  }




  export type ApplicationReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationReviewWhereInput
    orderBy?: ApplicationReviewOrderByWithAggregationInput | ApplicationReviewOrderByWithAggregationInput[]
    by: ApplicationReviewScalarFieldEnum[] | ApplicationReviewScalarFieldEnum
    having?: ApplicationReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationReviewCountAggregateInputType | true
    _min?: ApplicationReviewMinAggregateInputType
    _max?: ApplicationReviewMaxAggregateInputType
  }

  export type ApplicationReviewGroupByOutputType = {
    id: string
    candidateId: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes: string | null
    scoreAdjustment: JsonValue | null
    recommendedLevel: $Enums.ProLevel | null
    createdAt: Date
    _count: ApplicationReviewCountAggregateOutputType | null
    _min: ApplicationReviewMinAggregateOutputType | null
    _max: ApplicationReviewMaxAggregateOutputType | null
  }

  type GetApplicationReviewGroupByPayload<T extends ApplicationReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationReviewGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    reviewerId?: boolean
    decision?: boolean
    notes?: boolean
    scoreAdjustment?: boolean
    recommendedLevel?: boolean
    createdAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationReview"]>

  export type ApplicationReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    reviewerId?: boolean
    decision?: boolean
    notes?: boolean
    scoreAdjustment?: boolean
    recommendedLevel?: boolean
    createdAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationReview"]>

  export type ApplicationReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateId?: boolean
    reviewerId?: boolean
    decision?: boolean
    notes?: boolean
    scoreAdjustment?: boolean
    recommendedLevel?: boolean
    createdAt?: boolean
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicationReview"]>

  export type ApplicationReviewSelectScalar = {
    id?: boolean
    candidateId?: boolean
    reviewerId?: boolean
    decision?: boolean
    notes?: boolean
    scoreAdjustment?: boolean
    recommendedLevel?: boolean
    createdAt?: boolean
  }

  export type ApplicationReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateId" | "reviewerId" | "decision" | "notes" | "scoreAdjustment" | "recommendedLevel" | "createdAt", ExtArgs["result"]["applicationReview"]>
  export type ApplicationReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }
  export type ApplicationReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }
  export type ApplicationReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidate?: boolean | ProfessionalCandidateDefaultArgs<ExtArgs>
  }

  export type $ApplicationReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationReview"
    objects: {
      candidate: Prisma.$ProfessionalCandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateId: string
      reviewerId: string
      decision: $Enums.ReviewDecision
      notes: string | null
      scoreAdjustment: Prisma.JsonValue | null
      recommendedLevel: $Enums.ProLevel | null
      createdAt: Date
    }, ExtArgs["result"]["applicationReview"]>
    composites: {}
  }

  type ApplicationReviewGetPayload<S extends boolean | null | undefined | ApplicationReviewDefaultArgs> = $Result.GetResult<Prisma.$ApplicationReviewPayload, S>

  type ApplicationReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationReviewCountAggregateInputType | true
    }

  export interface ApplicationReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationReview'], meta: { name: 'ApplicationReview' } }
    /**
     * Find zero or one ApplicationReview that matches the filter.
     * @param {ApplicationReviewFindUniqueArgs} args - Arguments to find a ApplicationReview
     * @example
     * // Get one ApplicationReview
     * const applicationReview = await prisma.applicationReview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationReviewFindUniqueArgs>(args: SelectSubset<T, ApplicationReviewFindUniqueArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicationReview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationReviewFindUniqueOrThrowArgs} args - Arguments to find a ApplicationReview
     * @example
     * // Get one ApplicationReview
     * const applicationReview = await prisma.applicationReview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationReview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewFindFirstArgs} args - Arguments to find a ApplicationReview
     * @example
     * // Get one ApplicationReview
     * const applicationReview = await prisma.applicationReview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationReviewFindFirstArgs>(args?: SelectSubset<T, ApplicationReviewFindFirstArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationReview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewFindFirstOrThrowArgs} args - Arguments to find a ApplicationReview
     * @example
     * // Get one ApplicationReview
     * const applicationReview = await prisma.applicationReview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicationReviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationReviews
     * const applicationReviews = await prisma.applicationReview.findMany()
     * 
     * // Get first 10 ApplicationReviews
     * const applicationReviews = await prisma.applicationReview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationReviewWithIdOnly = await prisma.applicationReview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationReviewFindManyArgs>(args?: SelectSubset<T, ApplicationReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicationReview.
     * @param {ApplicationReviewCreateArgs} args - Arguments to create a ApplicationReview.
     * @example
     * // Create one ApplicationReview
     * const ApplicationReview = await prisma.applicationReview.create({
     *   data: {
     *     // ... data to create a ApplicationReview
     *   }
     * })
     * 
     */
    create<T extends ApplicationReviewCreateArgs>(args: SelectSubset<T, ApplicationReviewCreateArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicationReviews.
     * @param {ApplicationReviewCreateManyArgs} args - Arguments to create many ApplicationReviews.
     * @example
     * // Create many ApplicationReviews
     * const applicationReview = await prisma.applicationReview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationReviewCreateManyArgs>(args?: SelectSubset<T, ApplicationReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationReviews and returns the data saved in the database.
     * @param {ApplicationReviewCreateManyAndReturnArgs} args - Arguments to create many ApplicationReviews.
     * @example
     * // Create many ApplicationReviews
     * const applicationReview = await prisma.applicationReview.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationReviews and only return the `id`
     * const applicationReviewWithIdOnly = await prisma.applicationReview.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicationReview.
     * @param {ApplicationReviewDeleteArgs} args - Arguments to delete one ApplicationReview.
     * @example
     * // Delete one ApplicationReview
     * const ApplicationReview = await prisma.applicationReview.delete({
     *   where: {
     *     // ... filter to delete one ApplicationReview
     *   }
     * })
     * 
     */
    delete<T extends ApplicationReviewDeleteArgs>(args: SelectSubset<T, ApplicationReviewDeleteArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicationReview.
     * @param {ApplicationReviewUpdateArgs} args - Arguments to update one ApplicationReview.
     * @example
     * // Update one ApplicationReview
     * const applicationReview = await prisma.applicationReview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationReviewUpdateArgs>(args: SelectSubset<T, ApplicationReviewUpdateArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicationReviews.
     * @param {ApplicationReviewDeleteManyArgs} args - Arguments to filter ApplicationReviews to delete.
     * @example
     * // Delete a few ApplicationReviews
     * const { count } = await prisma.applicationReview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationReviewDeleteManyArgs>(args?: SelectSubset<T, ApplicationReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationReviews
     * const applicationReview = await prisma.applicationReview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationReviewUpdateManyArgs>(args: SelectSubset<T, ApplicationReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationReviews and returns the data updated in the database.
     * @param {ApplicationReviewUpdateManyAndReturnArgs} args - Arguments to update many ApplicationReviews.
     * @example
     * // Update many ApplicationReviews
     * const applicationReview = await prisma.applicationReview.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicationReviews and only return the `id`
     * const applicationReviewWithIdOnly = await prisma.applicationReview.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicationReview.
     * @param {ApplicationReviewUpsertArgs} args - Arguments to update or create a ApplicationReview.
     * @example
     * // Update or create a ApplicationReview
     * const applicationReview = await prisma.applicationReview.upsert({
     *   create: {
     *     // ... data to create a ApplicationReview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationReview we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationReviewUpsertArgs>(args: SelectSubset<T, ApplicationReviewUpsertArgs<ExtArgs>>): Prisma__ApplicationReviewClient<$Result.GetResult<Prisma.$ApplicationReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicationReviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewCountArgs} args - Arguments to filter ApplicationReviews to count.
     * @example
     * // Count the number of ApplicationReviews
     * const count = await prisma.applicationReview.count({
     *   where: {
     *     // ... the filter for the ApplicationReviews we want to count
     *   }
     * })
    **/
    count<T extends ApplicationReviewCountArgs>(
      args?: Subset<T, ApplicationReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationReviewAggregateArgs>(args: Subset<T, ApplicationReviewAggregateArgs>): Prisma.PrismaPromise<GetApplicationReviewAggregateType<T>>

    /**
     * Group by ApplicationReview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationReviewGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationReview model
   */
  readonly fields: ApplicationReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationReview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidate<T extends ProfessionalCandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProfessionalCandidateDefaultArgs<ExtArgs>>): Prisma__ProfessionalCandidateClient<$Result.GetResult<Prisma.$ProfessionalCandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationReview model
   */
  interface ApplicationReviewFieldRefs {
    readonly id: FieldRef<"ApplicationReview", 'String'>
    readonly candidateId: FieldRef<"ApplicationReview", 'String'>
    readonly reviewerId: FieldRef<"ApplicationReview", 'String'>
    readonly decision: FieldRef<"ApplicationReview", 'ReviewDecision'>
    readonly notes: FieldRef<"ApplicationReview", 'String'>
    readonly scoreAdjustment: FieldRef<"ApplicationReview", 'Json'>
    readonly recommendedLevel: FieldRef<"ApplicationReview", 'ProLevel'>
    readonly createdAt: FieldRef<"ApplicationReview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationReview findUnique
   */
  export type ApplicationReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationReview to fetch.
     */
    where: ApplicationReviewWhereUniqueInput
  }

  /**
   * ApplicationReview findUniqueOrThrow
   */
  export type ApplicationReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationReview to fetch.
     */
    where: ApplicationReviewWhereUniqueInput
  }

  /**
   * ApplicationReview findFirst
   */
  export type ApplicationReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationReview to fetch.
     */
    where?: ApplicationReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationReviews to fetch.
     */
    orderBy?: ApplicationReviewOrderByWithRelationInput | ApplicationReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationReviews.
     */
    cursor?: ApplicationReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationReviews.
     */
    distinct?: ApplicationReviewScalarFieldEnum | ApplicationReviewScalarFieldEnum[]
  }

  /**
   * ApplicationReview findFirstOrThrow
   */
  export type ApplicationReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationReview to fetch.
     */
    where?: ApplicationReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationReviews to fetch.
     */
    orderBy?: ApplicationReviewOrderByWithRelationInput | ApplicationReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationReviews.
     */
    cursor?: ApplicationReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationReviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationReviews.
     */
    distinct?: ApplicationReviewScalarFieldEnum | ApplicationReviewScalarFieldEnum[]
  }

  /**
   * ApplicationReview findMany
   */
  export type ApplicationReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationReviews to fetch.
     */
    where?: ApplicationReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationReviews to fetch.
     */
    orderBy?: ApplicationReviewOrderByWithRelationInput | ApplicationReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationReviews.
     */
    cursor?: ApplicationReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationReviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationReviews.
     */
    skip?: number
    distinct?: ApplicationReviewScalarFieldEnum | ApplicationReviewScalarFieldEnum[]
  }

  /**
   * ApplicationReview create
   */
  export type ApplicationReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationReview.
     */
    data: XOR<ApplicationReviewCreateInput, ApplicationReviewUncheckedCreateInput>
  }

  /**
   * ApplicationReview createMany
   */
  export type ApplicationReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationReviews.
     */
    data: ApplicationReviewCreateManyInput | ApplicationReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicationReview createManyAndReturn
   */
  export type ApplicationReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicationReviews.
     */
    data: ApplicationReviewCreateManyInput | ApplicationReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationReview update
   */
  export type ApplicationReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationReview.
     */
    data: XOR<ApplicationReviewUpdateInput, ApplicationReviewUncheckedUpdateInput>
    /**
     * Choose, which ApplicationReview to update.
     */
    where: ApplicationReviewWhereUniqueInput
  }

  /**
   * ApplicationReview updateMany
   */
  export type ApplicationReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationReviews.
     */
    data: XOR<ApplicationReviewUpdateManyMutationInput, ApplicationReviewUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationReviews to update
     */
    where?: ApplicationReviewWhereInput
    /**
     * Limit how many ApplicationReviews to update.
     */
    limit?: number
  }

  /**
   * ApplicationReview updateManyAndReturn
   */
  export type ApplicationReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * The data used to update ApplicationReviews.
     */
    data: XOR<ApplicationReviewUpdateManyMutationInput, ApplicationReviewUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationReviews to update
     */
    where?: ApplicationReviewWhereInput
    /**
     * Limit how many ApplicationReviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationReview upsert
   */
  export type ApplicationReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationReview to update in case it exists.
     */
    where: ApplicationReviewWhereUniqueInput
    /**
     * In case the ApplicationReview found by the `where` argument doesn't exist, create a new ApplicationReview with this data.
     */
    create: XOR<ApplicationReviewCreateInput, ApplicationReviewUncheckedCreateInput>
    /**
     * In case the ApplicationReview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationReviewUpdateInput, ApplicationReviewUncheckedUpdateInput>
  }

  /**
   * ApplicationReview delete
   */
  export type ApplicationReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
    /**
     * Filter which ApplicationReview to delete.
     */
    where: ApplicationReviewWhereUniqueInput
  }

  /**
   * ApplicationReview deleteMany
   */
  export type ApplicationReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationReviews to delete
     */
    where?: ApplicationReviewWhereInput
    /**
     * Limit how many ApplicationReviews to delete.
     */
    limit?: number
  }

  /**
   * ApplicationReview without action
   */
  export type ApplicationReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationReview
     */
    select?: ApplicationReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationReview
     */
    omit?: ApplicationReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationReviewInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    hashedPassword: 'hashedPassword',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    email: 'email',
    phone: 'phone',
    hashedPassword: 'hashedPassword',
    emailVerified: 'emailVerified',
    phoneVerified: 'phoneVerified',
    twoFactorEnabled: 'twoFactorEnabled',
    twoFactorMethod: 'twoFactorMethod',
    twoFactorSecret: 'twoFactorSecret',
    preferredLanguage: 'preferredLanguage',
    preferredChannel: 'preferredChannel',
    emailNotifications: 'emailNotifications',
    smsNotifications: 'smsNotifications',
    whatsappNotifications: 'whatsappNotifications',
    googleId: 'googleId',
    appleId: 'appleId',
    microsoftId: 'microsoftId',
    oauthProvider: 'oauthProvider',
    profileCompleted: 'profileCompleted',
    termsAccepted: 'termsAccepted',
    privacyAccepted: 'privacyAccepted',
    marketingConsent: 'marketingConsent',
    metadata: 'metadata',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const TempSubmissionScalarFieldEnum: {
    id: 'id',
    payload: 'payload',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type TempSubmissionScalarFieldEnum = (typeof TempSubmissionScalarFieldEnum)[keyof typeof TempSubmissionScalarFieldEnum]


  export const CustomerSessionScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    sessionToken: 'sessionToken',
    twoFactorVerified: 'twoFactorVerified',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    expiresAt: 'expiresAt',
    lastActivity: 'lastActivity',
    createdAt: 'createdAt'
  };

  export type CustomerSessionScalarFieldEnum = (typeof CustomerSessionScalarFieldEnum)[keyof typeof CustomerSessionScalarFieldEnum]


  export const CustomerNotificationScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    type: 'type',
    channel: 'channel',
    subject: 'subject',
    message: 'message',
    language: 'language',
    status: 'status',
    scheduledFor: 'scheduledFor',
    sentAt: 'sentAt',
    readAt: 'readAt',
    errorMessage: 'errorMessage',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type CustomerNotificationScalarFieldEnum = (typeof CustomerNotificationScalarFieldEnum)[keyof typeof CustomerNotificationScalarFieldEnum]


  export const ServicePricingScalarFieldEnum: {
    id: 'id',
    professionalLevel: 'professionalLevel',
    urgencyLevel: 'urgencyLevel',
    basePriceEUR: 'basePriceEUR',
    currencyCode: 'currencyCode',
    isActive: 'isActive',
    validFrom: 'validFrom',
    validUntil: 'validUntil',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServicePricingScalarFieldEnum = (typeof ServicePricingScalarFieldEnum)[keyof typeof ServicePricingScalarFieldEnum]


  export const QuestionnaireResponseScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    questionnaireType: 'questionnaireType',
    language: 'language',
    responses: 'responses',
    aiAnalysis: 'aiAnalysis',
    completenessScore: 'completenessScore',
    confidence: 'confidence',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionnaireResponseScalarFieldEnum = (typeof QuestionnaireResponseScalarFieldEnum)[keyof typeof QuestionnaireResponseScalarFieldEnum]


  export const CasePaymentScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    customerId: 'customerId',
    amount: 'amount',
    currency: 'currency',
    professionalLevel: 'professionalLevel',
    urgencyLevel: 'urgencyLevel',
    status: 'status',
    paymentMethod: 'paymentMethod',
    transactionId: 'transactionId',
    paymentDate: 'paymentDate',
    refundDate: 'refundDate',
    refundReason: 'refundReason',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CasePaymentScalarFieldEnum = (typeof CasePaymentScalarFieldEnum)[keyof typeof CasePaymentScalarFieldEnum]


  export const MedicalCaseScalarFieldEnum: {
    id: 'id',
    caseNumber: 'caseNumber',
    customerId: 'customerId',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    email: 'email',
    phone: 'phone',
    title: 'title',
    description: 'description',
    chiefComplaint: 'chiefComplaint',
    category: 'category',
    medicalHistory: 'medicalHistory',
    currentMedications: 'currentMedications',
    allergies: 'allergies',
    familyHistory: 'familyHistory',
    status: 'status',
    priority: 'priority',
    requestedProfessionalLevel: 'requestedProfessionalLevel',
    talentPool: 'talentPool',
    urgencyReason: 'urgencyReason',
    submittedAt: 'submittedAt',
    reviewStartedAt: 'reviewStartedAt',
    completedAt: 'completedAt',
    expiresAt: 'expiresAt',
    assignedProfessionalId: 'assignedProfessionalId',
    assignedAt: 'assignedAt',
    qualityScore: 'qualityScore',
    completenessScore: 'completenessScore',
    metadata: 'metadata',
    tags: 'tags',
    version: 'version',
    ethnicity: 'ethnicity',
    gender: 'gender',
    diseaseType: 'diseaseType',
    isFirstOccurrence: 'isFirstOccurrence',
    geneticFamilyHistory: 'geneticFamilyHistory',
    paymentId: 'paymentId',
    consentAccepted: 'consentAccepted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalCaseScalarFieldEnum = (typeof MedicalCaseScalarFieldEnum)[keyof typeof MedicalCaseScalarFieldEnum]


  export const CaseStatusHistoryScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    fromStatus: 'fromStatus',
    toStatus: 'toStatus',
    reason: 'reason',
    notes: 'notes',
    changedByType: 'changedByType',
    changedById: 'changedById',
    createdAt: 'createdAt'
  };

  export type CaseStatusHistoryScalarFieldEnum = (typeof CaseStatusHistoryScalarFieldEnum)[keyof typeof CaseStatusHistoryScalarFieldEnum]


  export const UploadedFileScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    filename: 'filename',
    s3Key: 's3Key',
    mimetype: 'mimetype',
    size: 'size',
    category: 'category',
    metadata: 'metadata',
    checksum: 'checksum',
    encrypted: 'encrypted',
    createdAt: 'createdAt'
  };

  export type UploadedFileScalarFieldEnum = (typeof UploadedFileScalarFieldEnum)[keyof typeof UploadedFileScalarFieldEnum]


  export const MedicalProfessionalScalarFieldEnum: {
    id: 'id',
    proNumber: 'proNumber',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    dob: 'dob',
    email: 'email',
    phone: 'phone',
    nationality: 'nationality',
    licenseNumber: 'licenseNumber',
    licenseCountry: 'licenseCountry',
    licenseExpiry: 'licenseExpiry',
    vetted: 'vetted',
    level: 'level',
    cvUrl: 'cvUrl',
    documents: 'documents',
    subspecialties: 'subspecialties',
    yearsPractice: 'yearsPractice',
    publications: 'publications',
    trialInvolved: 'trialInvolved',
    leadership: 'leadership',
    societyMemberships: 'societyMemberships',
    competencyData: 'competencyData',
    availability: 'availability',
    score: 'score',
    hashedPassword: 'hashedPassword',
    twoFactorMethod: 'twoFactorMethod',
    twoFactorSecret: 'twoFactorSecret',
    profileLastUpdated: 'profileLastUpdated',
    codeOfConductAcknowledged: 'codeOfConductAcknowledged',
    address: 'address',
    billingAddress: 'billingAddress',
    bankDetails: 'bankDetails',
    vatNumber: 'vatNumber',
    billingRate: 'billingRate',
    performanceMetrics: 'performanceMetrics',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalProfessionalScalarFieldEnum = (typeof MedicalProfessionalScalarFieldEnum)[keyof typeof MedicalProfessionalScalarFieldEnum]


  export const ProfessionalSessionScalarFieldEnum: {
    id: 'id',
    professionalId: 'professionalId',
    sessionToken: 'sessionToken',
    twoFactorVerified: 'twoFactorVerified',
    expiresAt: 'expiresAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type ProfessionalSessionScalarFieldEnum = (typeof ProfessionalSessionScalarFieldEnum)[keyof typeof ProfessionalSessionScalarFieldEnum]


  export const CaseAssignmentScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    professionalId: 'professionalId',
    status: 'status',
    assignedAt: 'assignedAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    estimatedDuration: 'estimatedDuration',
    actualDuration: 'actualDuration',
    metadata: 'metadata'
  };

  export type CaseAssignmentScalarFieldEnum = (typeof CaseAssignmentScalarFieldEnum)[keyof typeof CaseAssignmentScalarFieldEnum]


  export const AIAnalysisScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    analysisType: 'analysisType',
    results: 'results',
    confidence: 'confidence',
    processingTime: 'processingTime',
    aiProvider: 'aiProvider',
    modelVersion: 'modelVersion',
    cost: 'cost',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type AIAnalysisScalarFieldEnum = (typeof AIAnalysisScalarFieldEnum)[keyof typeof AIAnalysisScalarFieldEnum]


  export const MedicalOpinionScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    professionalId: 'professionalId',
    content: 'content',
    status: 'status',
    version: 'version',
    digitalSignature: 'digitalSignature',
    reviewedBy: 'reviewedBy',
    reviewedAt: 'reviewedAt',
    publishedAt: 'publishedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MedicalOpinionScalarFieldEnum = (typeof MedicalOpinionScalarFieldEnum)[keyof typeof MedicalOpinionScalarFieldEnum]


  export const ProfessionalPaymentScalarFieldEnum: {
    id: 'id',
    caseId: 'caseId',
    professionalId: 'professionalId',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    paymentMethod: 'paymentMethod',
    transactionId: 'transactionId',
    processedAt: 'processedAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionalPaymentScalarFieldEnum = (typeof ProfessionalPaymentScalarFieldEnum)[keyof typeof ProfessionalPaymentScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    email: 'email',
    hashedPassword: 'hashedPassword',
    role: 'role',
    permissions: 'permissions',
    lastLoginAt: 'lastLoginAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const ProfessionalCandidateScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    nationality: 'nationality',
    email: 'email',
    phone: 'phone',
    emailVerified: 'emailVerified',
    emailVerificationToken: 'emailVerificationToken',
    medicalDegreeUploaded: 'medicalDegreeUploaded',
    residencyCompleted: 'residencyCompleted',
    fellowshipCompleted: 'fellowshipCompleted',
    boardCertificationNumber: 'boardCertificationNumber',
    medicalLicenseNumber: 'medicalLicenseNumber',
    licenseCountry: 'licenseCountry',
    licenseState: 'licenseState',
    licenseExpiry: 'licenseExpiry',
    certificateGoodStanding: 'certificateGoodStanding',
    yearsIndependentPractice: 'yearsIndependentPractice',
    currentAffiliation: 'currentAffiliation',
    subspecialties: 'subspecialties',
    annualPatientLoad: 'annualPatientLoad',
    secondOpinionsGiven: 'secondOpinionsGiven',
    peerReviewedPublications: 'peerReviewedPublications',
    clinicalTrialInvolvement: 'clinicalTrialInvolvement',
    clinicalTrialDetails: 'clinicalTrialDetails',
    conferencepresentations: 'conferencepresentations',
    conferenceDetails: 'conferenceDetails',
    teachingRoles: 'teachingRoles',
    teachingDetails: 'teachingDetails',
    oncologySocieties: 'oncologySocieties',
    awardsHonors: 'awardsHonors',
    leadershipRoles: 'leadershipRoles',
    professionalReferences: 'professionalReferences',
    malpracticeInsurance: 'malpracticeInsurance',
    noActiveDisciplinary: 'noActiveDisciplinary',
    dataProtectionAgreed: 'dataProtectionAgreed',
    competencyScore: 'competencyScore',
    competencyLevel: 'competencyLevel',
    scoreBreakdown: 'scoreBreakdown',
    applicationStatus: 'applicationStatus',
    submittedAt: 'submittedAt',
    reviewStartedAt: 'reviewStartedAt',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy',
    reviewNotes: 'reviewNotes',
    rejectionReason: 'rejectionReason',
    approvedToProfessionalId: 'approvedToProfessionalId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfessionalCandidateScalarFieldEnum = (typeof ProfessionalCandidateScalarFieldEnum)[keyof typeof ProfessionalCandidateScalarFieldEnum]


  export const CandidateDocumentScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    documentType: 'documentType',
    fileName: 'fileName',
    originalName: 'originalName',
    s3Key: 's3Key',
    mimetype: 'mimetype',
    size: 'size',
    checksum: 'checksum',
    encrypted: 'encrypted',
    uploadedAt: 'uploadedAt'
  };

  export type CandidateDocumentScalarFieldEnum = (typeof CandidateDocumentScalarFieldEnum)[keyof typeof CandidateDocumentScalarFieldEnum]


  export const ApplicationReviewScalarFieldEnum: {
    id: 'id',
    candidateId: 'candidateId',
    reviewerId: 'reviewerId',
    decision: 'decision',
    notes: 'notes',
    scoreAdjustment: 'scoreAdjustment',
    recommendedLevel: 'recommendedLevel',
    createdAt: 'createdAt'
  };

  export type ApplicationReviewScalarFieldEnum = (typeof ApplicationReviewScalarFieldEnum)[keyof typeof ApplicationReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TwoFactorMethod'
   */
  export type EnumTwoFactorMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TwoFactorMethod'>
    


  /**
   * Reference to a field of type 'TwoFactorMethod[]'
   */
  export type ListEnumTwoFactorMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TwoFactorMethod[]'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'CommunicationChannel'
   */
  export type EnumCommunicationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommunicationChannel'>
    


  /**
   * Reference to a field of type 'CommunicationChannel[]'
   */
  export type ListEnumCommunicationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommunicationChannel[]'>
    


  /**
   * Reference to a field of type 'CaseUrgency'
   */
  export type EnumCaseUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseUrgency'>
    


  /**
   * Reference to a field of type 'CaseUrgency[]'
   */
  export type ListEnumCaseUrgencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CaseUrgency[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'QuestionnaireType'
   */
  export type EnumQuestionnaireTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionnaireType'>
    


  /**
   * Reference to a field of type 'QuestionnaireType[]'
   */
  export type ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QuestionnaireType[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ProLevel'
   */
  export type EnumProLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProLevel'>
    


  /**
   * Reference to a field of type 'ProLevel[]'
   */
  export type ListEnumProLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProLevel[]'>
    


  /**
   * Reference to a field of type 'CandidateStatus'
   */
  export type EnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus'>
    


  /**
   * Reference to a field of type 'CandidateStatus[]'
   */
  export type ListEnumCandidateStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CandidateStatus[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'ReviewDecision'
   */
  export type EnumReviewDecisionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewDecision'>
    


  /**
   * Reference to a field of type 'ReviewDecision[]'
   */
  export type ListEnumReviewDecisionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReviewDecision[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    hashedPassword?: StringFilter<"User"> | string
    metadata?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    hashedPassword?: StringFilter<"User"> | string
    metadata?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    customer?: XOR<CustomerNullableScalarRelationFilter, CustomerWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    metadata?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    firstName?: StringFilter<"Customer"> | string
    middleName?: StringNullableFilter<"Customer"> | string | null
    lastName?: StringFilter<"Customer"> | string
    dateOfBirth?: DateTimeNullableFilter<"Customer"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Customer"> | $Enums.Gender | null
    email?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    hashedPassword?: StringFilter<"Customer"> | string
    emailVerified?: BoolFilter<"Customer"> | boolean
    phoneVerified?: BoolFilter<"Customer"> | boolean
    twoFactorEnabled?: BoolFilter<"Customer"> | boolean
    twoFactorMethod?: EnumTwoFactorMethodFilter<"Customer"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableFilter<"Customer"> | string | null
    preferredLanguage?: EnumLanguageFilter<"Customer"> | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFilter<"Customer"> | $Enums.CommunicationChannel
    emailNotifications?: BoolFilter<"Customer"> | boolean
    smsNotifications?: BoolFilter<"Customer"> | boolean
    whatsappNotifications?: BoolFilter<"Customer"> | boolean
    googleId?: StringNullableFilter<"Customer"> | string | null
    appleId?: StringNullableFilter<"Customer"> | string | null
    microsoftId?: StringNullableFilter<"Customer"> | string | null
    oauthProvider?: StringNullableFilter<"Customer"> | string | null
    profileCompleted?: BoolFilter<"Customer"> | boolean
    termsAccepted?: BoolFilter<"Customer"> | boolean
    privacyAccepted?: BoolFilter<"Customer"> | boolean
    marketingConsent?: BoolFilter<"Customer"> | boolean
    metadata?: JsonNullableFilter<"Customer">
    userId?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: MedicalCaseListRelationFilter
    customerSessions?: CustomerSessionListRelationFilter
    notifications?: CustomerNotificationListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    hashedPassword?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrder
    preferredChannel?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    whatsappNotifications?: SortOrder
    googleId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    microsoftId?: SortOrderInput | SortOrder
    oauthProvider?: SortOrderInput | SortOrder
    profileCompleted?: SortOrder
    termsAccepted?: SortOrder
    privacyAccepted?: SortOrder
    marketingConsent?: SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    cases?: MedicalCaseOrderByRelationAggregateInput
    customerSessions?: CustomerSessionOrderByRelationAggregateInput
    notifications?: CustomerNotificationOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    googleId?: string
    appleId?: string
    microsoftId?: string
    userId?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    firstName?: StringFilter<"Customer"> | string
    middleName?: StringNullableFilter<"Customer"> | string | null
    lastName?: StringFilter<"Customer"> | string
    dateOfBirth?: DateTimeNullableFilter<"Customer"> | Date | string | null
    gender?: EnumGenderNullableFilter<"Customer"> | $Enums.Gender | null
    phone?: StringNullableFilter<"Customer"> | string | null
    hashedPassword?: StringFilter<"Customer"> | string
    emailVerified?: BoolFilter<"Customer"> | boolean
    phoneVerified?: BoolFilter<"Customer"> | boolean
    twoFactorEnabled?: BoolFilter<"Customer"> | boolean
    twoFactorMethod?: EnumTwoFactorMethodFilter<"Customer"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableFilter<"Customer"> | string | null
    preferredLanguage?: EnumLanguageFilter<"Customer"> | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFilter<"Customer"> | $Enums.CommunicationChannel
    emailNotifications?: BoolFilter<"Customer"> | boolean
    smsNotifications?: BoolFilter<"Customer"> | boolean
    whatsappNotifications?: BoolFilter<"Customer"> | boolean
    oauthProvider?: StringNullableFilter<"Customer"> | string | null
    profileCompleted?: BoolFilter<"Customer"> | boolean
    termsAccepted?: BoolFilter<"Customer"> | boolean
    privacyAccepted?: BoolFilter<"Customer"> | boolean
    marketingConsent?: BoolFilter<"Customer"> | boolean
    metadata?: JsonNullableFilter<"Customer">
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    cases?: MedicalCaseListRelationFilter
    customerSessions?: CustomerSessionListRelationFilter
    notifications?: CustomerNotificationListRelationFilter
  }, "id" | "email" | "googleId" | "appleId" | "microsoftId" | "userId">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    hashedPassword?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    preferredLanguage?: SortOrder
    preferredChannel?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    whatsappNotifications?: SortOrder
    googleId?: SortOrderInput | SortOrder
    appleId?: SortOrderInput | SortOrder
    microsoftId?: SortOrderInput | SortOrder
    oauthProvider?: SortOrderInput | SortOrder
    profileCompleted?: SortOrder
    termsAccepted?: SortOrder
    privacyAccepted?: SortOrder
    marketingConsent?: SortOrder
    metadata?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    firstName?: StringWithAggregatesFilter<"Customer"> | string
    middleName?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    lastName?: StringWithAggregatesFilter<"Customer"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Customer"> | Date | string | null
    gender?: EnumGenderNullableWithAggregatesFilter<"Customer"> | $Enums.Gender | null
    email?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    hashedPassword?: StringWithAggregatesFilter<"Customer"> | string
    emailVerified?: BoolWithAggregatesFilter<"Customer"> | boolean
    phoneVerified?: BoolWithAggregatesFilter<"Customer"> | boolean
    twoFactorEnabled?: BoolWithAggregatesFilter<"Customer"> | boolean
    twoFactorMethod?: EnumTwoFactorMethodWithAggregatesFilter<"Customer"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    preferredLanguage?: EnumLanguageWithAggregatesFilter<"Customer"> | $Enums.Language
    preferredChannel?: EnumCommunicationChannelWithAggregatesFilter<"Customer"> | $Enums.CommunicationChannel
    emailNotifications?: BoolWithAggregatesFilter<"Customer"> | boolean
    smsNotifications?: BoolWithAggregatesFilter<"Customer"> | boolean
    whatsappNotifications?: BoolWithAggregatesFilter<"Customer"> | boolean
    googleId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    appleId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    microsoftId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    oauthProvider?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    profileCompleted?: BoolWithAggregatesFilter<"Customer"> | boolean
    termsAccepted?: BoolWithAggregatesFilter<"Customer"> | boolean
    privacyAccepted?: BoolWithAggregatesFilter<"Customer"> | boolean
    marketingConsent?: BoolWithAggregatesFilter<"Customer"> | boolean
    metadata?: JsonNullableWithAggregatesFilter<"Customer">
    userId?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type TempSubmissionWhereInput = {
    AND?: TempSubmissionWhereInput | TempSubmissionWhereInput[]
    OR?: TempSubmissionWhereInput[]
    NOT?: TempSubmissionWhereInput | TempSubmissionWhereInput[]
    id?: StringFilter<"TempSubmission"> | string
    payload?: JsonFilter<"TempSubmission">
    expiresAt?: DateTimeFilter<"TempSubmission"> | Date | string
    createdAt?: DateTimeFilter<"TempSubmission"> | Date | string
  }

  export type TempSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    payload?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TempSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TempSubmissionWhereInput | TempSubmissionWhereInput[]
    OR?: TempSubmissionWhereInput[]
    NOT?: TempSubmissionWhereInput | TempSubmissionWhereInput[]
    payload?: JsonFilter<"TempSubmission">
    expiresAt?: DateTimeFilter<"TempSubmission"> | Date | string
    createdAt?: DateTimeFilter<"TempSubmission"> | Date | string
  }, "id">

  export type TempSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    payload?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: TempSubmissionCountOrderByAggregateInput
    _max?: TempSubmissionMaxOrderByAggregateInput
    _min?: TempSubmissionMinOrderByAggregateInput
  }

  export type TempSubmissionScalarWhereWithAggregatesInput = {
    AND?: TempSubmissionScalarWhereWithAggregatesInput | TempSubmissionScalarWhereWithAggregatesInput[]
    OR?: TempSubmissionScalarWhereWithAggregatesInput[]
    NOT?: TempSubmissionScalarWhereWithAggregatesInput | TempSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TempSubmission"> | string
    payload?: JsonWithAggregatesFilter<"TempSubmission">
    expiresAt?: DateTimeWithAggregatesFilter<"TempSubmission"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"TempSubmission"> | Date | string
  }

  export type CustomerSessionWhereInput = {
    AND?: CustomerSessionWhereInput | CustomerSessionWhereInput[]
    OR?: CustomerSessionWhereInput[]
    NOT?: CustomerSessionWhereInput | CustomerSessionWhereInput[]
    id?: StringFilter<"CustomerSession"> | string
    customerId?: StringFilter<"CustomerSession"> | string
    sessionToken?: StringFilter<"CustomerSession"> | string
    twoFactorVerified?: BoolFilter<"CustomerSession"> | boolean
    ipAddress?: StringNullableFilter<"CustomerSession"> | string | null
    userAgent?: StringNullableFilter<"CustomerSession"> | string | null
    expiresAt?: DateTimeFilter<"CustomerSession"> | Date | string
    lastActivity?: DateTimeFilter<"CustomerSession"> | Date | string
    createdAt?: DateTimeFilter<"CustomerSession"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CustomerSessionOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type CustomerSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: CustomerSessionWhereInput | CustomerSessionWhereInput[]
    OR?: CustomerSessionWhereInput[]
    NOT?: CustomerSessionWhereInput | CustomerSessionWhereInput[]
    customerId?: StringFilter<"CustomerSession"> | string
    twoFactorVerified?: BoolFilter<"CustomerSession"> | boolean
    ipAddress?: StringNullableFilter<"CustomerSession"> | string | null
    userAgent?: StringNullableFilter<"CustomerSession"> | string | null
    expiresAt?: DateTimeFilter<"CustomerSession"> | Date | string
    lastActivity?: DateTimeFilter<"CustomerSession"> | Date | string
    createdAt?: DateTimeFilter<"CustomerSession"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id" | "sessionToken">

  export type CustomerSessionOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
    _count?: CustomerSessionCountOrderByAggregateInput
    _max?: CustomerSessionMaxOrderByAggregateInput
    _min?: CustomerSessionMinOrderByAggregateInput
  }

  export type CustomerSessionScalarWhereWithAggregatesInput = {
    AND?: CustomerSessionScalarWhereWithAggregatesInput | CustomerSessionScalarWhereWithAggregatesInput[]
    OR?: CustomerSessionScalarWhereWithAggregatesInput[]
    NOT?: CustomerSessionScalarWhereWithAggregatesInput | CustomerSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerSession"> | string
    customerId?: StringWithAggregatesFilter<"CustomerSession"> | string
    sessionToken?: StringWithAggregatesFilter<"CustomerSession"> | string
    twoFactorVerified?: BoolWithAggregatesFilter<"CustomerSession"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"CustomerSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"CustomerSession"> | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"CustomerSession"> | Date | string
    lastActivity?: DateTimeWithAggregatesFilter<"CustomerSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"CustomerSession"> | Date | string
  }

  export type CustomerNotificationWhereInput = {
    AND?: CustomerNotificationWhereInput | CustomerNotificationWhereInput[]
    OR?: CustomerNotificationWhereInput[]
    NOT?: CustomerNotificationWhereInput | CustomerNotificationWhereInput[]
    id?: StringFilter<"CustomerNotification"> | string
    customerId?: StringFilter<"CustomerNotification"> | string
    type?: StringFilter<"CustomerNotification"> | string
    channel?: EnumCommunicationChannelFilter<"CustomerNotification"> | $Enums.CommunicationChannel
    subject?: StringNullableFilter<"CustomerNotification"> | string | null
    message?: StringFilter<"CustomerNotification"> | string
    language?: EnumLanguageFilter<"CustomerNotification"> | $Enums.Language
    status?: StringFilter<"CustomerNotification"> | string
    scheduledFor?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    readAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    errorMessage?: StringNullableFilter<"CustomerNotification"> | string | null
    metadata?: JsonNullableFilter<"CustomerNotification">
    createdAt?: DateTimeFilter<"CustomerNotification"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }

  export type CustomerNotificationOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    channel?: SortOrder
    subject?: SortOrderInput | SortOrder
    message?: SortOrder
    language?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
  }

  export type CustomerNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomerNotificationWhereInput | CustomerNotificationWhereInput[]
    OR?: CustomerNotificationWhereInput[]
    NOT?: CustomerNotificationWhereInput | CustomerNotificationWhereInput[]
    customerId?: StringFilter<"CustomerNotification"> | string
    type?: StringFilter<"CustomerNotification"> | string
    channel?: EnumCommunicationChannelFilter<"CustomerNotification"> | $Enums.CommunicationChannel
    subject?: StringNullableFilter<"CustomerNotification"> | string | null
    message?: StringFilter<"CustomerNotification"> | string
    language?: EnumLanguageFilter<"CustomerNotification"> | $Enums.Language
    status?: StringFilter<"CustomerNotification"> | string
    scheduledFor?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    readAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    errorMessage?: StringNullableFilter<"CustomerNotification"> | string | null
    metadata?: JsonNullableFilter<"CustomerNotification">
    createdAt?: DateTimeFilter<"CustomerNotification"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
  }, "id">

  export type CustomerNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    channel?: SortOrder
    subject?: SortOrderInput | SortOrder
    message?: SortOrder
    language?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    readAt?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CustomerNotificationCountOrderByAggregateInput
    _max?: CustomerNotificationMaxOrderByAggregateInput
    _min?: CustomerNotificationMinOrderByAggregateInput
  }

  export type CustomerNotificationScalarWhereWithAggregatesInput = {
    AND?: CustomerNotificationScalarWhereWithAggregatesInput | CustomerNotificationScalarWhereWithAggregatesInput[]
    OR?: CustomerNotificationScalarWhereWithAggregatesInput[]
    NOT?: CustomerNotificationScalarWhereWithAggregatesInput | CustomerNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomerNotification"> | string
    customerId?: StringWithAggregatesFilter<"CustomerNotification"> | string
    type?: StringWithAggregatesFilter<"CustomerNotification"> | string
    channel?: EnumCommunicationChannelWithAggregatesFilter<"CustomerNotification"> | $Enums.CommunicationChannel
    subject?: StringNullableWithAggregatesFilter<"CustomerNotification"> | string | null
    message?: StringWithAggregatesFilter<"CustomerNotification"> | string
    language?: EnumLanguageWithAggregatesFilter<"CustomerNotification"> | $Enums.Language
    status?: StringWithAggregatesFilter<"CustomerNotification"> | string
    scheduledFor?: DateTimeNullableWithAggregatesFilter<"CustomerNotification"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"CustomerNotification"> | Date | string | null
    readAt?: DateTimeNullableWithAggregatesFilter<"CustomerNotification"> | Date | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"CustomerNotification"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"CustomerNotification">
    createdAt?: DateTimeWithAggregatesFilter<"CustomerNotification"> | Date | string
  }

  export type ServicePricingWhereInput = {
    AND?: ServicePricingWhereInput | ServicePricingWhereInput[]
    OR?: ServicePricingWhereInput[]
    NOT?: ServicePricingWhereInput | ServicePricingWhereInput[]
    id?: StringFilter<"ServicePricing"> | string
    professionalLevel?: StringFilter<"ServicePricing"> | string
    urgencyLevel?: EnumCaseUrgencyFilter<"ServicePricing"> | $Enums.CaseUrgency
    basePriceEUR?: FloatFilter<"ServicePricing"> | number
    currencyCode?: StringFilter<"ServicePricing"> | string
    isActive?: BoolFilter<"ServicePricing"> | boolean
    validFrom?: DateTimeFilter<"ServicePricing"> | Date | string
    validUntil?: DateTimeNullableFilter<"ServicePricing"> | Date | string | null
    metadata?: JsonNullableFilter<"ServicePricing">
    createdAt?: DateTimeFilter<"ServicePricing"> | Date | string
    updatedAt?: DateTimeFilter<"ServicePricing"> | Date | string
  }

  export type ServicePricingOrderByWithRelationInput = {
    id?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    basePriceEUR?: SortOrder
    currencyCode?: SortOrder
    isActive?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicePricingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicePricingWhereInput | ServicePricingWhereInput[]
    OR?: ServicePricingWhereInput[]
    NOT?: ServicePricingWhereInput | ServicePricingWhereInput[]
    professionalLevel?: StringFilter<"ServicePricing"> | string
    urgencyLevel?: EnumCaseUrgencyFilter<"ServicePricing"> | $Enums.CaseUrgency
    basePriceEUR?: FloatFilter<"ServicePricing"> | number
    currencyCode?: StringFilter<"ServicePricing"> | string
    isActive?: BoolFilter<"ServicePricing"> | boolean
    validFrom?: DateTimeFilter<"ServicePricing"> | Date | string
    validUntil?: DateTimeNullableFilter<"ServicePricing"> | Date | string | null
    metadata?: JsonNullableFilter<"ServicePricing">
    createdAt?: DateTimeFilter<"ServicePricing"> | Date | string
    updatedAt?: DateTimeFilter<"ServicePricing"> | Date | string
  }, "id">

  export type ServicePricingOrderByWithAggregationInput = {
    id?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    basePriceEUR?: SortOrder
    currencyCode?: SortOrder
    isActive?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServicePricingCountOrderByAggregateInput
    _avg?: ServicePricingAvgOrderByAggregateInput
    _max?: ServicePricingMaxOrderByAggregateInput
    _min?: ServicePricingMinOrderByAggregateInput
    _sum?: ServicePricingSumOrderByAggregateInput
  }

  export type ServicePricingScalarWhereWithAggregatesInput = {
    AND?: ServicePricingScalarWhereWithAggregatesInput | ServicePricingScalarWhereWithAggregatesInput[]
    OR?: ServicePricingScalarWhereWithAggregatesInput[]
    NOT?: ServicePricingScalarWhereWithAggregatesInput | ServicePricingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ServicePricing"> | string
    professionalLevel?: StringWithAggregatesFilter<"ServicePricing"> | string
    urgencyLevel?: EnumCaseUrgencyWithAggregatesFilter<"ServicePricing"> | $Enums.CaseUrgency
    basePriceEUR?: FloatWithAggregatesFilter<"ServicePricing"> | number
    currencyCode?: StringWithAggregatesFilter<"ServicePricing"> | string
    isActive?: BoolWithAggregatesFilter<"ServicePricing"> | boolean
    validFrom?: DateTimeWithAggregatesFilter<"ServicePricing"> | Date | string
    validUntil?: DateTimeNullableWithAggregatesFilter<"ServicePricing"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ServicePricing">
    createdAt?: DateTimeWithAggregatesFilter<"ServicePricing"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ServicePricing"> | Date | string
  }

  export type QuestionnaireResponseWhereInput = {
    AND?: QuestionnaireResponseWhereInput | QuestionnaireResponseWhereInput[]
    OR?: QuestionnaireResponseWhereInput[]
    NOT?: QuestionnaireResponseWhereInput | QuestionnaireResponseWhereInput[]
    id?: StringFilter<"QuestionnaireResponse"> | string
    caseId?: StringFilter<"QuestionnaireResponse"> | string
    questionnaireType?: EnumQuestionnaireTypeFilter<"QuestionnaireResponse"> | $Enums.QuestionnaireType
    language?: EnumLanguageFilter<"QuestionnaireResponse"> | $Enums.Language
    responses?: JsonFilter<"QuestionnaireResponse">
    aiAnalysis?: JsonNullableFilter<"QuestionnaireResponse">
    completenessScore?: FloatNullableFilter<"QuestionnaireResponse"> | number | null
    confidence?: FloatNullableFilter<"QuestionnaireResponse"> | number | null
    createdAt?: DateTimeFilter<"QuestionnaireResponse"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionnaireResponse"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }

  export type QuestionnaireResponseOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    questionnaireType?: SortOrder
    language?: SortOrder
    responses?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    completenessScore?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
  }

  export type QuestionnaireResponseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: QuestionnaireResponseWhereInput | QuestionnaireResponseWhereInput[]
    OR?: QuestionnaireResponseWhereInput[]
    NOT?: QuestionnaireResponseWhereInput | QuestionnaireResponseWhereInput[]
    questionnaireType?: EnumQuestionnaireTypeFilter<"QuestionnaireResponse"> | $Enums.QuestionnaireType
    language?: EnumLanguageFilter<"QuestionnaireResponse"> | $Enums.Language
    responses?: JsonFilter<"QuestionnaireResponse">
    aiAnalysis?: JsonNullableFilter<"QuestionnaireResponse">
    completenessScore?: FloatNullableFilter<"QuestionnaireResponse"> | number | null
    confidence?: FloatNullableFilter<"QuestionnaireResponse"> | number | null
    createdAt?: DateTimeFilter<"QuestionnaireResponse"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionnaireResponse"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }, "id" | "caseId">

  export type QuestionnaireResponseOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    questionnaireType?: SortOrder
    language?: SortOrder
    responses?: SortOrder
    aiAnalysis?: SortOrderInput | SortOrder
    completenessScore?: SortOrderInput | SortOrder
    confidence?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionnaireResponseCountOrderByAggregateInput
    _avg?: QuestionnaireResponseAvgOrderByAggregateInput
    _max?: QuestionnaireResponseMaxOrderByAggregateInput
    _min?: QuestionnaireResponseMinOrderByAggregateInput
    _sum?: QuestionnaireResponseSumOrderByAggregateInput
  }

  export type QuestionnaireResponseScalarWhereWithAggregatesInput = {
    AND?: QuestionnaireResponseScalarWhereWithAggregatesInput | QuestionnaireResponseScalarWhereWithAggregatesInput[]
    OR?: QuestionnaireResponseScalarWhereWithAggregatesInput[]
    NOT?: QuestionnaireResponseScalarWhereWithAggregatesInput | QuestionnaireResponseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionnaireResponse"> | string
    caseId?: StringWithAggregatesFilter<"QuestionnaireResponse"> | string
    questionnaireType?: EnumQuestionnaireTypeWithAggregatesFilter<"QuestionnaireResponse"> | $Enums.QuestionnaireType
    language?: EnumLanguageWithAggregatesFilter<"QuestionnaireResponse"> | $Enums.Language
    responses?: JsonWithAggregatesFilter<"QuestionnaireResponse">
    aiAnalysis?: JsonNullableWithAggregatesFilter<"QuestionnaireResponse">
    completenessScore?: FloatNullableWithAggregatesFilter<"QuestionnaireResponse"> | number | null
    confidence?: FloatNullableWithAggregatesFilter<"QuestionnaireResponse"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionnaireResponse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionnaireResponse"> | Date | string
  }

  export type CasePaymentWhereInput = {
    AND?: CasePaymentWhereInput | CasePaymentWhereInput[]
    OR?: CasePaymentWhereInput[]
    NOT?: CasePaymentWhereInput | CasePaymentWhereInput[]
    id?: StringFilter<"CasePayment"> | string
    caseId?: StringFilter<"CasePayment"> | string
    customerId?: StringFilter<"CasePayment"> | string
    amount?: FloatFilter<"CasePayment"> | number
    currency?: StringFilter<"CasePayment"> | string
    professionalLevel?: StringFilter<"CasePayment"> | string
    urgencyLevel?: EnumCaseUrgencyFilter<"CasePayment"> | $Enums.CaseUrgency
    status?: EnumPaymentStatusFilter<"CasePayment"> | $Enums.PaymentStatus
    paymentMethod?: StringNullableFilter<"CasePayment"> | string | null
    transactionId?: StringNullableFilter<"CasePayment"> | string | null
    paymentDate?: DateTimeNullableFilter<"CasePayment"> | Date | string | null
    refundDate?: DateTimeNullableFilter<"CasePayment"> | Date | string | null
    refundReason?: StringNullableFilter<"CasePayment"> | string | null
    metadata?: JsonNullableFilter<"CasePayment">
    createdAt?: DateTimeFilter<"CasePayment"> | Date | string
    updatedAt?: DateTimeFilter<"CasePayment"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }

  export type CasePaymentOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    customerId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    refundDate?: SortOrderInput | SortOrder
    refundReason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
  }

  export type CasePaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseId?: string
    AND?: CasePaymentWhereInput | CasePaymentWhereInput[]
    OR?: CasePaymentWhereInput[]
    NOT?: CasePaymentWhereInput | CasePaymentWhereInput[]
    customerId?: StringFilter<"CasePayment"> | string
    amount?: FloatFilter<"CasePayment"> | number
    currency?: StringFilter<"CasePayment"> | string
    professionalLevel?: StringFilter<"CasePayment"> | string
    urgencyLevel?: EnumCaseUrgencyFilter<"CasePayment"> | $Enums.CaseUrgency
    status?: EnumPaymentStatusFilter<"CasePayment"> | $Enums.PaymentStatus
    paymentMethod?: StringNullableFilter<"CasePayment"> | string | null
    transactionId?: StringNullableFilter<"CasePayment"> | string | null
    paymentDate?: DateTimeNullableFilter<"CasePayment"> | Date | string | null
    refundDate?: DateTimeNullableFilter<"CasePayment"> | Date | string | null
    refundReason?: StringNullableFilter<"CasePayment"> | string | null
    metadata?: JsonNullableFilter<"CasePayment">
    createdAt?: DateTimeFilter<"CasePayment"> | Date | string
    updatedAt?: DateTimeFilter<"CasePayment"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }, "id" | "caseId">

  export type CasePaymentOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    customerId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    paymentDate?: SortOrderInput | SortOrder
    refundDate?: SortOrderInput | SortOrder
    refundReason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CasePaymentCountOrderByAggregateInput
    _avg?: CasePaymentAvgOrderByAggregateInput
    _max?: CasePaymentMaxOrderByAggregateInput
    _min?: CasePaymentMinOrderByAggregateInput
    _sum?: CasePaymentSumOrderByAggregateInput
  }

  export type CasePaymentScalarWhereWithAggregatesInput = {
    AND?: CasePaymentScalarWhereWithAggregatesInput | CasePaymentScalarWhereWithAggregatesInput[]
    OR?: CasePaymentScalarWhereWithAggregatesInput[]
    NOT?: CasePaymentScalarWhereWithAggregatesInput | CasePaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CasePayment"> | string
    caseId?: StringWithAggregatesFilter<"CasePayment"> | string
    customerId?: StringWithAggregatesFilter<"CasePayment"> | string
    amount?: FloatWithAggregatesFilter<"CasePayment"> | number
    currency?: StringWithAggregatesFilter<"CasePayment"> | string
    professionalLevel?: StringWithAggregatesFilter<"CasePayment"> | string
    urgencyLevel?: EnumCaseUrgencyWithAggregatesFilter<"CasePayment"> | $Enums.CaseUrgency
    status?: EnumPaymentStatusWithAggregatesFilter<"CasePayment"> | $Enums.PaymentStatus
    paymentMethod?: StringNullableWithAggregatesFilter<"CasePayment"> | string | null
    transactionId?: StringNullableWithAggregatesFilter<"CasePayment"> | string | null
    paymentDate?: DateTimeNullableWithAggregatesFilter<"CasePayment"> | Date | string | null
    refundDate?: DateTimeNullableWithAggregatesFilter<"CasePayment"> | Date | string | null
    refundReason?: StringNullableWithAggregatesFilter<"CasePayment"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"CasePayment">
    createdAt?: DateTimeWithAggregatesFilter<"CasePayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CasePayment"> | Date | string
  }

  export type MedicalCaseWhereInput = {
    AND?: MedicalCaseWhereInput | MedicalCaseWhereInput[]
    OR?: MedicalCaseWhereInput[]
    NOT?: MedicalCaseWhereInput | MedicalCaseWhereInput[]
    id?: StringFilter<"MedicalCase"> | string
    caseNumber?: StringFilter<"MedicalCase"> | string
    customerId?: StringFilter<"MedicalCase"> | string
    firstName?: StringFilter<"MedicalCase"> | string
    middleName?: StringNullableFilter<"MedicalCase"> | string | null
    lastName?: StringFilter<"MedicalCase"> | string
    dateOfBirth?: DateTimeFilter<"MedicalCase"> | Date | string
    email?: StringFilter<"MedicalCase"> | string
    phone?: StringNullableFilter<"MedicalCase"> | string | null
    title?: StringFilter<"MedicalCase"> | string
    description?: StringFilter<"MedicalCase"> | string
    chiefComplaint?: StringNullableFilter<"MedicalCase"> | string | null
    category?: StringFilter<"MedicalCase"> | string
    medicalHistory?: JsonNullableFilter<"MedicalCase">
    currentMedications?: JsonNullableFilter<"MedicalCase">
    allergies?: JsonNullableFilter<"MedicalCase">
    familyHistory?: JsonNullableFilter<"MedicalCase">
    status?: StringFilter<"MedicalCase"> | string
    priority?: StringFilter<"MedicalCase"> | string
    requestedProfessionalLevel?: StringFilter<"MedicalCase"> | string
    talentPool?: StringNullableFilter<"MedicalCase"> | string | null
    urgencyReason?: StringNullableFilter<"MedicalCase"> | string | null
    submittedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    reviewStartedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    assignedProfessionalId?: StringNullableFilter<"MedicalCase"> | string | null
    assignedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    qualityScore?: FloatNullableFilter<"MedicalCase"> | number | null
    completenessScore?: FloatNullableFilter<"MedicalCase"> | number | null
    metadata?: JsonNullableFilter<"MedicalCase">
    tags?: StringNullableListFilter<"MedicalCase">
    version?: IntFilter<"MedicalCase"> | number
    ethnicity?: StringNullableFilter<"MedicalCase"> | string | null
    gender?: StringNullableFilter<"MedicalCase"> | string | null
    diseaseType?: StringNullableFilter<"MedicalCase"> | string | null
    isFirstOccurrence?: BoolNullableFilter<"MedicalCase"> | boolean | null
    geneticFamilyHistory?: JsonNullableFilter<"MedicalCase">
    paymentId?: StringNullableFilter<"MedicalCase"> | string | null
    consentAccepted?: BoolFilter<"MedicalCase"> | boolean
    createdAt?: DateTimeFilter<"MedicalCase"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCase"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    uploadedFiles?: UploadedFileListRelationFilter
    statusHistory?: CaseStatusHistoryListRelationFilter
    caseAssignments?: CaseAssignmentListRelationFilter
    aiAnalyses?: AIAnalysisListRelationFilter
    medicalOpinions?: MedicalOpinionListRelationFilter
    professionalPayments?: ProfessionalPaymentListRelationFilter
    questionnaireResponse?: XOR<QuestionnaireResponseNullableScalarRelationFilter, QuestionnaireResponseWhereInput> | null
    casePayment?: XOR<CasePaymentNullableScalarRelationFilter, CasePaymentWhereInput> | null
  }

  export type MedicalCaseOrderByWithRelationInput = {
    id?: SortOrder
    caseNumber?: SortOrder
    customerId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    chiefComplaint?: SortOrderInput | SortOrder
    category?: SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    currentMedications?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    familyHistory?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedProfessionalLevel?: SortOrder
    talentPool?: SortOrderInput | SortOrder
    urgencyReason?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewStartedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    assignedProfessionalId?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    completenessScore?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    version?: SortOrder
    ethnicity?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    diseaseType?: SortOrderInput | SortOrder
    isFirstOccurrence?: SortOrderInput | SortOrder
    geneticFamilyHistory?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    consentAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    uploadedFiles?: UploadedFileOrderByRelationAggregateInput
    statusHistory?: CaseStatusHistoryOrderByRelationAggregateInput
    caseAssignments?: CaseAssignmentOrderByRelationAggregateInput
    aiAnalyses?: AIAnalysisOrderByRelationAggregateInput
    medicalOpinions?: MedicalOpinionOrderByRelationAggregateInput
    professionalPayments?: ProfessionalPaymentOrderByRelationAggregateInput
    questionnaireResponse?: QuestionnaireResponseOrderByWithRelationInput
    casePayment?: CasePaymentOrderByWithRelationInput
  }

  export type MedicalCaseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    caseNumber?: string
    AND?: MedicalCaseWhereInput | MedicalCaseWhereInput[]
    OR?: MedicalCaseWhereInput[]
    NOT?: MedicalCaseWhereInput | MedicalCaseWhereInput[]
    customerId?: StringFilter<"MedicalCase"> | string
    firstName?: StringFilter<"MedicalCase"> | string
    middleName?: StringNullableFilter<"MedicalCase"> | string | null
    lastName?: StringFilter<"MedicalCase"> | string
    dateOfBirth?: DateTimeFilter<"MedicalCase"> | Date | string
    email?: StringFilter<"MedicalCase"> | string
    phone?: StringNullableFilter<"MedicalCase"> | string | null
    title?: StringFilter<"MedicalCase"> | string
    description?: StringFilter<"MedicalCase"> | string
    chiefComplaint?: StringNullableFilter<"MedicalCase"> | string | null
    category?: StringFilter<"MedicalCase"> | string
    medicalHistory?: JsonNullableFilter<"MedicalCase">
    currentMedications?: JsonNullableFilter<"MedicalCase">
    allergies?: JsonNullableFilter<"MedicalCase">
    familyHistory?: JsonNullableFilter<"MedicalCase">
    status?: StringFilter<"MedicalCase"> | string
    priority?: StringFilter<"MedicalCase"> | string
    requestedProfessionalLevel?: StringFilter<"MedicalCase"> | string
    talentPool?: StringNullableFilter<"MedicalCase"> | string | null
    urgencyReason?: StringNullableFilter<"MedicalCase"> | string | null
    submittedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    reviewStartedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    assignedProfessionalId?: StringNullableFilter<"MedicalCase"> | string | null
    assignedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    qualityScore?: FloatNullableFilter<"MedicalCase"> | number | null
    completenessScore?: FloatNullableFilter<"MedicalCase"> | number | null
    metadata?: JsonNullableFilter<"MedicalCase">
    tags?: StringNullableListFilter<"MedicalCase">
    version?: IntFilter<"MedicalCase"> | number
    ethnicity?: StringNullableFilter<"MedicalCase"> | string | null
    gender?: StringNullableFilter<"MedicalCase"> | string | null
    diseaseType?: StringNullableFilter<"MedicalCase"> | string | null
    isFirstOccurrence?: BoolNullableFilter<"MedicalCase"> | boolean | null
    geneticFamilyHistory?: JsonNullableFilter<"MedicalCase">
    paymentId?: StringNullableFilter<"MedicalCase"> | string | null
    consentAccepted?: BoolFilter<"MedicalCase"> | boolean
    createdAt?: DateTimeFilter<"MedicalCase"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCase"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    uploadedFiles?: UploadedFileListRelationFilter
    statusHistory?: CaseStatusHistoryListRelationFilter
    caseAssignments?: CaseAssignmentListRelationFilter
    aiAnalyses?: AIAnalysisListRelationFilter
    medicalOpinions?: MedicalOpinionListRelationFilter
    professionalPayments?: ProfessionalPaymentListRelationFilter
    questionnaireResponse?: XOR<QuestionnaireResponseNullableScalarRelationFilter, QuestionnaireResponseWhereInput> | null
    casePayment?: XOR<CasePaymentNullableScalarRelationFilter, CasePaymentWhereInput> | null
  }, "id" | "caseNumber">

  export type MedicalCaseOrderByWithAggregationInput = {
    id?: SortOrder
    caseNumber?: SortOrder
    customerId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    title?: SortOrder
    description?: SortOrder
    chiefComplaint?: SortOrderInput | SortOrder
    category?: SortOrder
    medicalHistory?: SortOrderInput | SortOrder
    currentMedications?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    familyHistory?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedProfessionalLevel?: SortOrder
    talentPool?: SortOrderInput | SortOrder
    urgencyReason?: SortOrderInput | SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewStartedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    assignedProfessionalId?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    qualityScore?: SortOrderInput | SortOrder
    completenessScore?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    tags?: SortOrder
    version?: SortOrder
    ethnicity?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    diseaseType?: SortOrderInput | SortOrder
    isFirstOccurrence?: SortOrderInput | SortOrder
    geneticFamilyHistory?: SortOrderInput | SortOrder
    paymentId?: SortOrderInput | SortOrder
    consentAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalCaseCountOrderByAggregateInput
    _avg?: MedicalCaseAvgOrderByAggregateInput
    _max?: MedicalCaseMaxOrderByAggregateInput
    _min?: MedicalCaseMinOrderByAggregateInput
    _sum?: MedicalCaseSumOrderByAggregateInput
  }

  export type MedicalCaseScalarWhereWithAggregatesInput = {
    AND?: MedicalCaseScalarWhereWithAggregatesInput | MedicalCaseScalarWhereWithAggregatesInput[]
    OR?: MedicalCaseScalarWhereWithAggregatesInput[]
    NOT?: MedicalCaseScalarWhereWithAggregatesInput | MedicalCaseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalCase"> | string
    caseNumber?: StringWithAggregatesFilter<"MedicalCase"> | string
    customerId?: StringWithAggregatesFilter<"MedicalCase"> | string
    firstName?: StringWithAggregatesFilter<"MedicalCase"> | string
    middleName?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    lastName?: StringWithAggregatesFilter<"MedicalCase"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"MedicalCase"> | Date | string
    email?: StringWithAggregatesFilter<"MedicalCase"> | string
    phone?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    title?: StringWithAggregatesFilter<"MedicalCase"> | string
    description?: StringWithAggregatesFilter<"MedicalCase"> | string
    chiefComplaint?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    category?: StringWithAggregatesFilter<"MedicalCase"> | string
    medicalHistory?: JsonNullableWithAggregatesFilter<"MedicalCase">
    currentMedications?: JsonNullableWithAggregatesFilter<"MedicalCase">
    allergies?: JsonNullableWithAggregatesFilter<"MedicalCase">
    familyHistory?: JsonNullableWithAggregatesFilter<"MedicalCase">
    status?: StringWithAggregatesFilter<"MedicalCase"> | string
    priority?: StringWithAggregatesFilter<"MedicalCase"> | string
    requestedProfessionalLevel?: StringWithAggregatesFilter<"MedicalCase"> | string
    talentPool?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    urgencyReason?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    submittedAt?: DateTimeNullableWithAggregatesFilter<"MedicalCase"> | Date | string | null
    reviewStartedAt?: DateTimeNullableWithAggregatesFilter<"MedicalCase"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"MedicalCase"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"MedicalCase"> | Date | string | null
    assignedProfessionalId?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    assignedAt?: DateTimeNullableWithAggregatesFilter<"MedicalCase"> | Date | string | null
    qualityScore?: FloatNullableWithAggregatesFilter<"MedicalCase"> | number | null
    completenessScore?: FloatNullableWithAggregatesFilter<"MedicalCase"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"MedicalCase">
    tags?: StringNullableListFilter<"MedicalCase">
    version?: IntWithAggregatesFilter<"MedicalCase"> | number
    ethnicity?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    gender?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    diseaseType?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    isFirstOccurrence?: BoolNullableWithAggregatesFilter<"MedicalCase"> | boolean | null
    geneticFamilyHistory?: JsonNullableWithAggregatesFilter<"MedicalCase">
    paymentId?: StringNullableWithAggregatesFilter<"MedicalCase"> | string | null
    consentAccepted?: BoolWithAggregatesFilter<"MedicalCase"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MedicalCase"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalCase"> | Date | string
  }

  export type CaseStatusHistoryWhereInput = {
    AND?: CaseStatusHistoryWhereInput | CaseStatusHistoryWhereInput[]
    OR?: CaseStatusHistoryWhereInput[]
    NOT?: CaseStatusHistoryWhereInput | CaseStatusHistoryWhereInput[]
    id?: StringFilter<"CaseStatusHistory"> | string
    caseId?: StringFilter<"CaseStatusHistory"> | string
    fromStatus?: StringNullableFilter<"CaseStatusHistory"> | string | null
    toStatus?: StringFilter<"CaseStatusHistory"> | string
    reason?: StringNullableFilter<"CaseStatusHistory"> | string | null
    notes?: StringNullableFilter<"CaseStatusHistory"> | string | null
    changedByType?: StringFilter<"CaseStatusHistory"> | string
    changedById?: StringFilter<"CaseStatusHistory"> | string
    createdAt?: DateTimeFilter<"CaseStatusHistory"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }

  export type CaseStatusHistoryOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    fromStatus?: SortOrderInput | SortOrder
    toStatus?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    changedByType?: SortOrder
    changedById?: SortOrder
    createdAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
  }

  export type CaseStatusHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseStatusHistoryWhereInput | CaseStatusHistoryWhereInput[]
    OR?: CaseStatusHistoryWhereInput[]
    NOT?: CaseStatusHistoryWhereInput | CaseStatusHistoryWhereInput[]
    caseId?: StringFilter<"CaseStatusHistory"> | string
    fromStatus?: StringNullableFilter<"CaseStatusHistory"> | string | null
    toStatus?: StringFilter<"CaseStatusHistory"> | string
    reason?: StringNullableFilter<"CaseStatusHistory"> | string | null
    notes?: StringNullableFilter<"CaseStatusHistory"> | string | null
    changedByType?: StringFilter<"CaseStatusHistory"> | string
    changedById?: StringFilter<"CaseStatusHistory"> | string
    createdAt?: DateTimeFilter<"CaseStatusHistory"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }, "id">

  export type CaseStatusHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    fromStatus?: SortOrderInput | SortOrder
    toStatus?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    changedByType?: SortOrder
    changedById?: SortOrder
    createdAt?: SortOrder
    _count?: CaseStatusHistoryCountOrderByAggregateInput
    _max?: CaseStatusHistoryMaxOrderByAggregateInput
    _min?: CaseStatusHistoryMinOrderByAggregateInput
  }

  export type CaseStatusHistoryScalarWhereWithAggregatesInput = {
    AND?: CaseStatusHistoryScalarWhereWithAggregatesInput | CaseStatusHistoryScalarWhereWithAggregatesInput[]
    OR?: CaseStatusHistoryScalarWhereWithAggregatesInput[]
    NOT?: CaseStatusHistoryScalarWhereWithAggregatesInput | CaseStatusHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseStatusHistory"> | string
    caseId?: StringWithAggregatesFilter<"CaseStatusHistory"> | string
    fromStatus?: StringNullableWithAggregatesFilter<"CaseStatusHistory"> | string | null
    toStatus?: StringWithAggregatesFilter<"CaseStatusHistory"> | string
    reason?: StringNullableWithAggregatesFilter<"CaseStatusHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"CaseStatusHistory"> | string | null
    changedByType?: StringWithAggregatesFilter<"CaseStatusHistory"> | string
    changedById?: StringWithAggregatesFilter<"CaseStatusHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CaseStatusHistory"> | Date | string
  }

  export type UploadedFileWhereInput = {
    AND?: UploadedFileWhereInput | UploadedFileWhereInput[]
    OR?: UploadedFileWhereInput[]
    NOT?: UploadedFileWhereInput | UploadedFileWhereInput[]
    id?: StringFilter<"UploadedFile"> | string
    caseId?: StringFilter<"UploadedFile"> | string
    filename?: StringFilter<"UploadedFile"> | string
    s3Key?: StringFilter<"UploadedFile"> | string
    mimetype?: StringFilter<"UploadedFile"> | string
    size?: IntFilter<"UploadedFile"> | number
    category?: StringFilter<"UploadedFile"> | string
    metadata?: JsonNullableFilter<"UploadedFile">
    checksum?: StringNullableFilter<"UploadedFile"> | string | null
    encrypted?: BoolFilter<"UploadedFile"> | boolean
    createdAt?: DateTimeFilter<"UploadedFile"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }

  export type UploadedFileOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    filename?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    metadata?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    encrypted?: SortOrder
    createdAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
  }

  export type UploadedFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UploadedFileWhereInput | UploadedFileWhereInput[]
    OR?: UploadedFileWhereInput[]
    NOT?: UploadedFileWhereInput | UploadedFileWhereInput[]
    caseId?: StringFilter<"UploadedFile"> | string
    filename?: StringFilter<"UploadedFile"> | string
    s3Key?: StringFilter<"UploadedFile"> | string
    mimetype?: StringFilter<"UploadedFile"> | string
    size?: IntFilter<"UploadedFile"> | number
    category?: StringFilter<"UploadedFile"> | string
    metadata?: JsonNullableFilter<"UploadedFile">
    checksum?: StringNullableFilter<"UploadedFile"> | string | null
    encrypted?: BoolFilter<"UploadedFile"> | boolean
    createdAt?: DateTimeFilter<"UploadedFile"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }, "id">

  export type UploadedFileOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    filename?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    metadata?: SortOrderInput | SortOrder
    checksum?: SortOrderInput | SortOrder
    encrypted?: SortOrder
    createdAt?: SortOrder
    _count?: UploadedFileCountOrderByAggregateInput
    _avg?: UploadedFileAvgOrderByAggregateInput
    _max?: UploadedFileMaxOrderByAggregateInput
    _min?: UploadedFileMinOrderByAggregateInput
    _sum?: UploadedFileSumOrderByAggregateInput
  }

  export type UploadedFileScalarWhereWithAggregatesInput = {
    AND?: UploadedFileScalarWhereWithAggregatesInput | UploadedFileScalarWhereWithAggregatesInput[]
    OR?: UploadedFileScalarWhereWithAggregatesInput[]
    NOT?: UploadedFileScalarWhereWithAggregatesInput | UploadedFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UploadedFile"> | string
    caseId?: StringWithAggregatesFilter<"UploadedFile"> | string
    filename?: StringWithAggregatesFilter<"UploadedFile"> | string
    s3Key?: StringWithAggregatesFilter<"UploadedFile"> | string
    mimetype?: StringWithAggregatesFilter<"UploadedFile"> | string
    size?: IntWithAggregatesFilter<"UploadedFile"> | number
    category?: StringWithAggregatesFilter<"UploadedFile"> | string
    metadata?: JsonNullableWithAggregatesFilter<"UploadedFile">
    checksum?: StringNullableWithAggregatesFilter<"UploadedFile"> | string | null
    encrypted?: BoolWithAggregatesFilter<"UploadedFile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UploadedFile"> | Date | string
  }

  export type MedicalProfessionalWhereInput = {
    AND?: MedicalProfessionalWhereInput | MedicalProfessionalWhereInput[]
    OR?: MedicalProfessionalWhereInput[]
    NOT?: MedicalProfessionalWhereInput | MedicalProfessionalWhereInput[]
    id?: StringFilter<"MedicalProfessional"> | string
    proNumber?: StringFilter<"MedicalProfessional"> | string
    firstName?: StringFilter<"MedicalProfessional"> | string
    middleName?: StringNullableFilter<"MedicalProfessional"> | string | null
    lastName?: StringFilter<"MedicalProfessional"> | string
    dob?: DateTimeFilter<"MedicalProfessional"> | Date | string
    email?: StringFilter<"MedicalProfessional"> | string
    phone?: StringNullableFilter<"MedicalProfessional"> | string | null
    nationality?: StringNullableFilter<"MedicalProfessional"> | string | null
    licenseNumber?: StringFilter<"MedicalProfessional"> | string
    licenseCountry?: StringFilter<"MedicalProfessional"> | string
    licenseExpiry?: DateTimeFilter<"MedicalProfessional"> | Date | string
    vetted?: BoolFilter<"MedicalProfessional"> | boolean
    level?: EnumProLevelFilter<"MedicalProfessional"> | $Enums.ProLevel
    cvUrl?: StringNullableFilter<"MedicalProfessional"> | string | null
    documents?: JsonNullableFilter<"MedicalProfessional">
    subspecialties?: JsonNullableFilter<"MedicalProfessional">
    yearsPractice?: IntFilter<"MedicalProfessional"> | number
    publications?: IntFilter<"MedicalProfessional"> | number
    trialInvolved?: BoolFilter<"MedicalProfessional"> | boolean
    leadership?: StringNullableFilter<"MedicalProfessional"> | string | null
    societyMemberships?: JsonNullableFilter<"MedicalProfessional">
    competencyData?: JsonNullableFilter<"MedicalProfessional">
    availability?: JsonNullableFilter<"MedicalProfessional">
    score?: IntNullableFilter<"MedicalProfessional"> | number | null
    hashedPassword?: StringNullableFilter<"MedicalProfessional"> | string | null
    twoFactorMethod?: EnumTwoFactorMethodFilter<"MedicalProfessional"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableFilter<"MedicalProfessional"> | string | null
    profileLastUpdated?: DateTimeNullableFilter<"MedicalProfessional"> | Date | string | null
    codeOfConductAcknowledged?: DateTimeNullableFilter<"MedicalProfessional"> | Date | string | null
    address?: StringNullableFilter<"MedicalProfessional"> | string | null
    billingAddress?: StringNullableFilter<"MedicalProfessional"> | string | null
    bankDetails?: JsonNullableFilter<"MedicalProfessional">
    vatNumber?: StringNullableFilter<"MedicalProfessional"> | string | null
    billingRate?: FloatNullableFilter<"MedicalProfessional"> | number | null
    performanceMetrics?: JsonNullableFilter<"MedicalProfessional">
    createdAt?: DateTimeFilter<"MedicalProfessional"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalProfessional"> | Date | string
    caseAssignments?: CaseAssignmentListRelationFilter
    medicalOpinions?: MedicalOpinionListRelationFilter
    professionalPayments?: ProfessionalPaymentListRelationFilter
    professionalSessions?: ProfessionalSessionListRelationFilter
  }

  export type MedicalProfessionalOrderByWithRelationInput = {
    id?: SortOrder
    proNumber?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    licenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseExpiry?: SortOrder
    vetted?: SortOrder
    level?: SortOrder
    cvUrl?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    subspecialties?: SortOrderInput | SortOrder
    yearsPractice?: SortOrder
    publications?: SortOrder
    trialInvolved?: SortOrder
    leadership?: SortOrderInput | SortOrder
    societyMemberships?: SortOrderInput | SortOrder
    competencyData?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    profileLastUpdated?: SortOrderInput | SortOrder
    codeOfConductAcknowledged?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    bankDetails?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    billingRate?: SortOrderInput | SortOrder
    performanceMetrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    caseAssignments?: CaseAssignmentOrderByRelationAggregateInput
    medicalOpinions?: MedicalOpinionOrderByRelationAggregateInput
    professionalPayments?: ProfessionalPaymentOrderByRelationAggregateInput
    professionalSessions?: ProfessionalSessionOrderByRelationAggregateInput
  }

  export type MedicalProfessionalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    proNumber?: string
    email?: string
    AND?: MedicalProfessionalWhereInput | MedicalProfessionalWhereInput[]
    OR?: MedicalProfessionalWhereInput[]
    NOT?: MedicalProfessionalWhereInput | MedicalProfessionalWhereInput[]
    firstName?: StringFilter<"MedicalProfessional"> | string
    middleName?: StringNullableFilter<"MedicalProfessional"> | string | null
    lastName?: StringFilter<"MedicalProfessional"> | string
    dob?: DateTimeFilter<"MedicalProfessional"> | Date | string
    phone?: StringNullableFilter<"MedicalProfessional"> | string | null
    nationality?: StringNullableFilter<"MedicalProfessional"> | string | null
    licenseNumber?: StringFilter<"MedicalProfessional"> | string
    licenseCountry?: StringFilter<"MedicalProfessional"> | string
    licenseExpiry?: DateTimeFilter<"MedicalProfessional"> | Date | string
    vetted?: BoolFilter<"MedicalProfessional"> | boolean
    level?: EnumProLevelFilter<"MedicalProfessional"> | $Enums.ProLevel
    cvUrl?: StringNullableFilter<"MedicalProfessional"> | string | null
    documents?: JsonNullableFilter<"MedicalProfessional">
    subspecialties?: JsonNullableFilter<"MedicalProfessional">
    yearsPractice?: IntFilter<"MedicalProfessional"> | number
    publications?: IntFilter<"MedicalProfessional"> | number
    trialInvolved?: BoolFilter<"MedicalProfessional"> | boolean
    leadership?: StringNullableFilter<"MedicalProfessional"> | string | null
    societyMemberships?: JsonNullableFilter<"MedicalProfessional">
    competencyData?: JsonNullableFilter<"MedicalProfessional">
    availability?: JsonNullableFilter<"MedicalProfessional">
    score?: IntNullableFilter<"MedicalProfessional"> | number | null
    hashedPassword?: StringNullableFilter<"MedicalProfessional"> | string | null
    twoFactorMethod?: EnumTwoFactorMethodFilter<"MedicalProfessional"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableFilter<"MedicalProfessional"> | string | null
    profileLastUpdated?: DateTimeNullableFilter<"MedicalProfessional"> | Date | string | null
    codeOfConductAcknowledged?: DateTimeNullableFilter<"MedicalProfessional"> | Date | string | null
    address?: StringNullableFilter<"MedicalProfessional"> | string | null
    billingAddress?: StringNullableFilter<"MedicalProfessional"> | string | null
    bankDetails?: JsonNullableFilter<"MedicalProfessional">
    vatNumber?: StringNullableFilter<"MedicalProfessional"> | string | null
    billingRate?: FloatNullableFilter<"MedicalProfessional"> | number | null
    performanceMetrics?: JsonNullableFilter<"MedicalProfessional">
    createdAt?: DateTimeFilter<"MedicalProfessional"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalProfessional"> | Date | string
    caseAssignments?: CaseAssignmentListRelationFilter
    medicalOpinions?: MedicalOpinionListRelationFilter
    professionalPayments?: ProfessionalPaymentListRelationFilter
    professionalSessions?: ProfessionalSessionListRelationFilter
  }, "id" | "proNumber" | "email">

  export type MedicalProfessionalOrderByWithAggregationInput = {
    id?: SortOrder
    proNumber?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    nationality?: SortOrderInput | SortOrder
    licenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseExpiry?: SortOrder
    vetted?: SortOrder
    level?: SortOrder
    cvUrl?: SortOrderInput | SortOrder
    documents?: SortOrderInput | SortOrder
    subspecialties?: SortOrderInput | SortOrder
    yearsPractice?: SortOrder
    publications?: SortOrder
    trialInvolved?: SortOrder
    leadership?: SortOrderInput | SortOrder
    societyMemberships?: SortOrderInput | SortOrder
    competencyData?: SortOrderInput | SortOrder
    availability?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrderInput | SortOrder
    profileLastUpdated?: SortOrderInput | SortOrder
    codeOfConductAcknowledged?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    billingAddress?: SortOrderInput | SortOrder
    bankDetails?: SortOrderInput | SortOrder
    vatNumber?: SortOrderInput | SortOrder
    billingRate?: SortOrderInput | SortOrder
    performanceMetrics?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalProfessionalCountOrderByAggregateInput
    _avg?: MedicalProfessionalAvgOrderByAggregateInput
    _max?: MedicalProfessionalMaxOrderByAggregateInput
    _min?: MedicalProfessionalMinOrderByAggregateInput
    _sum?: MedicalProfessionalSumOrderByAggregateInput
  }

  export type MedicalProfessionalScalarWhereWithAggregatesInput = {
    AND?: MedicalProfessionalScalarWhereWithAggregatesInput | MedicalProfessionalScalarWhereWithAggregatesInput[]
    OR?: MedicalProfessionalScalarWhereWithAggregatesInput[]
    NOT?: MedicalProfessionalScalarWhereWithAggregatesInput | MedicalProfessionalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    proNumber?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    firstName?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    middleName?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    lastName?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    dob?: DateTimeWithAggregatesFilter<"MedicalProfessional"> | Date | string
    email?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    phone?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    nationality?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    licenseNumber?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    licenseCountry?: StringWithAggregatesFilter<"MedicalProfessional"> | string
    licenseExpiry?: DateTimeWithAggregatesFilter<"MedicalProfessional"> | Date | string
    vetted?: BoolWithAggregatesFilter<"MedicalProfessional"> | boolean
    level?: EnumProLevelWithAggregatesFilter<"MedicalProfessional"> | $Enums.ProLevel
    cvUrl?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    documents?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    subspecialties?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    yearsPractice?: IntWithAggregatesFilter<"MedicalProfessional"> | number
    publications?: IntWithAggregatesFilter<"MedicalProfessional"> | number
    trialInvolved?: BoolWithAggregatesFilter<"MedicalProfessional"> | boolean
    leadership?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    societyMemberships?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    competencyData?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    availability?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    score?: IntNullableWithAggregatesFilter<"MedicalProfessional"> | number | null
    hashedPassword?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    twoFactorMethod?: EnumTwoFactorMethodWithAggregatesFilter<"MedicalProfessional"> | $Enums.TwoFactorMethod
    twoFactorSecret?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    profileLastUpdated?: DateTimeNullableWithAggregatesFilter<"MedicalProfessional"> | Date | string | null
    codeOfConductAcknowledged?: DateTimeNullableWithAggregatesFilter<"MedicalProfessional"> | Date | string | null
    address?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    billingAddress?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    bankDetails?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    vatNumber?: StringNullableWithAggregatesFilter<"MedicalProfessional"> | string | null
    billingRate?: FloatNullableWithAggregatesFilter<"MedicalProfessional"> | number | null
    performanceMetrics?: JsonNullableWithAggregatesFilter<"MedicalProfessional">
    createdAt?: DateTimeWithAggregatesFilter<"MedicalProfessional"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalProfessional"> | Date | string
  }

  export type ProfessionalSessionWhereInput = {
    AND?: ProfessionalSessionWhereInput | ProfessionalSessionWhereInput[]
    OR?: ProfessionalSessionWhereInput[]
    NOT?: ProfessionalSessionWhereInput | ProfessionalSessionWhereInput[]
    id?: StringFilter<"ProfessionalSession"> | string
    professionalId?: StringFilter<"ProfessionalSession"> | string
    sessionToken?: StringFilter<"ProfessionalSession"> | string
    twoFactorVerified?: BoolFilter<"ProfessionalSession"> | boolean
    expiresAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
    ipAddress?: StringNullableFilter<"ProfessionalSession"> | string | null
    userAgent?: StringNullableFilter<"ProfessionalSession"> | string | null
    metadata?: JsonNullableFilter<"ProfessionalSession">
    createdAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }

  export type ProfessionalSessionOrderByWithRelationInput = {
    id?: SortOrder
    professionalId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    professional?: MedicalProfessionalOrderByWithRelationInput
  }

  export type ProfessionalSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: ProfessionalSessionWhereInput | ProfessionalSessionWhereInput[]
    OR?: ProfessionalSessionWhereInput[]
    NOT?: ProfessionalSessionWhereInput | ProfessionalSessionWhereInput[]
    professionalId?: StringFilter<"ProfessionalSession"> | string
    twoFactorVerified?: BoolFilter<"ProfessionalSession"> | boolean
    expiresAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
    ipAddress?: StringNullableFilter<"ProfessionalSession"> | string | null
    userAgent?: StringNullableFilter<"ProfessionalSession"> | string | null
    metadata?: JsonNullableFilter<"ProfessionalSession">
    createdAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }, "id" | "sessionToken">

  export type ProfessionalSessionOrderByWithAggregationInput = {
    id?: SortOrder
    professionalId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProfessionalSessionCountOrderByAggregateInput
    _max?: ProfessionalSessionMaxOrderByAggregateInput
    _min?: ProfessionalSessionMinOrderByAggregateInput
  }

  export type ProfessionalSessionScalarWhereWithAggregatesInput = {
    AND?: ProfessionalSessionScalarWhereWithAggregatesInput | ProfessionalSessionScalarWhereWithAggregatesInput[]
    OR?: ProfessionalSessionScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalSessionScalarWhereWithAggregatesInput | ProfessionalSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalSession"> | string
    professionalId?: StringWithAggregatesFilter<"ProfessionalSession"> | string
    sessionToken?: StringWithAggregatesFilter<"ProfessionalSession"> | string
    twoFactorVerified?: BoolWithAggregatesFilter<"ProfessionalSession"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"ProfessionalSession"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"ProfessionalSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ProfessionalSession"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ProfessionalSession">
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionalSession"> | Date | string
  }

  export type CaseAssignmentWhereInput = {
    AND?: CaseAssignmentWhereInput | CaseAssignmentWhereInput[]
    OR?: CaseAssignmentWhereInput[]
    NOT?: CaseAssignmentWhereInput | CaseAssignmentWhereInput[]
    id?: StringFilter<"CaseAssignment"> | string
    caseId?: StringFilter<"CaseAssignment"> | string
    professionalId?: StringFilter<"CaseAssignment"> | string
    status?: StringFilter<"CaseAssignment"> | string
    assignedAt?: DateTimeFilter<"CaseAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    estimatedDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    actualDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    metadata?: JsonNullableFilter<"CaseAssignment">
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }

  export type CaseAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    case?: MedicalCaseOrderByWithRelationInput
    professional?: MedicalProfessionalOrderByWithRelationInput
  }

  export type CaseAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CaseAssignmentWhereInput | CaseAssignmentWhereInput[]
    OR?: CaseAssignmentWhereInput[]
    NOT?: CaseAssignmentWhereInput | CaseAssignmentWhereInput[]
    caseId?: StringFilter<"CaseAssignment"> | string
    professionalId?: StringFilter<"CaseAssignment"> | string
    status?: StringFilter<"CaseAssignment"> | string
    assignedAt?: DateTimeFilter<"CaseAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    estimatedDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    actualDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    metadata?: JsonNullableFilter<"CaseAssignment">
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }, "id">

  export type CaseAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    _count?: CaseAssignmentCountOrderByAggregateInput
    _avg?: CaseAssignmentAvgOrderByAggregateInput
    _max?: CaseAssignmentMaxOrderByAggregateInput
    _min?: CaseAssignmentMinOrderByAggregateInput
    _sum?: CaseAssignmentSumOrderByAggregateInput
  }

  export type CaseAssignmentScalarWhereWithAggregatesInput = {
    AND?: CaseAssignmentScalarWhereWithAggregatesInput | CaseAssignmentScalarWhereWithAggregatesInput[]
    OR?: CaseAssignmentScalarWhereWithAggregatesInput[]
    NOT?: CaseAssignmentScalarWhereWithAggregatesInput | CaseAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CaseAssignment"> | string
    caseId?: StringWithAggregatesFilter<"CaseAssignment"> | string
    professionalId?: StringWithAggregatesFilter<"CaseAssignment"> | string
    status?: StringWithAggregatesFilter<"CaseAssignment"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"CaseAssignment"> | Date | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"CaseAssignment"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"CaseAssignment"> | Date | string | null
    estimatedDuration?: IntNullableWithAggregatesFilter<"CaseAssignment"> | number | null
    actualDuration?: IntNullableWithAggregatesFilter<"CaseAssignment"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"CaseAssignment">
  }

  export type AIAnalysisWhereInput = {
    AND?: AIAnalysisWhereInput | AIAnalysisWhereInput[]
    OR?: AIAnalysisWhereInput[]
    NOT?: AIAnalysisWhereInput | AIAnalysisWhereInput[]
    id?: StringFilter<"AIAnalysis"> | string
    caseId?: StringFilter<"AIAnalysis"> | string
    analysisType?: StringFilter<"AIAnalysis"> | string
    results?: JsonFilter<"AIAnalysis">
    confidence?: FloatNullableFilter<"AIAnalysis"> | number | null
    processingTime?: IntNullableFilter<"AIAnalysis"> | number | null
    aiProvider?: StringNullableFilter<"AIAnalysis"> | string | null
    modelVersion?: StringNullableFilter<"AIAnalysis"> | string | null
    cost?: FloatNullableFilter<"AIAnalysis"> | number | null
    metadata?: JsonNullableFilter<"AIAnalysis">
    createdAt?: DateTimeFilter<"AIAnalysis"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }

  export type AIAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    confidence?: SortOrderInput | SortOrder
    processingTime?: SortOrderInput | SortOrder
    aiProvider?: SortOrderInput | SortOrder
    modelVersion?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
  }

  export type AIAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIAnalysisWhereInput | AIAnalysisWhereInput[]
    OR?: AIAnalysisWhereInput[]
    NOT?: AIAnalysisWhereInput | AIAnalysisWhereInput[]
    caseId?: StringFilter<"AIAnalysis"> | string
    analysisType?: StringFilter<"AIAnalysis"> | string
    results?: JsonFilter<"AIAnalysis">
    confidence?: FloatNullableFilter<"AIAnalysis"> | number | null
    processingTime?: IntNullableFilter<"AIAnalysis"> | number | null
    aiProvider?: StringNullableFilter<"AIAnalysis"> | string | null
    modelVersion?: StringNullableFilter<"AIAnalysis"> | string | null
    cost?: FloatNullableFilter<"AIAnalysis"> | number | null
    metadata?: JsonNullableFilter<"AIAnalysis">
    createdAt?: DateTimeFilter<"AIAnalysis"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
  }, "id">

  export type AIAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    confidence?: SortOrderInput | SortOrder
    processingTime?: SortOrderInput | SortOrder
    aiProvider?: SortOrderInput | SortOrder
    modelVersion?: SortOrderInput | SortOrder
    cost?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AIAnalysisCountOrderByAggregateInput
    _avg?: AIAnalysisAvgOrderByAggregateInput
    _max?: AIAnalysisMaxOrderByAggregateInput
    _min?: AIAnalysisMinOrderByAggregateInput
    _sum?: AIAnalysisSumOrderByAggregateInput
  }

  export type AIAnalysisScalarWhereWithAggregatesInput = {
    AND?: AIAnalysisScalarWhereWithAggregatesInput | AIAnalysisScalarWhereWithAggregatesInput[]
    OR?: AIAnalysisScalarWhereWithAggregatesInput[]
    NOT?: AIAnalysisScalarWhereWithAggregatesInput | AIAnalysisScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIAnalysis"> | string
    caseId?: StringWithAggregatesFilter<"AIAnalysis"> | string
    analysisType?: StringWithAggregatesFilter<"AIAnalysis"> | string
    results?: JsonWithAggregatesFilter<"AIAnalysis">
    confidence?: FloatNullableWithAggregatesFilter<"AIAnalysis"> | number | null
    processingTime?: IntNullableWithAggregatesFilter<"AIAnalysis"> | number | null
    aiProvider?: StringNullableWithAggregatesFilter<"AIAnalysis"> | string | null
    modelVersion?: StringNullableWithAggregatesFilter<"AIAnalysis"> | string | null
    cost?: FloatNullableWithAggregatesFilter<"AIAnalysis"> | number | null
    metadata?: JsonNullableWithAggregatesFilter<"AIAnalysis">
    createdAt?: DateTimeWithAggregatesFilter<"AIAnalysis"> | Date | string
  }

  export type MedicalOpinionWhereInput = {
    AND?: MedicalOpinionWhereInput | MedicalOpinionWhereInput[]
    OR?: MedicalOpinionWhereInput[]
    NOT?: MedicalOpinionWhereInput | MedicalOpinionWhereInput[]
    id?: StringFilter<"MedicalOpinion"> | string
    caseId?: StringFilter<"MedicalOpinion"> | string
    professionalId?: StringFilter<"MedicalOpinion"> | string
    content?: StringFilter<"MedicalOpinion"> | string
    status?: StringFilter<"MedicalOpinion"> | string
    version?: IntFilter<"MedicalOpinion"> | number
    digitalSignature?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedBy?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    metadata?: JsonNullableFilter<"MedicalOpinion">
    createdAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }

  export type MedicalOpinionOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    version?: SortOrder
    digitalSignature?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
    professional?: MedicalProfessionalOrderByWithRelationInput
  }

  export type MedicalOpinionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalOpinionWhereInput | MedicalOpinionWhereInput[]
    OR?: MedicalOpinionWhereInput[]
    NOT?: MedicalOpinionWhereInput | MedicalOpinionWhereInput[]
    caseId?: StringFilter<"MedicalOpinion"> | string
    professionalId?: StringFilter<"MedicalOpinion"> | string
    content?: StringFilter<"MedicalOpinion"> | string
    status?: StringFilter<"MedicalOpinion"> | string
    version?: IntFilter<"MedicalOpinion"> | number
    digitalSignature?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedBy?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    metadata?: JsonNullableFilter<"MedicalOpinion">
    createdAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }, "id">

  export type MedicalOpinionOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    version?: SortOrder
    digitalSignature?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    publishedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MedicalOpinionCountOrderByAggregateInput
    _avg?: MedicalOpinionAvgOrderByAggregateInput
    _max?: MedicalOpinionMaxOrderByAggregateInput
    _min?: MedicalOpinionMinOrderByAggregateInput
    _sum?: MedicalOpinionSumOrderByAggregateInput
  }

  export type MedicalOpinionScalarWhereWithAggregatesInput = {
    AND?: MedicalOpinionScalarWhereWithAggregatesInput | MedicalOpinionScalarWhereWithAggregatesInput[]
    OR?: MedicalOpinionScalarWhereWithAggregatesInput[]
    NOT?: MedicalOpinionScalarWhereWithAggregatesInput | MedicalOpinionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalOpinion"> | string
    caseId?: StringWithAggregatesFilter<"MedicalOpinion"> | string
    professionalId?: StringWithAggregatesFilter<"MedicalOpinion"> | string
    content?: StringWithAggregatesFilter<"MedicalOpinion"> | string
    status?: StringWithAggregatesFilter<"MedicalOpinion"> | string
    version?: IntWithAggregatesFilter<"MedicalOpinion"> | number
    digitalSignature?: StringNullableWithAggregatesFilter<"MedicalOpinion"> | string | null
    reviewedBy?: StringNullableWithAggregatesFilter<"MedicalOpinion"> | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"MedicalOpinion"> | Date | string | null
    publishedAt?: DateTimeNullableWithAggregatesFilter<"MedicalOpinion"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"MedicalOpinion">
    createdAt?: DateTimeWithAggregatesFilter<"MedicalOpinion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalOpinion"> | Date | string
  }

  export type ProfessionalPaymentWhereInput = {
    AND?: ProfessionalPaymentWhereInput | ProfessionalPaymentWhereInput[]
    OR?: ProfessionalPaymentWhereInput[]
    NOT?: ProfessionalPaymentWhereInput | ProfessionalPaymentWhereInput[]
    id?: StringFilter<"ProfessionalPayment"> | string
    caseId?: StringFilter<"ProfessionalPayment"> | string
    professionalId?: StringFilter<"ProfessionalPayment"> | string
    amount?: FloatFilter<"ProfessionalPayment"> | number
    currency?: StringFilter<"ProfessionalPayment"> | string
    status?: StringFilter<"ProfessionalPayment"> | string
    paymentMethod?: StringNullableFilter<"ProfessionalPayment"> | string | null
    transactionId?: StringNullableFilter<"ProfessionalPayment"> | string | null
    processedAt?: DateTimeNullableFilter<"ProfessionalPayment"> | Date | string | null
    metadata?: JsonNullableFilter<"ProfessionalPayment">
    createdAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }

  export type ProfessionalPaymentOrderByWithRelationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    case?: MedicalCaseOrderByWithRelationInput
    professional?: MedicalProfessionalOrderByWithRelationInput
  }

  export type ProfessionalPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProfessionalPaymentWhereInput | ProfessionalPaymentWhereInput[]
    OR?: ProfessionalPaymentWhereInput[]
    NOT?: ProfessionalPaymentWhereInput | ProfessionalPaymentWhereInput[]
    caseId?: StringFilter<"ProfessionalPayment"> | string
    professionalId?: StringFilter<"ProfessionalPayment"> | string
    amount?: FloatFilter<"ProfessionalPayment"> | number
    currency?: StringFilter<"ProfessionalPayment"> | string
    status?: StringFilter<"ProfessionalPayment"> | string
    paymentMethod?: StringNullableFilter<"ProfessionalPayment"> | string | null
    transactionId?: StringNullableFilter<"ProfessionalPayment"> | string | null
    processedAt?: DateTimeNullableFilter<"ProfessionalPayment"> | Date | string | null
    metadata?: JsonNullableFilter<"ProfessionalPayment">
    createdAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
    case?: XOR<MedicalCaseScalarRelationFilter, MedicalCaseWhereInput>
    professional?: XOR<MedicalProfessionalScalarRelationFilter, MedicalProfessionalWhereInput>
  }, "id">

  export type ProfessionalPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrderInput | SortOrder
    transactionId?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionalPaymentCountOrderByAggregateInput
    _avg?: ProfessionalPaymentAvgOrderByAggregateInput
    _max?: ProfessionalPaymentMaxOrderByAggregateInput
    _min?: ProfessionalPaymentMinOrderByAggregateInput
    _sum?: ProfessionalPaymentSumOrderByAggregateInput
  }

  export type ProfessionalPaymentScalarWhereWithAggregatesInput = {
    AND?: ProfessionalPaymentScalarWhereWithAggregatesInput | ProfessionalPaymentScalarWhereWithAggregatesInput[]
    OR?: ProfessionalPaymentScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalPaymentScalarWhereWithAggregatesInput | ProfessionalPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalPayment"> | string
    caseId?: StringWithAggregatesFilter<"ProfessionalPayment"> | string
    professionalId?: StringWithAggregatesFilter<"ProfessionalPayment"> | string
    amount?: FloatWithAggregatesFilter<"ProfessionalPayment"> | number
    currency?: StringWithAggregatesFilter<"ProfessionalPayment"> | string
    status?: StringWithAggregatesFilter<"ProfessionalPayment"> | string
    paymentMethod?: StringNullableWithAggregatesFilter<"ProfessionalPayment"> | string | null
    transactionId?: StringNullableWithAggregatesFilter<"ProfessionalPayment"> | string | null
    processedAt?: DateTimeNullableWithAggregatesFilter<"ProfessionalPayment"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"ProfessionalPayment">
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionalPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionalPayment"> | Date | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    hashedPassword?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    permissions?: JsonNullableFilter<"Admin">
    lastLoginAt?: DateTimeNullableFilter<"Admin"> | Date | string | null
    metadata?: JsonNullableFilter<"Admin">
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    hashedPassword?: StringFilter<"Admin"> | string
    role?: StringFilter<"Admin"> | string
    permissions?: JsonNullableFilter<"Admin">
    lastLoginAt?: DateTimeNullableFilter<"Admin"> | Date | string | null
    metadata?: JsonNullableFilter<"Admin">
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    role?: SortOrder
    permissions?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    hashedPassword?: StringWithAggregatesFilter<"Admin"> | string
    role?: StringWithAggregatesFilter<"Admin"> | string
    permissions?: JsonNullableWithAggregatesFilter<"Admin">
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"Admin"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Admin">
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
  }

  export type ProfessionalCandidateWhereInput = {
    AND?: ProfessionalCandidateWhereInput | ProfessionalCandidateWhereInput[]
    OR?: ProfessionalCandidateWhereInput[]
    NOT?: ProfessionalCandidateWhereInput | ProfessionalCandidateWhereInput[]
    id?: StringFilter<"ProfessionalCandidate"> | string
    firstName?: StringFilter<"ProfessionalCandidate"> | string
    middleName?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    lastName?: StringFilter<"ProfessionalCandidate"> | string
    dateOfBirth?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    nationality?: StringFilter<"ProfessionalCandidate"> | string
    email?: StringFilter<"ProfessionalCandidate"> | string
    phone?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    emailVerified?: BoolFilter<"ProfessionalCandidate"> | boolean
    emailVerificationToken?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    medicalDegreeUploaded?: BoolFilter<"ProfessionalCandidate"> | boolean
    residencyCompleted?: BoolFilter<"ProfessionalCandidate"> | boolean
    fellowshipCompleted?: BoolFilter<"ProfessionalCandidate"> | boolean
    boardCertificationNumber?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    medicalLicenseNumber?: StringFilter<"ProfessionalCandidate"> | string
    licenseCountry?: StringFilter<"ProfessionalCandidate"> | string
    licenseState?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    licenseExpiry?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    certificateGoodStanding?: BoolFilter<"ProfessionalCandidate"> | boolean
    yearsIndependentPractice?: IntFilter<"ProfessionalCandidate"> | number
    currentAffiliation?: StringFilter<"ProfessionalCandidate"> | string
    subspecialties?: JsonNullableFilter<"ProfessionalCandidate">
    annualPatientLoad?: IntNullableFilter<"ProfessionalCandidate"> | number | null
    secondOpinionsGiven?: IntNullableFilter<"ProfessionalCandidate"> | number | null
    peerReviewedPublications?: IntFilter<"ProfessionalCandidate"> | number
    clinicalTrialInvolvement?: BoolFilter<"ProfessionalCandidate"> | boolean
    clinicalTrialDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    conferencepresentations?: BoolFilter<"ProfessionalCandidate"> | boolean
    conferenceDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    teachingRoles?: BoolFilter<"ProfessionalCandidate"> | boolean
    teachingDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    oncologySocieties?: JsonNullableFilter<"ProfessionalCandidate">
    awardsHonors?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    leadershipRoles?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    professionalReferences?: JsonNullableFilter<"ProfessionalCandidate">
    malpracticeInsurance?: BoolFilter<"ProfessionalCandidate"> | boolean
    noActiveDisciplinary?: BoolFilter<"ProfessionalCandidate"> | boolean
    dataProtectionAgreed?: BoolFilter<"ProfessionalCandidate"> | boolean
    competencyScore?: FloatNullableFilter<"ProfessionalCandidate"> | number | null
    competencyLevel?: EnumProLevelNullableFilter<"ProfessionalCandidate"> | $Enums.ProLevel | null
    scoreBreakdown?: JsonNullableFilter<"ProfessionalCandidate">
    applicationStatus?: EnumCandidateStatusFilter<"ProfessionalCandidate"> | $Enums.CandidateStatus
    submittedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewStartedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedBy?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    reviewNotes?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    rejectionReason?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    approvedToProfessionalId?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    createdAt?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    documents?: CandidateDocumentListRelationFilter
    reviews?: ApplicationReviewListRelationFilter
  }

  export type ProfessionalCandidateOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    medicalDegreeUploaded?: SortOrder
    residencyCompleted?: SortOrder
    fellowshipCompleted?: SortOrder
    boardCertificationNumber?: SortOrderInput | SortOrder
    medicalLicenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseState?: SortOrderInput | SortOrder
    licenseExpiry?: SortOrder
    certificateGoodStanding?: SortOrder
    yearsIndependentPractice?: SortOrder
    currentAffiliation?: SortOrder
    subspecialties?: SortOrderInput | SortOrder
    annualPatientLoad?: SortOrderInput | SortOrder
    secondOpinionsGiven?: SortOrderInput | SortOrder
    peerReviewedPublications?: SortOrder
    clinicalTrialInvolvement?: SortOrder
    clinicalTrialDetails?: SortOrderInput | SortOrder
    conferencepresentations?: SortOrder
    conferenceDetails?: SortOrderInput | SortOrder
    teachingRoles?: SortOrder
    teachingDetails?: SortOrderInput | SortOrder
    oncologySocieties?: SortOrderInput | SortOrder
    awardsHonors?: SortOrderInput | SortOrder
    leadershipRoles?: SortOrderInput | SortOrder
    professionalReferences?: SortOrderInput | SortOrder
    malpracticeInsurance?: SortOrder
    noActiveDisciplinary?: SortOrder
    dataProtectionAgreed?: SortOrder
    competencyScore?: SortOrderInput | SortOrder
    competencyLevel?: SortOrderInput | SortOrder
    scoreBreakdown?: SortOrderInput | SortOrder
    applicationStatus?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewStartedAt?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    approvedToProfessionalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documents?: CandidateDocumentOrderByRelationAggregateInput
    reviews?: ApplicationReviewOrderByRelationAggregateInput
  }

  export type ProfessionalCandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: ProfessionalCandidateWhereInput | ProfessionalCandidateWhereInput[]
    OR?: ProfessionalCandidateWhereInput[]
    NOT?: ProfessionalCandidateWhereInput | ProfessionalCandidateWhereInput[]
    firstName?: StringFilter<"ProfessionalCandidate"> | string
    middleName?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    lastName?: StringFilter<"ProfessionalCandidate"> | string
    dateOfBirth?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    nationality?: StringFilter<"ProfessionalCandidate"> | string
    phone?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    emailVerified?: BoolFilter<"ProfessionalCandidate"> | boolean
    emailVerificationToken?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    medicalDegreeUploaded?: BoolFilter<"ProfessionalCandidate"> | boolean
    residencyCompleted?: BoolFilter<"ProfessionalCandidate"> | boolean
    fellowshipCompleted?: BoolFilter<"ProfessionalCandidate"> | boolean
    boardCertificationNumber?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    medicalLicenseNumber?: StringFilter<"ProfessionalCandidate"> | string
    licenseCountry?: StringFilter<"ProfessionalCandidate"> | string
    licenseState?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    licenseExpiry?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    certificateGoodStanding?: BoolFilter<"ProfessionalCandidate"> | boolean
    yearsIndependentPractice?: IntFilter<"ProfessionalCandidate"> | number
    currentAffiliation?: StringFilter<"ProfessionalCandidate"> | string
    subspecialties?: JsonNullableFilter<"ProfessionalCandidate">
    annualPatientLoad?: IntNullableFilter<"ProfessionalCandidate"> | number | null
    secondOpinionsGiven?: IntNullableFilter<"ProfessionalCandidate"> | number | null
    peerReviewedPublications?: IntFilter<"ProfessionalCandidate"> | number
    clinicalTrialInvolvement?: BoolFilter<"ProfessionalCandidate"> | boolean
    clinicalTrialDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    conferencepresentations?: BoolFilter<"ProfessionalCandidate"> | boolean
    conferenceDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    teachingRoles?: BoolFilter<"ProfessionalCandidate"> | boolean
    teachingDetails?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    oncologySocieties?: JsonNullableFilter<"ProfessionalCandidate">
    awardsHonors?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    leadershipRoles?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    professionalReferences?: JsonNullableFilter<"ProfessionalCandidate">
    malpracticeInsurance?: BoolFilter<"ProfessionalCandidate"> | boolean
    noActiveDisciplinary?: BoolFilter<"ProfessionalCandidate"> | boolean
    dataProtectionAgreed?: BoolFilter<"ProfessionalCandidate"> | boolean
    competencyScore?: FloatNullableFilter<"ProfessionalCandidate"> | number | null
    competencyLevel?: EnumProLevelNullableFilter<"ProfessionalCandidate"> | $Enums.ProLevel | null
    scoreBreakdown?: JsonNullableFilter<"ProfessionalCandidate">
    applicationStatus?: EnumCandidateStatusFilter<"ProfessionalCandidate"> | $Enums.CandidateStatus
    submittedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewStartedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedAt?: DateTimeNullableFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedBy?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    reviewNotes?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    rejectionReason?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    approvedToProfessionalId?: StringNullableFilter<"ProfessionalCandidate"> | string | null
    createdAt?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalCandidate"> | Date | string
    documents?: CandidateDocumentListRelationFilter
    reviews?: ApplicationReviewListRelationFilter
  }, "id" | "email">

  export type ProfessionalCandidateOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    medicalDegreeUploaded?: SortOrder
    residencyCompleted?: SortOrder
    fellowshipCompleted?: SortOrder
    boardCertificationNumber?: SortOrderInput | SortOrder
    medicalLicenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseState?: SortOrderInput | SortOrder
    licenseExpiry?: SortOrder
    certificateGoodStanding?: SortOrder
    yearsIndependentPractice?: SortOrder
    currentAffiliation?: SortOrder
    subspecialties?: SortOrderInput | SortOrder
    annualPatientLoad?: SortOrderInput | SortOrder
    secondOpinionsGiven?: SortOrderInput | SortOrder
    peerReviewedPublications?: SortOrder
    clinicalTrialInvolvement?: SortOrder
    clinicalTrialDetails?: SortOrderInput | SortOrder
    conferencepresentations?: SortOrder
    conferenceDetails?: SortOrderInput | SortOrder
    teachingRoles?: SortOrder
    teachingDetails?: SortOrderInput | SortOrder
    oncologySocieties?: SortOrderInput | SortOrder
    awardsHonors?: SortOrderInput | SortOrder
    leadershipRoles?: SortOrderInput | SortOrder
    professionalReferences?: SortOrderInput | SortOrder
    malpracticeInsurance?: SortOrder
    noActiveDisciplinary?: SortOrder
    dataProtectionAgreed?: SortOrder
    competencyScore?: SortOrderInput | SortOrder
    competencyLevel?: SortOrderInput | SortOrder
    scoreBreakdown?: SortOrderInput | SortOrder
    applicationStatus?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    reviewStartedAt?: SortOrderInput | SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    reviewNotes?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    approvedToProfessionalId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfessionalCandidateCountOrderByAggregateInput
    _avg?: ProfessionalCandidateAvgOrderByAggregateInput
    _max?: ProfessionalCandidateMaxOrderByAggregateInput
    _min?: ProfessionalCandidateMinOrderByAggregateInput
    _sum?: ProfessionalCandidateSumOrderByAggregateInput
  }

  export type ProfessionalCandidateScalarWhereWithAggregatesInput = {
    AND?: ProfessionalCandidateScalarWhereWithAggregatesInput | ProfessionalCandidateScalarWhereWithAggregatesInput[]
    OR?: ProfessionalCandidateScalarWhereWithAggregatesInput[]
    NOT?: ProfessionalCandidateScalarWhereWithAggregatesInput | ProfessionalCandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    firstName?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    middleName?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    lastName?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    dateOfBirth?: DateTimeWithAggregatesFilter<"ProfessionalCandidate"> | Date | string
    nationality?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    email?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    phone?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    medicalDegreeUploaded?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    residencyCompleted?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    fellowshipCompleted?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    boardCertificationNumber?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    medicalLicenseNumber?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    licenseCountry?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    licenseState?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    licenseExpiry?: DateTimeWithAggregatesFilter<"ProfessionalCandidate"> | Date | string
    certificateGoodStanding?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    yearsIndependentPractice?: IntWithAggregatesFilter<"ProfessionalCandidate"> | number
    currentAffiliation?: StringWithAggregatesFilter<"ProfessionalCandidate"> | string
    subspecialties?: JsonNullableWithAggregatesFilter<"ProfessionalCandidate">
    annualPatientLoad?: IntNullableWithAggregatesFilter<"ProfessionalCandidate"> | number | null
    secondOpinionsGiven?: IntNullableWithAggregatesFilter<"ProfessionalCandidate"> | number | null
    peerReviewedPublications?: IntWithAggregatesFilter<"ProfessionalCandidate"> | number
    clinicalTrialInvolvement?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    clinicalTrialDetails?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    conferencepresentations?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    conferenceDetails?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    teachingRoles?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    teachingDetails?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    oncologySocieties?: JsonNullableWithAggregatesFilter<"ProfessionalCandidate">
    awardsHonors?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    leadershipRoles?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    professionalReferences?: JsonNullableWithAggregatesFilter<"ProfessionalCandidate">
    malpracticeInsurance?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    noActiveDisciplinary?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    dataProtectionAgreed?: BoolWithAggregatesFilter<"ProfessionalCandidate"> | boolean
    competencyScore?: FloatNullableWithAggregatesFilter<"ProfessionalCandidate"> | number | null
    competencyLevel?: EnumProLevelNullableWithAggregatesFilter<"ProfessionalCandidate"> | $Enums.ProLevel | null
    scoreBreakdown?: JsonNullableWithAggregatesFilter<"ProfessionalCandidate">
    applicationStatus?: EnumCandidateStatusWithAggregatesFilter<"ProfessionalCandidate"> | $Enums.CandidateStatus
    submittedAt?: DateTimeNullableWithAggregatesFilter<"ProfessionalCandidate"> | Date | string | null
    reviewStartedAt?: DateTimeNullableWithAggregatesFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"ProfessionalCandidate"> | Date | string | null
    reviewedBy?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    reviewNotes?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    approvedToProfessionalId?: StringNullableWithAggregatesFilter<"ProfessionalCandidate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProfessionalCandidate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProfessionalCandidate"> | Date | string
  }

  export type CandidateDocumentWhereInput = {
    AND?: CandidateDocumentWhereInput | CandidateDocumentWhereInput[]
    OR?: CandidateDocumentWhereInput[]
    NOT?: CandidateDocumentWhereInput | CandidateDocumentWhereInput[]
    id?: StringFilter<"CandidateDocument"> | string
    candidateId?: StringFilter<"CandidateDocument"> | string
    documentType?: EnumDocumentTypeFilter<"CandidateDocument"> | $Enums.DocumentType
    fileName?: StringFilter<"CandidateDocument"> | string
    originalName?: StringFilter<"CandidateDocument"> | string
    s3Key?: StringFilter<"CandidateDocument"> | string
    mimetype?: StringFilter<"CandidateDocument"> | string
    size?: IntFilter<"CandidateDocument"> | number
    checksum?: StringNullableFilter<"CandidateDocument"> | string | null
    encrypted?: BoolFilter<"CandidateDocument"> | boolean
    uploadedAt?: DateTimeFilter<"CandidateDocument"> | Date | string
    candidate?: XOR<ProfessionalCandidateScalarRelationFilter, ProfessionalCandidateWhereInput>
  }

  export type CandidateDocumentOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    checksum?: SortOrderInput | SortOrder
    encrypted?: SortOrder
    uploadedAt?: SortOrder
    candidate?: ProfessionalCandidateOrderByWithRelationInput
  }

  export type CandidateDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateDocumentWhereInput | CandidateDocumentWhereInput[]
    OR?: CandidateDocumentWhereInput[]
    NOT?: CandidateDocumentWhereInput | CandidateDocumentWhereInput[]
    candidateId?: StringFilter<"CandidateDocument"> | string
    documentType?: EnumDocumentTypeFilter<"CandidateDocument"> | $Enums.DocumentType
    fileName?: StringFilter<"CandidateDocument"> | string
    originalName?: StringFilter<"CandidateDocument"> | string
    s3Key?: StringFilter<"CandidateDocument"> | string
    mimetype?: StringFilter<"CandidateDocument"> | string
    size?: IntFilter<"CandidateDocument"> | number
    checksum?: StringNullableFilter<"CandidateDocument"> | string | null
    encrypted?: BoolFilter<"CandidateDocument"> | boolean
    uploadedAt?: DateTimeFilter<"CandidateDocument"> | Date | string
    candidate?: XOR<ProfessionalCandidateScalarRelationFilter, ProfessionalCandidateWhereInput>
  }, "id">

  export type CandidateDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    checksum?: SortOrderInput | SortOrder
    encrypted?: SortOrder
    uploadedAt?: SortOrder
    _count?: CandidateDocumentCountOrderByAggregateInput
    _avg?: CandidateDocumentAvgOrderByAggregateInput
    _max?: CandidateDocumentMaxOrderByAggregateInput
    _min?: CandidateDocumentMinOrderByAggregateInput
    _sum?: CandidateDocumentSumOrderByAggregateInput
  }

  export type CandidateDocumentScalarWhereWithAggregatesInput = {
    AND?: CandidateDocumentScalarWhereWithAggregatesInput | CandidateDocumentScalarWhereWithAggregatesInput[]
    OR?: CandidateDocumentScalarWhereWithAggregatesInput[]
    NOT?: CandidateDocumentScalarWhereWithAggregatesInput | CandidateDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidateDocument"> | string
    candidateId?: StringWithAggregatesFilter<"CandidateDocument"> | string
    documentType?: EnumDocumentTypeWithAggregatesFilter<"CandidateDocument"> | $Enums.DocumentType
    fileName?: StringWithAggregatesFilter<"CandidateDocument"> | string
    originalName?: StringWithAggregatesFilter<"CandidateDocument"> | string
    s3Key?: StringWithAggregatesFilter<"CandidateDocument"> | string
    mimetype?: StringWithAggregatesFilter<"CandidateDocument"> | string
    size?: IntWithAggregatesFilter<"CandidateDocument"> | number
    checksum?: StringNullableWithAggregatesFilter<"CandidateDocument"> | string | null
    encrypted?: BoolWithAggregatesFilter<"CandidateDocument"> | boolean
    uploadedAt?: DateTimeWithAggregatesFilter<"CandidateDocument"> | Date | string
  }

  export type ApplicationReviewWhereInput = {
    AND?: ApplicationReviewWhereInput | ApplicationReviewWhereInput[]
    OR?: ApplicationReviewWhereInput[]
    NOT?: ApplicationReviewWhereInput | ApplicationReviewWhereInput[]
    id?: StringFilter<"ApplicationReview"> | string
    candidateId?: StringFilter<"ApplicationReview"> | string
    reviewerId?: StringFilter<"ApplicationReview"> | string
    decision?: EnumReviewDecisionFilter<"ApplicationReview"> | $Enums.ReviewDecision
    notes?: StringNullableFilter<"ApplicationReview"> | string | null
    scoreAdjustment?: JsonNullableFilter<"ApplicationReview">
    recommendedLevel?: EnumProLevelNullableFilter<"ApplicationReview"> | $Enums.ProLevel | null
    createdAt?: DateTimeFilter<"ApplicationReview"> | Date | string
    candidate?: XOR<ProfessionalCandidateScalarRelationFilter, ProfessionalCandidateWhereInput>
  }

  export type ApplicationReviewOrderByWithRelationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    reviewerId?: SortOrder
    decision?: SortOrder
    notes?: SortOrderInput | SortOrder
    scoreAdjustment?: SortOrderInput | SortOrder
    recommendedLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    candidate?: ProfessionalCandidateOrderByWithRelationInput
  }

  export type ApplicationReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationReviewWhereInput | ApplicationReviewWhereInput[]
    OR?: ApplicationReviewWhereInput[]
    NOT?: ApplicationReviewWhereInput | ApplicationReviewWhereInput[]
    candidateId?: StringFilter<"ApplicationReview"> | string
    reviewerId?: StringFilter<"ApplicationReview"> | string
    decision?: EnumReviewDecisionFilter<"ApplicationReview"> | $Enums.ReviewDecision
    notes?: StringNullableFilter<"ApplicationReview"> | string | null
    scoreAdjustment?: JsonNullableFilter<"ApplicationReview">
    recommendedLevel?: EnumProLevelNullableFilter<"ApplicationReview"> | $Enums.ProLevel | null
    createdAt?: DateTimeFilter<"ApplicationReview"> | Date | string
    candidate?: XOR<ProfessionalCandidateScalarRelationFilter, ProfessionalCandidateWhereInput>
  }, "id">

  export type ApplicationReviewOrderByWithAggregationInput = {
    id?: SortOrder
    candidateId?: SortOrder
    reviewerId?: SortOrder
    decision?: SortOrder
    notes?: SortOrderInput | SortOrder
    scoreAdjustment?: SortOrderInput | SortOrder
    recommendedLevel?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ApplicationReviewCountOrderByAggregateInput
    _max?: ApplicationReviewMaxOrderByAggregateInput
    _min?: ApplicationReviewMinOrderByAggregateInput
  }

  export type ApplicationReviewScalarWhereWithAggregatesInput = {
    AND?: ApplicationReviewScalarWhereWithAggregatesInput | ApplicationReviewScalarWhereWithAggregatesInput[]
    OR?: ApplicationReviewScalarWhereWithAggregatesInput[]
    NOT?: ApplicationReviewScalarWhereWithAggregatesInput | ApplicationReviewScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationReview"> | string
    candidateId?: StringWithAggregatesFilter<"ApplicationReview"> | string
    reviewerId?: StringWithAggregatesFilter<"ApplicationReview"> | string
    decision?: EnumReviewDecisionWithAggregatesFilter<"ApplicationReview"> | $Enums.ReviewDecision
    notes?: StringNullableWithAggregatesFilter<"ApplicationReview"> | string | null
    scoreAdjustment?: JsonNullableWithAggregatesFilter<"ApplicationReview">
    recommendedLevel?: EnumProLevelNullableWithAggregatesFilter<"ApplicationReview"> | $Enums.ProLevel | null
    createdAt?: DateTimeWithAggregatesFilter<"ApplicationReview"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    hashedPassword: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    hashedPassword: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    customer?: CustomerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    hashedPassword: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerInput
    cases?: MedicalCaseCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cases?: MedicalCaseUncheckedCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerNestedInput
    cases?: MedicalCaseUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: MedicalCaseUncheckedUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TempSubmissionCreateInput = {
    id?: string
    payload: JsonNullValueInput | InputJsonValue
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TempSubmissionUncheckedCreateInput = {
    id?: string
    payload: JsonNullValueInput | InputJsonValue
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TempSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TempSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TempSubmissionCreateManyInput = {
    id?: string
    payload: JsonNullValueInput | InputJsonValue
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type TempSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TempSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionCreateInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCustomerSessionsInput
  }

  export type CustomerSessionUncheckedCreateInput = {
    id?: string
    customerId: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
  }

  export type CustomerSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCustomerSessionsNestedInput
  }

  export type CustomerSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionCreateManyInput = {
    id?: string
    customerId: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
  }

  export type CustomerSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationCreateInput = {
    id?: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutNotificationsInput
  }

  export type CustomerNotificationUncheckedCreateInput = {
    id?: string
    customerId: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CustomerNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type CustomerNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationCreateManyInput = {
    id?: string
    customerId: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CustomerNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicePricingCreateInput = {
    id?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    basePriceEUR: number
    currencyCode?: string
    isActive?: boolean
    validFrom?: Date | string
    validUntil?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicePricingUncheckedCreateInput = {
    id?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    basePriceEUR: number
    currencyCode?: string
    isActive?: boolean
    validFrom?: Date | string
    validUntil?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicePricingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    basePriceEUR?: FloatFieldUpdateOperationsInput | number
    currencyCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicePricingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    basePriceEUR?: FloatFieldUpdateOperationsInput | number
    currencyCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicePricingCreateManyInput = {
    id?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    basePriceEUR: number
    currencyCode?: string
    isActive?: boolean
    validFrom?: Date | string
    validUntil?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServicePricingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    basePriceEUR?: FloatFieldUpdateOperationsInput | number
    currencyCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServicePricingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    basePriceEUR?: FloatFieldUpdateOperationsInput | number
    currencyCode?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    validFrom?: DateTimeFieldUpdateOperationsInput | Date | string
    validUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionnaireResponseCreateInput = {
    id?: string
    questionnaireType: $Enums.QuestionnaireType
    language?: $Enums.Language
    responses: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: number | null
    confidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutQuestionnaireResponseInput
  }

  export type QuestionnaireResponseUncheckedCreateInput = {
    id?: string
    caseId: string
    questionnaireType: $Enums.QuestionnaireType
    language?: $Enums.Language
    responses: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: number | null
    confidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionnaireResponseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutQuestionnaireResponseNestedInput
  }

  export type QuestionnaireResponseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionnaireResponseCreateManyInput = {
    id?: string
    caseId: string
    questionnaireType: $Enums.QuestionnaireType
    language?: $Enums.Language
    responses: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: number | null
    confidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionnaireResponseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionnaireResponseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CasePaymentCreateInput = {
    id?: string
    customerId: string
    amount: number
    currency?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    status?: $Enums.PaymentStatus
    paymentMethod?: string | null
    transactionId?: string | null
    paymentDate?: Date | string | null
    refundDate?: Date | string | null
    refundReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutCasePaymentInput
  }

  export type CasePaymentUncheckedCreateInput = {
    id?: string
    caseId: string
    customerId: string
    amount: number
    currency?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    status?: $Enums.PaymentStatus
    paymentMethod?: string | null
    transactionId?: string | null
    paymentDate?: Date | string | null
    refundDate?: Date | string | null
    refundReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CasePaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutCasePaymentNestedInput
  }

  export type CasePaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CasePaymentCreateManyInput = {
    id?: string
    caseId: string
    customerId: string
    amount: number
    currency?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    status?: $Enums.PaymentStatus
    paymentMethod?: string | null
    transactionId?: string | null
    paymentDate?: Date | string | null
    refundDate?: Date | string | null
    refundReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CasePaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CasePaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCaseCreateInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseCreateManyInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalCaseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCaseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryCreateInput = {
    id?: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutStatusHistoryInput
  }

  export type CaseStatusHistoryUncheckedCreateInput = {
    id?: string
    caseId: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
  }

  export type CaseStatusHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutStatusHistoryNestedInput
  }

  export type CaseStatusHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryCreateManyInput = {
    id?: string
    caseId: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
  }

  export type CaseStatusHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileCreateInput = {
    id?: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutUploadedFilesInput
  }

  export type UploadedFileUncheckedCreateInput = {
    id?: string
    caseId: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
  }

  export type UploadedFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutUploadedFilesNestedInput
  }

  export type UploadedFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileCreateManyInput = {
    id?: string
    caseId: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
  }

  export type UploadedFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalProfessionalCreateInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUncheckedCreateInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalCreateManyInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalProfessionalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalProfessionalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionCreateInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    professional: MedicalProfessionalCreateNestedOneWithoutProfessionalSessionsInput
  }

  export type ProfessionalSessionUncheckedCreateInput = {
    id?: string
    professionalId: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ProfessionalSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professional?: MedicalProfessionalUpdateOneRequiredWithoutProfessionalSessionsNestedInput
  }

  export type ProfessionalSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionCreateManyInput = {
    id?: string
    professionalId: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ProfessionalSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseAssignmentCreateInput = {
    id?: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    case: MedicalCaseCreateNestedOneWithoutCaseAssignmentsInput
    professional: MedicalProfessionalCreateNestedOneWithoutCaseAssignmentsInput
  }

  export type CaseAssignmentUncheckedCreateInput = {
    id?: string
    caseId: string
    professionalId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    case?: MedicalCaseUpdateOneRequiredWithoutCaseAssignmentsNestedInput
    professional?: MedicalProfessionalUpdateOneRequiredWithoutCaseAssignmentsNestedInput
  }

  export type CaseAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentCreateManyInput = {
    id?: string
    caseId: string
    professionalId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AIAnalysisCreateInput = {
    id?: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutAiAnalysesInput
  }

  export type AIAnalysisUncheckedCreateInput = {
    id?: string
    caseId: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AIAnalysisUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutAiAnalysesNestedInput
  }

  export type AIAnalysisUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIAnalysisCreateManyInput = {
    id?: string
    caseId: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AIAnalysisUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIAnalysisUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionCreateInput = {
    id?: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutMedicalOpinionsInput
    professional: MedicalProfessionalCreateNestedOneWithoutMedicalOpinionsInput
  }

  export type MedicalOpinionUncheckedCreateInput = {
    id?: string
    caseId: string
    professionalId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalOpinionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutMedicalOpinionsNestedInput
    professional?: MedicalProfessionalUpdateOneRequiredWithoutMedicalOpinionsNestedInput
  }

  export type MedicalOpinionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionCreateManyInput = {
    id?: string
    caseId: string
    professionalId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalOpinionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentCreateInput = {
    id?: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutProfessionalPaymentsInput
    professional: MedicalProfessionalCreateNestedOneWithoutProfessionalPaymentsInput
  }

  export type ProfessionalPaymentUncheckedCreateInput = {
    id?: string
    caseId: string
    professionalId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutProfessionalPaymentsNestedInput
    professional?: MedicalProfessionalUpdateOneRequiredWithoutProfessionalPaymentsNestedInput
  }

  export type ProfessionalPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentCreateManyInput = {
    id?: string
    caseId: string
    professionalId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateInput = {
    id?: string
    email: string
    hashedPassword: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    email: string
    hashedPassword: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminCreateManyInput = {
    id?: string
    email: string
    hashedPassword: string
    role?: string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    permissions?: NullableJsonNullValueInput | InputJsonValue
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalCandidateCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: CandidateDocumentCreateNestedManyWithoutCandidateInput
    reviews?: ApplicationReviewCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateUncheckedCreateInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: CandidateDocumentUncheckedCreateNestedManyWithoutCandidateInput
    reviews?: ApplicationReviewUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: CandidateDocumentUpdateManyWithoutCandidateNestedInput
    reviews?: ApplicationReviewUpdateManyWithoutCandidateNestedInput
  }

  export type ProfessionalCandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: CandidateDocumentUncheckedUpdateManyWithoutCandidateNestedInput
    reviews?: ApplicationReviewUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type ProfessionalCandidateCreateManyInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalCandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalCandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentCreateInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
    candidate: ProfessionalCandidateCreateNestedOneWithoutDocumentsInput
  }

  export type CandidateDocumentUncheckedCreateInput = {
    id?: string
    candidateId: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
  }

  export type CandidateDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: ProfessionalCandidateUpdateOneRequiredWithoutDocumentsNestedInput
  }

  export type CandidateDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentCreateManyInput = {
    id?: string
    candidateId: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
  }

  export type CandidateDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewCreateInput = {
    id?: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
    candidate: ProfessionalCandidateCreateNestedOneWithoutReviewsInput
  }

  export type ApplicationReviewUncheckedCreateInput = {
    id?: string
    candidateId: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
  }

  export type ApplicationReviewUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidate?: ProfessionalCandidateUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ApplicationReviewUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewCreateManyInput = {
    id?: string
    candidateId: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
  }

  export type ApplicationReviewUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CustomerNullableScalarRelationFilter = {
    is?: CustomerWhereInput | null
    isNot?: CustomerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumTwoFactorMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.TwoFactorMethod | EnumTwoFactorMethodFieldRefInput<$PrismaModel>
    in?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumTwoFactorMethodFilter<$PrismaModel> | $Enums.TwoFactorMethod
  }

  export type EnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type EnumCommunicationChannelFilter<$PrismaModel = never> = {
    equals?: $Enums.CommunicationChannel | EnumCommunicationChannelFieldRefInput<$PrismaModel>
    in?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumCommunicationChannelFilter<$PrismaModel> | $Enums.CommunicationChannel
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MedicalCaseListRelationFilter = {
    every?: MedicalCaseWhereInput
    some?: MedicalCaseWhereInput
    none?: MedicalCaseWhereInput
  }

  export type CustomerSessionListRelationFilter = {
    every?: CustomerSessionWhereInput
    some?: CustomerSessionWhereInput
    none?: CustomerSessionWhereInput
  }

  export type CustomerNotificationListRelationFilter = {
    every?: CustomerNotificationWhereInput
    some?: CustomerNotificationWhereInput
    none?: CustomerNotificationWhereInput
  }

  export type MedicalCaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashedPassword?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    preferredLanguage?: SortOrder
    preferredChannel?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    whatsappNotifications?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    microsoftId?: SortOrder
    oauthProvider?: SortOrder
    profileCompleted?: SortOrder
    termsAccepted?: SortOrder
    privacyAccepted?: SortOrder
    marketingConsent?: SortOrder
    metadata?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashedPassword?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    preferredLanguage?: SortOrder
    preferredChannel?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    whatsappNotifications?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    microsoftId?: SortOrder
    oauthProvider?: SortOrder
    profileCompleted?: SortOrder
    termsAccepted?: SortOrder
    privacyAccepted?: SortOrder
    marketingConsent?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    hashedPassword?: SortOrder
    emailVerified?: SortOrder
    phoneVerified?: SortOrder
    twoFactorEnabled?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    preferredLanguage?: SortOrder
    preferredChannel?: SortOrder
    emailNotifications?: SortOrder
    smsNotifications?: SortOrder
    whatsappNotifications?: SortOrder
    googleId?: SortOrder
    appleId?: SortOrder
    microsoftId?: SortOrder
    oauthProvider?: SortOrder
    profileCompleted?: SortOrder
    termsAccepted?: SortOrder
    privacyAccepted?: SortOrder
    marketingConsent?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumTwoFactorMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TwoFactorMethod | EnumTwoFactorMethodFieldRefInput<$PrismaModel>
    in?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumTwoFactorMethodWithAggregatesFilter<$PrismaModel> | $Enums.TwoFactorMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTwoFactorMethodFilter<$PrismaModel>
    _max?: NestedEnumTwoFactorMethodFilter<$PrismaModel>
  }

  export type EnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type EnumCommunicationChannelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommunicationChannel | EnumCommunicationChannelFieldRefInput<$PrismaModel>
    in?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumCommunicationChannelWithAggregatesFilter<$PrismaModel> | $Enums.CommunicationChannel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommunicationChannelFilter<$PrismaModel>
    _max?: NestedEnumCommunicationChannelFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TempSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    payload?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TempSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type TempSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type CustomerSessionCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerSessionMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    expiresAt?: SortOrder
    lastActivity?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    channel?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    language?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    readAt?: SortOrder
    errorMessage?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    channel?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    language?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    readAt?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    type?: SortOrder
    channel?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    language?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    readAt?: SortOrder
    errorMessage?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumCaseUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseUrgency | EnumCaseUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseUrgencyFilter<$PrismaModel> | $Enums.CaseUrgency
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ServicePricingCountOrderByAggregateInput = {
    id?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    basePriceEUR?: SortOrder
    currencyCode?: SortOrder
    isActive?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicePricingAvgOrderByAggregateInput = {
    basePriceEUR?: SortOrder
  }

  export type ServicePricingMaxOrderByAggregateInput = {
    id?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    basePriceEUR?: SortOrder
    currencyCode?: SortOrder
    isActive?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicePricingMinOrderByAggregateInput = {
    id?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    basePriceEUR?: SortOrder
    currencyCode?: SortOrder
    isActive?: SortOrder
    validFrom?: SortOrder
    validUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServicePricingSumOrderByAggregateInput = {
    basePriceEUR?: SortOrder
  }

  export type EnumCaseUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseUrgency | EnumCaseUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.CaseUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseUrgencyFilter<$PrismaModel>
    _max?: NestedEnumCaseUrgencyFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumQuestionnaireTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionnaireType | EnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionnaireTypeFilter<$PrismaModel> | $Enums.QuestionnaireType
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MedicalCaseScalarRelationFilter = {
    is?: MedicalCaseWhereInput
    isNot?: MedicalCaseWhereInput
  }

  export type QuestionnaireResponseCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    questionnaireType?: SortOrder
    language?: SortOrder
    responses?: SortOrder
    aiAnalysis?: SortOrder
    completenessScore?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionnaireResponseAvgOrderByAggregateInput = {
    completenessScore?: SortOrder
    confidence?: SortOrder
  }

  export type QuestionnaireResponseMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    questionnaireType?: SortOrder
    language?: SortOrder
    completenessScore?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionnaireResponseMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    questionnaireType?: SortOrder
    language?: SortOrder
    completenessScore?: SortOrder
    confidence?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionnaireResponseSumOrderByAggregateInput = {
    completenessScore?: SortOrder
    confidence?: SortOrder
  }

  export type EnumQuestionnaireTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionnaireType | EnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionnaireTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionnaireType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionnaireTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionnaireTypeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type CasePaymentCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    customerId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    paymentDate?: SortOrder
    refundDate?: SortOrder
    refundReason?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CasePaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type CasePaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    customerId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    paymentDate?: SortOrder
    refundDate?: SortOrder
    refundReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CasePaymentMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    customerId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    professionalLevel?: SortOrder
    urgencyLevel?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    paymentDate?: SortOrder
    refundDate?: SortOrder
    refundReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CasePaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UploadedFileListRelationFilter = {
    every?: UploadedFileWhereInput
    some?: UploadedFileWhereInput
    none?: UploadedFileWhereInput
  }

  export type CaseStatusHistoryListRelationFilter = {
    every?: CaseStatusHistoryWhereInput
    some?: CaseStatusHistoryWhereInput
    none?: CaseStatusHistoryWhereInput
  }

  export type CaseAssignmentListRelationFilter = {
    every?: CaseAssignmentWhereInput
    some?: CaseAssignmentWhereInput
    none?: CaseAssignmentWhereInput
  }

  export type AIAnalysisListRelationFilter = {
    every?: AIAnalysisWhereInput
    some?: AIAnalysisWhereInput
    none?: AIAnalysisWhereInput
  }

  export type MedicalOpinionListRelationFilter = {
    every?: MedicalOpinionWhereInput
    some?: MedicalOpinionWhereInput
    none?: MedicalOpinionWhereInput
  }

  export type ProfessionalPaymentListRelationFilter = {
    every?: ProfessionalPaymentWhereInput
    some?: ProfessionalPaymentWhereInput
    none?: ProfessionalPaymentWhereInput
  }

  export type QuestionnaireResponseNullableScalarRelationFilter = {
    is?: QuestionnaireResponseWhereInput | null
    isNot?: QuestionnaireResponseWhereInput | null
  }

  export type CasePaymentNullableScalarRelationFilter = {
    is?: CasePaymentWhereInput | null
    isNot?: CasePaymentWhereInput | null
  }

  export type UploadedFileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseStatusHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CaseAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalOpinionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalCaseCountOrderByAggregateInput = {
    id?: SortOrder
    caseNumber?: SortOrder
    customerId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chiefComplaint?: SortOrder
    category?: SortOrder
    medicalHistory?: SortOrder
    currentMedications?: SortOrder
    allergies?: SortOrder
    familyHistory?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedProfessionalLevel?: SortOrder
    talentPool?: SortOrder
    urgencyReason?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
    assignedProfessionalId?: SortOrder
    assignedAt?: SortOrder
    qualityScore?: SortOrder
    completenessScore?: SortOrder
    metadata?: SortOrder
    tags?: SortOrder
    version?: SortOrder
    ethnicity?: SortOrder
    gender?: SortOrder
    diseaseType?: SortOrder
    isFirstOccurrence?: SortOrder
    geneticFamilyHistory?: SortOrder
    paymentId?: SortOrder
    consentAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCaseAvgOrderByAggregateInput = {
    qualityScore?: SortOrder
    completenessScore?: SortOrder
    version?: SortOrder
  }

  export type MedicalCaseMaxOrderByAggregateInput = {
    id?: SortOrder
    caseNumber?: SortOrder
    customerId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chiefComplaint?: SortOrder
    category?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedProfessionalLevel?: SortOrder
    talentPool?: SortOrder
    urgencyReason?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
    assignedProfessionalId?: SortOrder
    assignedAt?: SortOrder
    qualityScore?: SortOrder
    completenessScore?: SortOrder
    version?: SortOrder
    ethnicity?: SortOrder
    gender?: SortOrder
    diseaseType?: SortOrder
    isFirstOccurrence?: SortOrder
    paymentId?: SortOrder
    consentAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCaseMinOrderByAggregateInput = {
    id?: SortOrder
    caseNumber?: SortOrder
    customerId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    title?: SortOrder
    description?: SortOrder
    chiefComplaint?: SortOrder
    category?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedProfessionalLevel?: SortOrder
    talentPool?: SortOrder
    urgencyReason?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    completedAt?: SortOrder
    expiresAt?: SortOrder
    assignedProfessionalId?: SortOrder
    assignedAt?: SortOrder
    qualityScore?: SortOrder
    completenessScore?: SortOrder
    version?: SortOrder
    ethnicity?: SortOrder
    gender?: SortOrder
    diseaseType?: SortOrder
    isFirstOccurrence?: SortOrder
    paymentId?: SortOrder
    consentAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalCaseSumOrderByAggregateInput = {
    qualityScore?: SortOrder
    completenessScore?: SortOrder
    version?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CaseStatusHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    changedByType?: SortOrder
    changedById?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseStatusHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    changedByType?: SortOrder
    changedById?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseStatusHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    fromStatus?: SortOrder
    toStatus?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
    changedByType?: SortOrder
    changedById?: SortOrder
    createdAt?: SortOrder
  }

  export type UploadedFileCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    filename?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    metadata?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    createdAt?: SortOrder
  }

  export type UploadedFileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type UploadedFileMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    filename?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    createdAt?: SortOrder
  }

  export type UploadedFileMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    filename?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    category?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    createdAt?: SortOrder
  }

  export type UploadedFileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumProLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumProLevelFilter<$PrismaModel> | $Enums.ProLevel
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProfessionalSessionListRelationFilter = {
    every?: ProfessionalSessionWhereInput
    some?: ProfessionalSessionWhereInput
    none?: ProfessionalSessionWhereInput
  }

  export type ProfessionalSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalProfessionalCountOrderByAggregateInput = {
    id?: SortOrder
    proNumber?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nationality?: SortOrder
    licenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseExpiry?: SortOrder
    vetted?: SortOrder
    level?: SortOrder
    cvUrl?: SortOrder
    documents?: SortOrder
    subspecialties?: SortOrder
    yearsPractice?: SortOrder
    publications?: SortOrder
    trialInvolved?: SortOrder
    leadership?: SortOrder
    societyMemberships?: SortOrder
    competencyData?: SortOrder
    availability?: SortOrder
    score?: SortOrder
    hashedPassword?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    profileLastUpdated?: SortOrder
    codeOfConductAcknowledged?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    bankDetails?: SortOrder
    vatNumber?: SortOrder
    billingRate?: SortOrder
    performanceMetrics?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalProfessionalAvgOrderByAggregateInput = {
    yearsPractice?: SortOrder
    publications?: SortOrder
    score?: SortOrder
    billingRate?: SortOrder
  }

  export type MedicalProfessionalMaxOrderByAggregateInput = {
    id?: SortOrder
    proNumber?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nationality?: SortOrder
    licenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseExpiry?: SortOrder
    vetted?: SortOrder
    level?: SortOrder
    cvUrl?: SortOrder
    yearsPractice?: SortOrder
    publications?: SortOrder
    trialInvolved?: SortOrder
    leadership?: SortOrder
    score?: SortOrder
    hashedPassword?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    profileLastUpdated?: SortOrder
    codeOfConductAcknowledged?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    vatNumber?: SortOrder
    billingRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalProfessionalMinOrderByAggregateInput = {
    id?: SortOrder
    proNumber?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dob?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    nationality?: SortOrder
    licenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseExpiry?: SortOrder
    vetted?: SortOrder
    level?: SortOrder
    cvUrl?: SortOrder
    yearsPractice?: SortOrder
    publications?: SortOrder
    trialInvolved?: SortOrder
    leadership?: SortOrder
    score?: SortOrder
    hashedPassword?: SortOrder
    twoFactorMethod?: SortOrder
    twoFactorSecret?: SortOrder
    profileLastUpdated?: SortOrder
    codeOfConductAcknowledged?: SortOrder
    address?: SortOrder
    billingAddress?: SortOrder
    vatNumber?: SortOrder
    billingRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalProfessionalSumOrderByAggregateInput = {
    yearsPractice?: SortOrder
    publications?: SortOrder
    score?: SortOrder
    billingRate?: SortOrder
  }

  export type EnumProLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumProLevelWithAggregatesFilter<$PrismaModel> | $Enums.ProLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProLevelFilter<$PrismaModel>
    _max?: NestedEnumProLevelFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MedicalProfessionalScalarRelationFilter = {
    is?: MedicalProfessionalWhereInput
    isNot?: MedicalProfessionalWhereInput
  }

  export type ProfessionalSessionCountOrderByAggregateInput = {
    id?: SortOrder
    professionalId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type ProfessionalSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    professionalId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type ProfessionalSessionMinOrderByAggregateInput = {
    id?: SortOrder
    professionalId?: SortOrder
    sessionToken?: SortOrder
    twoFactorVerified?: SortOrder
    expiresAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type CaseAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
    metadata?: SortOrder
  }

  export type CaseAssignmentAvgOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type CaseAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type CaseAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    status?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type CaseAssignmentSumOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type AIAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    confidence?: SortOrder
    processingTime?: SortOrder
    aiProvider?: SortOrder
    modelVersion?: SortOrder
    cost?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AIAnalysisAvgOrderByAggregateInput = {
    confidence?: SortOrder
    processingTime?: SortOrder
    cost?: SortOrder
  }

  export type AIAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    analysisType?: SortOrder
    confidence?: SortOrder
    processingTime?: SortOrder
    aiProvider?: SortOrder
    modelVersion?: SortOrder
    cost?: SortOrder
    createdAt?: SortOrder
  }

  export type AIAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    analysisType?: SortOrder
    confidence?: SortOrder
    processingTime?: SortOrder
    aiProvider?: SortOrder
    modelVersion?: SortOrder
    cost?: SortOrder
    createdAt?: SortOrder
  }

  export type AIAnalysisSumOrderByAggregateInput = {
    confidence?: SortOrder
    processingTime?: SortOrder
    cost?: SortOrder
  }

  export type MedicalOpinionCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    version?: SortOrder
    digitalSignature?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    publishedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalOpinionAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type MedicalOpinionMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    version?: SortOrder
    digitalSignature?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalOpinionMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    content?: SortOrder
    status?: SortOrder
    version?: SortOrder
    digitalSignature?: SortOrder
    reviewedBy?: SortOrder
    reviewedAt?: SortOrder
    publishedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MedicalOpinionSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ProfessionalPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    processedAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalPaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type ProfessionalPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    caseId?: SortOrder
    professionalId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    transactionId?: SortOrder
    processedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalPaymentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    role?: SortOrder
    permissions?: SortOrder
    lastLoginAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    role?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    role?: SortOrder
    lastLoginAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumProLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProLevelNullableFilter<$PrismaModel> | $Enums.ProLevel | null
  }

  export type EnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type CandidateDocumentListRelationFilter = {
    every?: CandidateDocumentWhereInput
    some?: CandidateDocumentWhereInput
    none?: CandidateDocumentWhereInput
  }

  export type ApplicationReviewListRelationFilter = {
    every?: ApplicationReviewWhereInput
    some?: ApplicationReviewWhereInput
    none?: ApplicationReviewWhereInput
  }

  export type CandidateDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfessionalCandidateCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    medicalDegreeUploaded?: SortOrder
    residencyCompleted?: SortOrder
    fellowshipCompleted?: SortOrder
    boardCertificationNumber?: SortOrder
    medicalLicenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseState?: SortOrder
    licenseExpiry?: SortOrder
    certificateGoodStanding?: SortOrder
    yearsIndependentPractice?: SortOrder
    currentAffiliation?: SortOrder
    subspecialties?: SortOrder
    annualPatientLoad?: SortOrder
    secondOpinionsGiven?: SortOrder
    peerReviewedPublications?: SortOrder
    clinicalTrialInvolvement?: SortOrder
    clinicalTrialDetails?: SortOrder
    conferencepresentations?: SortOrder
    conferenceDetails?: SortOrder
    teachingRoles?: SortOrder
    teachingDetails?: SortOrder
    oncologySocieties?: SortOrder
    awardsHonors?: SortOrder
    leadershipRoles?: SortOrder
    professionalReferences?: SortOrder
    malpracticeInsurance?: SortOrder
    noActiveDisciplinary?: SortOrder
    dataProtectionAgreed?: SortOrder
    competencyScore?: SortOrder
    competencyLevel?: SortOrder
    scoreBreakdown?: SortOrder
    applicationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNotes?: SortOrder
    rejectionReason?: SortOrder
    approvedToProfessionalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalCandidateAvgOrderByAggregateInput = {
    yearsIndependentPractice?: SortOrder
    annualPatientLoad?: SortOrder
    secondOpinionsGiven?: SortOrder
    peerReviewedPublications?: SortOrder
    competencyScore?: SortOrder
  }

  export type ProfessionalCandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    medicalDegreeUploaded?: SortOrder
    residencyCompleted?: SortOrder
    fellowshipCompleted?: SortOrder
    boardCertificationNumber?: SortOrder
    medicalLicenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseState?: SortOrder
    licenseExpiry?: SortOrder
    certificateGoodStanding?: SortOrder
    yearsIndependentPractice?: SortOrder
    currentAffiliation?: SortOrder
    annualPatientLoad?: SortOrder
    secondOpinionsGiven?: SortOrder
    peerReviewedPublications?: SortOrder
    clinicalTrialInvolvement?: SortOrder
    clinicalTrialDetails?: SortOrder
    conferencepresentations?: SortOrder
    conferenceDetails?: SortOrder
    teachingRoles?: SortOrder
    teachingDetails?: SortOrder
    awardsHonors?: SortOrder
    leadershipRoles?: SortOrder
    malpracticeInsurance?: SortOrder
    noActiveDisciplinary?: SortOrder
    dataProtectionAgreed?: SortOrder
    competencyScore?: SortOrder
    competencyLevel?: SortOrder
    applicationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNotes?: SortOrder
    rejectionReason?: SortOrder
    approvedToProfessionalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalCandidateMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    medicalDegreeUploaded?: SortOrder
    residencyCompleted?: SortOrder
    fellowshipCompleted?: SortOrder
    boardCertificationNumber?: SortOrder
    medicalLicenseNumber?: SortOrder
    licenseCountry?: SortOrder
    licenseState?: SortOrder
    licenseExpiry?: SortOrder
    certificateGoodStanding?: SortOrder
    yearsIndependentPractice?: SortOrder
    currentAffiliation?: SortOrder
    annualPatientLoad?: SortOrder
    secondOpinionsGiven?: SortOrder
    peerReviewedPublications?: SortOrder
    clinicalTrialInvolvement?: SortOrder
    clinicalTrialDetails?: SortOrder
    conferencepresentations?: SortOrder
    conferenceDetails?: SortOrder
    teachingRoles?: SortOrder
    teachingDetails?: SortOrder
    awardsHonors?: SortOrder
    leadershipRoles?: SortOrder
    malpracticeInsurance?: SortOrder
    noActiveDisciplinary?: SortOrder
    dataProtectionAgreed?: SortOrder
    competencyScore?: SortOrder
    competencyLevel?: SortOrder
    applicationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewStartedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    reviewNotes?: SortOrder
    rejectionReason?: SortOrder
    approvedToProfessionalId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfessionalCandidateSumOrderByAggregateInput = {
    yearsIndependentPractice?: SortOrder
    annualPatientLoad?: SortOrder
    secondOpinionsGiven?: SortOrder
    peerReviewedPublications?: SortOrder
    competencyScore?: SortOrder
  }

  export type EnumProLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumProLevelNullableFilter<$PrismaModel>
  }

  export type EnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type ProfessionalCandidateScalarRelationFilter = {
    is?: ProfessionalCandidateWhereInput
    isNot?: ProfessionalCandidateWhereInput
  }

  export type CandidateDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    uploadedAt?: SortOrder
  }

  export type CandidateDocumentAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type CandidateDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    uploadedAt?: SortOrder
  }

  export type CandidateDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    documentType?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    s3Key?: SortOrder
    mimetype?: SortOrder
    size?: SortOrder
    checksum?: SortOrder
    encrypted?: SortOrder
    uploadedAt?: SortOrder
  }

  export type CandidateDocumentSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type EnumReviewDecisionFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewDecision | EnumReviewDecisionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewDecisionFilter<$PrismaModel> | $Enums.ReviewDecision
  }

  export type ApplicationReviewCountOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    reviewerId?: SortOrder
    decision?: SortOrder
    notes?: SortOrder
    scoreAdjustment?: SortOrder
    recommendedLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    reviewerId?: SortOrder
    decision?: SortOrder
    notes?: SortOrder
    recommendedLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type ApplicationReviewMinOrderByAggregateInput = {
    id?: SortOrder
    candidateId?: SortOrder
    reviewerId?: SortOrder
    decision?: SortOrder
    notes?: SortOrder
    recommendedLevel?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumReviewDecisionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewDecision | EnumReviewDecisionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewDecisionWithAggregatesFilter<$PrismaModel> | $Enums.ReviewDecision
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewDecisionFilter<$PrismaModel>
    _max?: NestedEnumReviewDecisionFilter<$PrismaModel>
  }

  export type CustomerCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    connect?: CustomerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CustomerUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutUserInput
    upsert?: CustomerUpsertWithoutUserInput
    disconnect?: CustomerWhereInput | boolean
    delete?: CustomerWhereInput | boolean
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutUserInput, CustomerUpdateWithoutUserInput>, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutCustomerInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    connect?: UserWhereUniqueInput
  }

  export type MedicalCaseCreateNestedManyWithoutCustomerInput = {
    create?: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput> | MedicalCaseCreateWithoutCustomerInput[] | MedicalCaseUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCustomerInput | MedicalCaseCreateOrConnectWithoutCustomerInput[]
    createMany?: MedicalCaseCreateManyCustomerInputEnvelope
    connect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
  }

  export type CustomerSessionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput> | CustomerSessionCreateWithoutCustomerInput[] | CustomerSessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSessionCreateOrConnectWithoutCustomerInput | CustomerSessionCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerSessionCreateManyCustomerInputEnvelope
    connect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
  }

  export type CustomerNotificationCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput> | CustomerNotificationCreateWithoutCustomerInput[] | CustomerNotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerNotificationCreateOrConnectWithoutCustomerInput | CustomerNotificationCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerNotificationCreateManyCustomerInputEnvelope
    connect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
  }

  export type MedicalCaseUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput> | MedicalCaseCreateWithoutCustomerInput[] | MedicalCaseUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCustomerInput | MedicalCaseCreateOrConnectWithoutCustomerInput[]
    createMany?: MedicalCaseCreateManyCustomerInputEnvelope
    connect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
  }

  export type CustomerSessionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput> | CustomerSessionCreateWithoutCustomerInput[] | CustomerSessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSessionCreateOrConnectWithoutCustomerInput | CustomerSessionCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerSessionCreateManyCustomerInputEnvelope
    connect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
  }

  export type CustomerNotificationUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput> | CustomerNotificationCreateWithoutCustomerInput[] | CustomerNotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerNotificationCreateOrConnectWithoutCustomerInput | CustomerNotificationCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerNotificationCreateManyCustomerInputEnvelope
    connect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableEnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumTwoFactorMethodFieldUpdateOperationsInput = {
    set?: $Enums.TwoFactorMethod
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language
  }

  export type EnumCommunicationChannelFieldUpdateOperationsInput = {
    set?: $Enums.CommunicationChannel
  }

  export type UserUpdateOneWithoutCustomerNestedInput = {
    create?: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: UserCreateOrConnectWithoutCustomerInput
    upsert?: UserUpsertWithoutCustomerInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCustomerInput, UserUpdateWithoutCustomerInput>, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type MedicalCaseUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput> | MedicalCaseCreateWithoutCustomerInput[] | MedicalCaseUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCustomerInput | MedicalCaseCreateOrConnectWithoutCustomerInput[]
    upsert?: MedicalCaseUpsertWithWhereUniqueWithoutCustomerInput | MedicalCaseUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: MedicalCaseCreateManyCustomerInputEnvelope
    set?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    disconnect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    delete?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    connect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    update?: MedicalCaseUpdateWithWhereUniqueWithoutCustomerInput | MedicalCaseUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: MedicalCaseUpdateManyWithWhereWithoutCustomerInput | MedicalCaseUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: MedicalCaseScalarWhereInput | MedicalCaseScalarWhereInput[]
  }

  export type CustomerSessionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput> | CustomerSessionCreateWithoutCustomerInput[] | CustomerSessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSessionCreateOrConnectWithoutCustomerInput | CustomerSessionCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerSessionUpsertWithWhereUniqueWithoutCustomerInput | CustomerSessionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerSessionCreateManyCustomerInputEnvelope
    set?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    disconnect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    delete?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    connect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    update?: CustomerSessionUpdateWithWhereUniqueWithoutCustomerInput | CustomerSessionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerSessionUpdateManyWithWhereWithoutCustomerInput | CustomerSessionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerSessionScalarWhereInput | CustomerSessionScalarWhereInput[]
  }

  export type CustomerNotificationUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput> | CustomerNotificationCreateWithoutCustomerInput[] | CustomerNotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerNotificationCreateOrConnectWithoutCustomerInput | CustomerNotificationCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerNotificationUpsertWithWhereUniqueWithoutCustomerInput | CustomerNotificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerNotificationCreateManyCustomerInputEnvelope
    set?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    disconnect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    delete?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    connect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    update?: CustomerNotificationUpdateWithWhereUniqueWithoutCustomerInput | CustomerNotificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerNotificationUpdateManyWithWhereWithoutCustomerInput | CustomerNotificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerNotificationScalarWhereInput | CustomerNotificationScalarWhereInput[]
  }

  export type MedicalCaseUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput> | MedicalCaseCreateWithoutCustomerInput[] | MedicalCaseUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCustomerInput | MedicalCaseCreateOrConnectWithoutCustomerInput[]
    upsert?: MedicalCaseUpsertWithWhereUniqueWithoutCustomerInput | MedicalCaseUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: MedicalCaseCreateManyCustomerInputEnvelope
    set?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    disconnect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    delete?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    connect?: MedicalCaseWhereUniqueInput | MedicalCaseWhereUniqueInput[]
    update?: MedicalCaseUpdateWithWhereUniqueWithoutCustomerInput | MedicalCaseUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: MedicalCaseUpdateManyWithWhereWithoutCustomerInput | MedicalCaseUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: MedicalCaseScalarWhereInput | MedicalCaseScalarWhereInput[]
  }

  export type CustomerSessionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput> | CustomerSessionCreateWithoutCustomerInput[] | CustomerSessionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerSessionCreateOrConnectWithoutCustomerInput | CustomerSessionCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerSessionUpsertWithWhereUniqueWithoutCustomerInput | CustomerSessionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerSessionCreateManyCustomerInputEnvelope
    set?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    disconnect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    delete?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    connect?: CustomerSessionWhereUniqueInput | CustomerSessionWhereUniqueInput[]
    update?: CustomerSessionUpdateWithWhereUniqueWithoutCustomerInput | CustomerSessionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerSessionUpdateManyWithWhereWithoutCustomerInput | CustomerSessionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerSessionScalarWhereInput | CustomerSessionScalarWhereInput[]
  }

  export type CustomerNotificationUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput> | CustomerNotificationCreateWithoutCustomerInput[] | CustomerNotificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerNotificationCreateOrConnectWithoutCustomerInput | CustomerNotificationCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerNotificationUpsertWithWhereUniqueWithoutCustomerInput | CustomerNotificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerNotificationCreateManyCustomerInputEnvelope
    set?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    disconnect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    delete?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    connect?: CustomerNotificationWhereUniqueInput | CustomerNotificationWhereUniqueInput[]
    update?: CustomerNotificationUpdateWithWhereUniqueWithoutCustomerInput | CustomerNotificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerNotificationUpdateManyWithWhereWithoutCustomerInput | CustomerNotificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerNotificationScalarWhereInput | CustomerNotificationScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutCustomerSessionsInput = {
    create?: XOR<CustomerCreateWithoutCustomerSessionsInput, CustomerUncheckedCreateWithoutCustomerSessionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerSessionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutCustomerSessionsNestedInput = {
    create?: XOR<CustomerCreateWithoutCustomerSessionsInput, CustomerUncheckedCreateWithoutCustomerSessionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCustomerSessionsInput
    upsert?: CustomerUpsertWithoutCustomerSessionsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCustomerSessionsInput, CustomerUpdateWithoutCustomerSessionsInput>, CustomerUncheckedUpdateWithoutCustomerSessionsInput>
  }

  export type CustomerCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationsInput
    connect?: CustomerWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutNotificationsInput
    upsert?: CustomerUpsertWithoutNotificationsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutNotificationsInput, CustomerUpdateWithoutNotificationsInput>, CustomerUncheckedUpdateWithoutNotificationsInput>
  }

  export type EnumCaseUrgencyFieldUpdateOperationsInput = {
    set?: $Enums.CaseUrgency
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MedicalCaseCreateNestedOneWithoutQuestionnaireResponseInput = {
    create?: XOR<MedicalCaseCreateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedCreateWithoutQuestionnaireResponseInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutQuestionnaireResponseInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type EnumQuestionnaireTypeFieldUpdateOperationsInput = {
    set?: $Enums.QuestionnaireType
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MedicalCaseUpdateOneRequiredWithoutQuestionnaireResponseNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedCreateWithoutQuestionnaireResponseInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutQuestionnaireResponseInput
    upsert?: MedicalCaseUpsertWithoutQuestionnaireResponseInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutQuestionnaireResponseInput, MedicalCaseUpdateWithoutQuestionnaireResponseInput>, MedicalCaseUncheckedUpdateWithoutQuestionnaireResponseInput>
  }

  export type MedicalCaseCreateNestedOneWithoutCasePaymentInput = {
    create?: XOR<MedicalCaseCreateWithoutCasePaymentInput, MedicalCaseUncheckedCreateWithoutCasePaymentInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCasePaymentInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type MedicalCaseUpdateOneRequiredWithoutCasePaymentNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutCasePaymentInput, MedicalCaseUncheckedCreateWithoutCasePaymentInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCasePaymentInput
    upsert?: MedicalCaseUpsertWithoutCasePaymentInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutCasePaymentInput, MedicalCaseUpdateWithoutCasePaymentInput>, MedicalCaseUncheckedUpdateWithoutCasePaymentInput>
  }

  export type MedicalCaseCreatetagsInput = {
    set: string[]
  }

  export type CustomerCreateNestedOneWithoutCasesInput = {
    create?: XOR<CustomerCreateWithoutCasesInput, CustomerUncheckedCreateWithoutCasesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCasesInput
    connect?: CustomerWhereUniqueInput
  }

  export type UploadedFileCreateNestedManyWithoutCaseInput = {
    create?: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput> | UploadedFileCreateWithoutCaseInput[] | UploadedFileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: UploadedFileCreateOrConnectWithoutCaseInput | UploadedFileCreateOrConnectWithoutCaseInput[]
    createMany?: UploadedFileCreateManyCaseInputEnvelope
    connect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
  }

  export type CaseStatusHistoryCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput> | CaseStatusHistoryCreateWithoutCaseInput[] | CaseStatusHistoryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseStatusHistoryCreateOrConnectWithoutCaseInput | CaseStatusHistoryCreateOrConnectWithoutCaseInput[]
    createMany?: CaseStatusHistoryCreateManyCaseInputEnvelope
    connect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
  }

  export type CaseAssignmentCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput> | CaseAssignmentCreateWithoutCaseInput[] | CaseAssignmentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutCaseInput | CaseAssignmentCreateOrConnectWithoutCaseInput[]
    createMany?: CaseAssignmentCreateManyCaseInputEnvelope
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
  }

  export type AIAnalysisCreateNestedManyWithoutCaseInput = {
    create?: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput> | AIAnalysisCreateWithoutCaseInput[] | AIAnalysisUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: AIAnalysisCreateOrConnectWithoutCaseInput | AIAnalysisCreateOrConnectWithoutCaseInput[]
    createMany?: AIAnalysisCreateManyCaseInputEnvelope
    connect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
  }

  export type MedicalOpinionCreateNestedManyWithoutCaseInput = {
    create?: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput> | MedicalOpinionCreateWithoutCaseInput[] | MedicalOpinionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutCaseInput | MedicalOpinionCreateOrConnectWithoutCaseInput[]
    createMany?: MedicalOpinionCreateManyCaseInputEnvelope
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
  }

  export type ProfessionalPaymentCreateNestedManyWithoutCaseInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput> | ProfessionalPaymentCreateWithoutCaseInput[] | ProfessionalPaymentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutCaseInput | ProfessionalPaymentCreateOrConnectWithoutCaseInput[]
    createMany?: ProfessionalPaymentCreateManyCaseInputEnvelope
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
  }

  export type QuestionnaireResponseCreateNestedOneWithoutCaseInput = {
    create?: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
    connectOrCreate?: QuestionnaireResponseCreateOrConnectWithoutCaseInput
    connect?: QuestionnaireResponseWhereUniqueInput
  }

  export type CasePaymentCreateNestedOneWithoutCaseInput = {
    create?: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CasePaymentCreateOrConnectWithoutCaseInput
    connect?: CasePaymentWhereUniqueInput
  }

  export type UploadedFileUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput> | UploadedFileCreateWithoutCaseInput[] | UploadedFileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: UploadedFileCreateOrConnectWithoutCaseInput | UploadedFileCreateOrConnectWithoutCaseInput[]
    createMany?: UploadedFileCreateManyCaseInputEnvelope
    connect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
  }

  export type CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput> | CaseStatusHistoryCreateWithoutCaseInput[] | CaseStatusHistoryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseStatusHistoryCreateOrConnectWithoutCaseInput | CaseStatusHistoryCreateOrConnectWithoutCaseInput[]
    createMany?: CaseStatusHistoryCreateManyCaseInputEnvelope
    connect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
  }

  export type CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput> | CaseAssignmentCreateWithoutCaseInput[] | CaseAssignmentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutCaseInput | CaseAssignmentCreateOrConnectWithoutCaseInput[]
    createMany?: CaseAssignmentCreateManyCaseInputEnvelope
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
  }

  export type AIAnalysisUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput> | AIAnalysisCreateWithoutCaseInput[] | AIAnalysisUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: AIAnalysisCreateOrConnectWithoutCaseInput | AIAnalysisCreateOrConnectWithoutCaseInput[]
    createMany?: AIAnalysisCreateManyCaseInputEnvelope
    connect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
  }

  export type MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput> | MedicalOpinionCreateWithoutCaseInput[] | MedicalOpinionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutCaseInput | MedicalOpinionCreateOrConnectWithoutCaseInput[]
    createMany?: MedicalOpinionCreateManyCaseInputEnvelope
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
  }

  export type ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput> | ProfessionalPaymentCreateWithoutCaseInput[] | ProfessionalPaymentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutCaseInput | ProfessionalPaymentCreateOrConnectWithoutCaseInput[]
    createMany?: ProfessionalPaymentCreateManyCaseInputEnvelope
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
  }

  export type QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
    connectOrCreate?: QuestionnaireResponseCreateOrConnectWithoutCaseInput
    connect?: QuestionnaireResponseWhereUniqueInput
  }

  export type CasePaymentUncheckedCreateNestedOneWithoutCaseInput = {
    create?: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CasePaymentCreateOrConnectWithoutCaseInput
    connect?: CasePaymentWhereUniqueInput
  }

  export type MedicalCaseUpdatetagsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type CustomerUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<CustomerCreateWithoutCasesInput, CustomerUncheckedCreateWithoutCasesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutCasesInput
    upsert?: CustomerUpsertWithoutCasesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutCasesInput, CustomerUpdateWithoutCasesInput>, CustomerUncheckedUpdateWithoutCasesInput>
  }

  export type UploadedFileUpdateManyWithoutCaseNestedInput = {
    create?: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput> | UploadedFileCreateWithoutCaseInput[] | UploadedFileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: UploadedFileCreateOrConnectWithoutCaseInput | UploadedFileCreateOrConnectWithoutCaseInput[]
    upsert?: UploadedFileUpsertWithWhereUniqueWithoutCaseInput | UploadedFileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: UploadedFileCreateManyCaseInputEnvelope
    set?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    disconnect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    delete?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    connect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    update?: UploadedFileUpdateWithWhereUniqueWithoutCaseInput | UploadedFileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: UploadedFileUpdateManyWithWhereWithoutCaseInput | UploadedFileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: UploadedFileScalarWhereInput | UploadedFileScalarWhereInput[]
  }

  export type CaseStatusHistoryUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput> | CaseStatusHistoryCreateWithoutCaseInput[] | CaseStatusHistoryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseStatusHistoryCreateOrConnectWithoutCaseInput | CaseStatusHistoryCreateOrConnectWithoutCaseInput[]
    upsert?: CaseStatusHistoryUpsertWithWhereUniqueWithoutCaseInput | CaseStatusHistoryUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseStatusHistoryCreateManyCaseInputEnvelope
    set?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    disconnect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    delete?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    connect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    update?: CaseStatusHistoryUpdateWithWhereUniqueWithoutCaseInput | CaseStatusHistoryUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseStatusHistoryUpdateManyWithWhereWithoutCaseInput | CaseStatusHistoryUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseStatusHistoryScalarWhereInput | CaseStatusHistoryScalarWhereInput[]
  }

  export type CaseAssignmentUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput> | CaseAssignmentCreateWithoutCaseInput[] | CaseAssignmentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutCaseInput | CaseAssignmentCreateOrConnectWithoutCaseInput[]
    upsert?: CaseAssignmentUpsertWithWhereUniqueWithoutCaseInput | CaseAssignmentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseAssignmentCreateManyCaseInputEnvelope
    set?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    disconnect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    delete?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    update?: CaseAssignmentUpdateWithWhereUniqueWithoutCaseInput | CaseAssignmentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseAssignmentUpdateManyWithWhereWithoutCaseInput | CaseAssignmentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
  }

  export type AIAnalysisUpdateManyWithoutCaseNestedInput = {
    create?: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput> | AIAnalysisCreateWithoutCaseInput[] | AIAnalysisUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: AIAnalysisCreateOrConnectWithoutCaseInput | AIAnalysisCreateOrConnectWithoutCaseInput[]
    upsert?: AIAnalysisUpsertWithWhereUniqueWithoutCaseInput | AIAnalysisUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: AIAnalysisCreateManyCaseInputEnvelope
    set?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    disconnect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    delete?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    connect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    update?: AIAnalysisUpdateWithWhereUniqueWithoutCaseInput | AIAnalysisUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: AIAnalysisUpdateManyWithWhereWithoutCaseInput | AIAnalysisUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: AIAnalysisScalarWhereInput | AIAnalysisScalarWhereInput[]
  }

  export type MedicalOpinionUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput> | MedicalOpinionCreateWithoutCaseInput[] | MedicalOpinionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutCaseInput | MedicalOpinionCreateOrConnectWithoutCaseInput[]
    upsert?: MedicalOpinionUpsertWithWhereUniqueWithoutCaseInput | MedicalOpinionUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MedicalOpinionCreateManyCaseInputEnvelope
    set?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    disconnect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    delete?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    update?: MedicalOpinionUpdateWithWhereUniqueWithoutCaseInput | MedicalOpinionUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MedicalOpinionUpdateManyWithWhereWithoutCaseInput | MedicalOpinionUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
  }

  export type ProfessionalPaymentUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput> | ProfessionalPaymentCreateWithoutCaseInput[] | ProfessionalPaymentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutCaseInput | ProfessionalPaymentCreateOrConnectWithoutCaseInput[]
    upsert?: ProfessionalPaymentUpsertWithWhereUniqueWithoutCaseInput | ProfessionalPaymentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ProfessionalPaymentCreateManyCaseInputEnvelope
    set?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    disconnect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    delete?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    update?: ProfessionalPaymentUpdateWithWhereUniqueWithoutCaseInput | ProfessionalPaymentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ProfessionalPaymentUpdateManyWithWhereWithoutCaseInput | ProfessionalPaymentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
  }

  export type QuestionnaireResponseUpdateOneWithoutCaseNestedInput = {
    create?: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
    connectOrCreate?: QuestionnaireResponseCreateOrConnectWithoutCaseInput
    upsert?: QuestionnaireResponseUpsertWithoutCaseInput
    disconnect?: QuestionnaireResponseWhereInput | boolean
    delete?: QuestionnaireResponseWhereInput | boolean
    connect?: QuestionnaireResponseWhereUniqueInput
    update?: XOR<XOR<QuestionnaireResponseUpdateToOneWithWhereWithoutCaseInput, QuestionnaireResponseUpdateWithoutCaseInput>, QuestionnaireResponseUncheckedUpdateWithoutCaseInput>
  }

  export type CasePaymentUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CasePaymentCreateOrConnectWithoutCaseInput
    upsert?: CasePaymentUpsertWithoutCaseInput
    disconnect?: CasePaymentWhereInput | boolean
    delete?: CasePaymentWhereInput | boolean
    connect?: CasePaymentWhereUniqueInput
    update?: XOR<XOR<CasePaymentUpdateToOneWithWhereWithoutCaseInput, CasePaymentUpdateWithoutCaseInput>, CasePaymentUncheckedUpdateWithoutCaseInput>
  }

  export type UploadedFileUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput> | UploadedFileCreateWithoutCaseInput[] | UploadedFileUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: UploadedFileCreateOrConnectWithoutCaseInput | UploadedFileCreateOrConnectWithoutCaseInput[]
    upsert?: UploadedFileUpsertWithWhereUniqueWithoutCaseInput | UploadedFileUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: UploadedFileCreateManyCaseInputEnvelope
    set?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    disconnect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    delete?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    connect?: UploadedFileWhereUniqueInput | UploadedFileWhereUniqueInput[]
    update?: UploadedFileUpdateWithWhereUniqueWithoutCaseInput | UploadedFileUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: UploadedFileUpdateManyWithWhereWithoutCaseInput | UploadedFileUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: UploadedFileScalarWhereInput | UploadedFileScalarWhereInput[]
  }

  export type CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput> | CaseStatusHistoryCreateWithoutCaseInput[] | CaseStatusHistoryUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseStatusHistoryCreateOrConnectWithoutCaseInput | CaseStatusHistoryCreateOrConnectWithoutCaseInput[]
    upsert?: CaseStatusHistoryUpsertWithWhereUniqueWithoutCaseInput | CaseStatusHistoryUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseStatusHistoryCreateManyCaseInputEnvelope
    set?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    disconnect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    delete?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    connect?: CaseStatusHistoryWhereUniqueInput | CaseStatusHistoryWhereUniqueInput[]
    update?: CaseStatusHistoryUpdateWithWhereUniqueWithoutCaseInput | CaseStatusHistoryUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseStatusHistoryUpdateManyWithWhereWithoutCaseInput | CaseStatusHistoryUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseStatusHistoryScalarWhereInput | CaseStatusHistoryScalarWhereInput[]
  }

  export type CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput> | CaseAssignmentCreateWithoutCaseInput[] | CaseAssignmentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutCaseInput | CaseAssignmentCreateOrConnectWithoutCaseInput[]
    upsert?: CaseAssignmentUpsertWithWhereUniqueWithoutCaseInput | CaseAssignmentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: CaseAssignmentCreateManyCaseInputEnvelope
    set?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    disconnect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    delete?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    update?: CaseAssignmentUpdateWithWhereUniqueWithoutCaseInput | CaseAssignmentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: CaseAssignmentUpdateManyWithWhereWithoutCaseInput | CaseAssignmentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
  }

  export type AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput> | AIAnalysisCreateWithoutCaseInput[] | AIAnalysisUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: AIAnalysisCreateOrConnectWithoutCaseInput | AIAnalysisCreateOrConnectWithoutCaseInput[]
    upsert?: AIAnalysisUpsertWithWhereUniqueWithoutCaseInput | AIAnalysisUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: AIAnalysisCreateManyCaseInputEnvelope
    set?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    disconnect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    delete?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    connect?: AIAnalysisWhereUniqueInput | AIAnalysisWhereUniqueInput[]
    update?: AIAnalysisUpdateWithWhereUniqueWithoutCaseInput | AIAnalysisUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: AIAnalysisUpdateManyWithWhereWithoutCaseInput | AIAnalysisUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: AIAnalysisScalarWhereInput | AIAnalysisScalarWhereInput[]
  }

  export type MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput> | MedicalOpinionCreateWithoutCaseInput[] | MedicalOpinionUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutCaseInput | MedicalOpinionCreateOrConnectWithoutCaseInput[]
    upsert?: MedicalOpinionUpsertWithWhereUniqueWithoutCaseInput | MedicalOpinionUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: MedicalOpinionCreateManyCaseInputEnvelope
    set?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    disconnect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    delete?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    update?: MedicalOpinionUpdateWithWhereUniqueWithoutCaseInput | MedicalOpinionUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: MedicalOpinionUpdateManyWithWhereWithoutCaseInput | MedicalOpinionUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
  }

  export type ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput> | ProfessionalPaymentCreateWithoutCaseInput[] | ProfessionalPaymentUncheckedCreateWithoutCaseInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutCaseInput | ProfessionalPaymentCreateOrConnectWithoutCaseInput[]
    upsert?: ProfessionalPaymentUpsertWithWhereUniqueWithoutCaseInput | ProfessionalPaymentUpsertWithWhereUniqueWithoutCaseInput[]
    createMany?: ProfessionalPaymentCreateManyCaseInputEnvelope
    set?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    disconnect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    delete?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    update?: ProfessionalPaymentUpdateWithWhereUniqueWithoutCaseInput | ProfessionalPaymentUpdateWithWhereUniqueWithoutCaseInput[]
    updateMany?: ProfessionalPaymentUpdateManyWithWhereWithoutCaseInput | ProfessionalPaymentUpdateManyWithWhereWithoutCaseInput[]
    deleteMany?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
  }

  export type QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
    connectOrCreate?: QuestionnaireResponseCreateOrConnectWithoutCaseInput
    upsert?: QuestionnaireResponseUpsertWithoutCaseInput
    disconnect?: QuestionnaireResponseWhereInput | boolean
    delete?: QuestionnaireResponseWhereInput | boolean
    connect?: QuestionnaireResponseWhereUniqueInput
    update?: XOR<XOR<QuestionnaireResponseUpdateToOneWithWhereWithoutCaseInput, QuestionnaireResponseUpdateWithoutCaseInput>, QuestionnaireResponseUncheckedUpdateWithoutCaseInput>
  }

  export type CasePaymentUncheckedUpdateOneWithoutCaseNestedInput = {
    create?: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
    connectOrCreate?: CasePaymentCreateOrConnectWithoutCaseInput
    upsert?: CasePaymentUpsertWithoutCaseInput
    disconnect?: CasePaymentWhereInput | boolean
    delete?: CasePaymentWhereInput | boolean
    connect?: CasePaymentWhereUniqueInput
    update?: XOR<XOR<CasePaymentUpdateToOneWithWhereWithoutCaseInput, CasePaymentUpdateWithoutCaseInput>, CasePaymentUncheckedUpdateWithoutCaseInput>
  }

  export type MedicalCaseCreateNestedOneWithoutStatusHistoryInput = {
    create?: XOR<MedicalCaseCreateWithoutStatusHistoryInput, MedicalCaseUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutStatusHistoryInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutStatusHistoryNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutStatusHistoryInput, MedicalCaseUncheckedCreateWithoutStatusHistoryInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutStatusHistoryInput
    upsert?: MedicalCaseUpsertWithoutStatusHistoryInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutStatusHistoryInput, MedicalCaseUpdateWithoutStatusHistoryInput>, MedicalCaseUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type MedicalCaseCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<MedicalCaseCreateWithoutUploadedFilesInput, MedicalCaseUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutUploadedFilesInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutUploadedFilesInput, MedicalCaseUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutUploadedFilesInput
    upsert?: MedicalCaseUpsertWithoutUploadedFilesInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutUploadedFilesInput, MedicalCaseUpdateWithoutUploadedFilesInput>, MedicalCaseUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type CaseAssignmentCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput> | CaseAssignmentCreateWithoutProfessionalInput[] | CaseAssignmentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutProfessionalInput | CaseAssignmentCreateOrConnectWithoutProfessionalInput[]
    createMany?: CaseAssignmentCreateManyProfessionalInputEnvelope
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
  }

  export type MedicalOpinionCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput> | MedicalOpinionCreateWithoutProfessionalInput[] | MedicalOpinionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutProfessionalInput | MedicalOpinionCreateOrConnectWithoutProfessionalInput[]
    createMany?: MedicalOpinionCreateManyProfessionalInputEnvelope
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
  }

  export type ProfessionalPaymentCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput> | ProfessionalPaymentCreateWithoutProfessionalInput[] | ProfessionalPaymentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutProfessionalInput | ProfessionalPaymentCreateOrConnectWithoutProfessionalInput[]
    createMany?: ProfessionalPaymentCreateManyProfessionalInputEnvelope
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
  }

  export type ProfessionalSessionCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput> | ProfessionalSessionCreateWithoutProfessionalInput[] | ProfessionalSessionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalSessionCreateOrConnectWithoutProfessionalInput | ProfessionalSessionCreateOrConnectWithoutProfessionalInput[]
    createMany?: ProfessionalSessionCreateManyProfessionalInputEnvelope
    connect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
  }

  export type CaseAssignmentUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput> | CaseAssignmentCreateWithoutProfessionalInput[] | CaseAssignmentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutProfessionalInput | CaseAssignmentCreateOrConnectWithoutProfessionalInput[]
    createMany?: CaseAssignmentCreateManyProfessionalInputEnvelope
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
  }

  export type MedicalOpinionUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput> | MedicalOpinionCreateWithoutProfessionalInput[] | MedicalOpinionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutProfessionalInput | MedicalOpinionCreateOrConnectWithoutProfessionalInput[]
    createMany?: MedicalOpinionCreateManyProfessionalInputEnvelope
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
  }

  export type ProfessionalPaymentUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput> | ProfessionalPaymentCreateWithoutProfessionalInput[] | ProfessionalPaymentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutProfessionalInput | ProfessionalPaymentCreateOrConnectWithoutProfessionalInput[]
    createMany?: ProfessionalPaymentCreateManyProfessionalInputEnvelope
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
  }

  export type ProfessionalSessionUncheckedCreateNestedManyWithoutProfessionalInput = {
    create?: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput> | ProfessionalSessionCreateWithoutProfessionalInput[] | ProfessionalSessionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalSessionCreateOrConnectWithoutProfessionalInput | ProfessionalSessionCreateOrConnectWithoutProfessionalInput[]
    createMany?: ProfessionalSessionCreateManyProfessionalInputEnvelope
    connect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
  }

  export type EnumProLevelFieldUpdateOperationsInput = {
    set?: $Enums.ProLevel
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CaseAssignmentUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput> | CaseAssignmentCreateWithoutProfessionalInput[] | CaseAssignmentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutProfessionalInput | CaseAssignmentCreateOrConnectWithoutProfessionalInput[]
    upsert?: CaseAssignmentUpsertWithWhereUniqueWithoutProfessionalInput | CaseAssignmentUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: CaseAssignmentCreateManyProfessionalInputEnvelope
    set?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    disconnect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    delete?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    update?: CaseAssignmentUpdateWithWhereUniqueWithoutProfessionalInput | CaseAssignmentUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: CaseAssignmentUpdateManyWithWhereWithoutProfessionalInput | CaseAssignmentUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
  }

  export type MedicalOpinionUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput> | MedicalOpinionCreateWithoutProfessionalInput[] | MedicalOpinionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutProfessionalInput | MedicalOpinionCreateOrConnectWithoutProfessionalInput[]
    upsert?: MedicalOpinionUpsertWithWhereUniqueWithoutProfessionalInput | MedicalOpinionUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: MedicalOpinionCreateManyProfessionalInputEnvelope
    set?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    disconnect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    delete?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    update?: MedicalOpinionUpdateWithWhereUniqueWithoutProfessionalInput | MedicalOpinionUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: MedicalOpinionUpdateManyWithWhereWithoutProfessionalInput | MedicalOpinionUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
  }

  export type ProfessionalPaymentUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput> | ProfessionalPaymentCreateWithoutProfessionalInput[] | ProfessionalPaymentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutProfessionalInput | ProfessionalPaymentCreateOrConnectWithoutProfessionalInput[]
    upsert?: ProfessionalPaymentUpsertWithWhereUniqueWithoutProfessionalInput | ProfessionalPaymentUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: ProfessionalPaymentCreateManyProfessionalInputEnvelope
    set?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    disconnect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    delete?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    update?: ProfessionalPaymentUpdateWithWhereUniqueWithoutProfessionalInput | ProfessionalPaymentUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: ProfessionalPaymentUpdateManyWithWhereWithoutProfessionalInput | ProfessionalPaymentUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
  }

  export type ProfessionalSessionUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput> | ProfessionalSessionCreateWithoutProfessionalInput[] | ProfessionalSessionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalSessionCreateOrConnectWithoutProfessionalInput | ProfessionalSessionCreateOrConnectWithoutProfessionalInput[]
    upsert?: ProfessionalSessionUpsertWithWhereUniqueWithoutProfessionalInput | ProfessionalSessionUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: ProfessionalSessionCreateManyProfessionalInputEnvelope
    set?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    disconnect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    delete?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    connect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    update?: ProfessionalSessionUpdateWithWhereUniqueWithoutProfessionalInput | ProfessionalSessionUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: ProfessionalSessionUpdateManyWithWhereWithoutProfessionalInput | ProfessionalSessionUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: ProfessionalSessionScalarWhereInput | ProfessionalSessionScalarWhereInput[]
  }

  export type CaseAssignmentUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput> | CaseAssignmentCreateWithoutProfessionalInput[] | CaseAssignmentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: CaseAssignmentCreateOrConnectWithoutProfessionalInput | CaseAssignmentCreateOrConnectWithoutProfessionalInput[]
    upsert?: CaseAssignmentUpsertWithWhereUniqueWithoutProfessionalInput | CaseAssignmentUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: CaseAssignmentCreateManyProfessionalInputEnvelope
    set?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    disconnect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    delete?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    connect?: CaseAssignmentWhereUniqueInput | CaseAssignmentWhereUniqueInput[]
    update?: CaseAssignmentUpdateWithWhereUniqueWithoutProfessionalInput | CaseAssignmentUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: CaseAssignmentUpdateManyWithWhereWithoutProfessionalInput | CaseAssignmentUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
  }

  export type MedicalOpinionUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput> | MedicalOpinionCreateWithoutProfessionalInput[] | MedicalOpinionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: MedicalOpinionCreateOrConnectWithoutProfessionalInput | MedicalOpinionCreateOrConnectWithoutProfessionalInput[]
    upsert?: MedicalOpinionUpsertWithWhereUniqueWithoutProfessionalInput | MedicalOpinionUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: MedicalOpinionCreateManyProfessionalInputEnvelope
    set?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    disconnect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    delete?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    connect?: MedicalOpinionWhereUniqueInput | MedicalOpinionWhereUniqueInput[]
    update?: MedicalOpinionUpdateWithWhereUniqueWithoutProfessionalInput | MedicalOpinionUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: MedicalOpinionUpdateManyWithWhereWithoutProfessionalInput | MedicalOpinionUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
  }

  export type ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput> | ProfessionalPaymentCreateWithoutProfessionalInput[] | ProfessionalPaymentUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalPaymentCreateOrConnectWithoutProfessionalInput | ProfessionalPaymentCreateOrConnectWithoutProfessionalInput[]
    upsert?: ProfessionalPaymentUpsertWithWhereUniqueWithoutProfessionalInput | ProfessionalPaymentUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: ProfessionalPaymentCreateManyProfessionalInputEnvelope
    set?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    disconnect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    delete?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    connect?: ProfessionalPaymentWhereUniqueInput | ProfessionalPaymentWhereUniqueInput[]
    update?: ProfessionalPaymentUpdateWithWhereUniqueWithoutProfessionalInput | ProfessionalPaymentUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: ProfessionalPaymentUpdateManyWithWhereWithoutProfessionalInput | ProfessionalPaymentUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
  }

  export type ProfessionalSessionUncheckedUpdateManyWithoutProfessionalNestedInput = {
    create?: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput> | ProfessionalSessionCreateWithoutProfessionalInput[] | ProfessionalSessionUncheckedCreateWithoutProfessionalInput[]
    connectOrCreate?: ProfessionalSessionCreateOrConnectWithoutProfessionalInput | ProfessionalSessionCreateOrConnectWithoutProfessionalInput[]
    upsert?: ProfessionalSessionUpsertWithWhereUniqueWithoutProfessionalInput | ProfessionalSessionUpsertWithWhereUniqueWithoutProfessionalInput[]
    createMany?: ProfessionalSessionCreateManyProfessionalInputEnvelope
    set?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    disconnect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    delete?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    connect?: ProfessionalSessionWhereUniqueInput | ProfessionalSessionWhereUniqueInput[]
    update?: ProfessionalSessionUpdateWithWhereUniqueWithoutProfessionalInput | ProfessionalSessionUpdateWithWhereUniqueWithoutProfessionalInput[]
    updateMany?: ProfessionalSessionUpdateManyWithWhereWithoutProfessionalInput | ProfessionalSessionUpdateManyWithWhereWithoutProfessionalInput[]
    deleteMany?: ProfessionalSessionScalarWhereInput | ProfessionalSessionScalarWhereInput[]
  }

  export type MedicalProfessionalCreateNestedOneWithoutProfessionalSessionsInput = {
    create?: XOR<MedicalProfessionalCreateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalSessionsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutProfessionalSessionsInput
    connect?: MedicalProfessionalWhereUniqueInput
  }

  export type MedicalProfessionalUpdateOneRequiredWithoutProfessionalSessionsNestedInput = {
    create?: XOR<MedicalProfessionalCreateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalSessionsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutProfessionalSessionsInput
    upsert?: MedicalProfessionalUpsertWithoutProfessionalSessionsInput
    connect?: MedicalProfessionalWhereUniqueInput
    update?: XOR<XOR<MedicalProfessionalUpdateToOneWithWhereWithoutProfessionalSessionsInput, MedicalProfessionalUpdateWithoutProfessionalSessionsInput>, MedicalProfessionalUncheckedUpdateWithoutProfessionalSessionsInput>
  }

  export type MedicalCaseCreateNestedOneWithoutCaseAssignmentsInput = {
    create?: XOR<MedicalCaseCreateWithoutCaseAssignmentsInput, MedicalCaseUncheckedCreateWithoutCaseAssignmentsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCaseAssignmentsInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalProfessionalCreateNestedOneWithoutCaseAssignmentsInput = {
    create?: XOR<MedicalProfessionalCreateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedCreateWithoutCaseAssignmentsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutCaseAssignmentsInput
    connect?: MedicalProfessionalWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutCaseAssignmentsNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutCaseAssignmentsInput, MedicalCaseUncheckedCreateWithoutCaseAssignmentsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutCaseAssignmentsInput
    upsert?: MedicalCaseUpsertWithoutCaseAssignmentsInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutCaseAssignmentsInput, MedicalCaseUpdateWithoutCaseAssignmentsInput>, MedicalCaseUncheckedUpdateWithoutCaseAssignmentsInput>
  }

  export type MedicalProfessionalUpdateOneRequiredWithoutCaseAssignmentsNestedInput = {
    create?: XOR<MedicalProfessionalCreateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedCreateWithoutCaseAssignmentsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutCaseAssignmentsInput
    upsert?: MedicalProfessionalUpsertWithoutCaseAssignmentsInput
    connect?: MedicalProfessionalWhereUniqueInput
    update?: XOR<XOR<MedicalProfessionalUpdateToOneWithWhereWithoutCaseAssignmentsInput, MedicalProfessionalUpdateWithoutCaseAssignmentsInput>, MedicalProfessionalUncheckedUpdateWithoutCaseAssignmentsInput>
  }

  export type MedicalCaseCreateNestedOneWithoutAiAnalysesInput = {
    create?: XOR<MedicalCaseCreateWithoutAiAnalysesInput, MedicalCaseUncheckedCreateWithoutAiAnalysesInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutAiAnalysesInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutAiAnalysesNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutAiAnalysesInput, MedicalCaseUncheckedCreateWithoutAiAnalysesInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutAiAnalysesInput
    upsert?: MedicalCaseUpsertWithoutAiAnalysesInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutAiAnalysesInput, MedicalCaseUpdateWithoutAiAnalysesInput>, MedicalCaseUncheckedUpdateWithoutAiAnalysesInput>
  }

  export type MedicalCaseCreateNestedOneWithoutMedicalOpinionsInput = {
    create?: XOR<MedicalCaseCreateWithoutMedicalOpinionsInput, MedicalCaseUncheckedCreateWithoutMedicalOpinionsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutMedicalOpinionsInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalProfessionalCreateNestedOneWithoutMedicalOpinionsInput = {
    create?: XOR<MedicalProfessionalCreateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedCreateWithoutMedicalOpinionsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutMedicalOpinionsInput
    connect?: MedicalProfessionalWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutMedicalOpinionsNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutMedicalOpinionsInput, MedicalCaseUncheckedCreateWithoutMedicalOpinionsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutMedicalOpinionsInput
    upsert?: MedicalCaseUpsertWithoutMedicalOpinionsInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutMedicalOpinionsInput, MedicalCaseUpdateWithoutMedicalOpinionsInput>, MedicalCaseUncheckedUpdateWithoutMedicalOpinionsInput>
  }

  export type MedicalProfessionalUpdateOneRequiredWithoutMedicalOpinionsNestedInput = {
    create?: XOR<MedicalProfessionalCreateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedCreateWithoutMedicalOpinionsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutMedicalOpinionsInput
    upsert?: MedicalProfessionalUpsertWithoutMedicalOpinionsInput
    connect?: MedicalProfessionalWhereUniqueInput
    update?: XOR<XOR<MedicalProfessionalUpdateToOneWithWhereWithoutMedicalOpinionsInput, MedicalProfessionalUpdateWithoutMedicalOpinionsInput>, MedicalProfessionalUncheckedUpdateWithoutMedicalOpinionsInput>
  }

  export type MedicalCaseCreateNestedOneWithoutProfessionalPaymentsInput = {
    create?: XOR<MedicalCaseCreateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedCreateWithoutProfessionalPaymentsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutProfessionalPaymentsInput
    connect?: MedicalCaseWhereUniqueInput
  }

  export type MedicalProfessionalCreateNestedOneWithoutProfessionalPaymentsInput = {
    create?: XOR<MedicalProfessionalCreateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalPaymentsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutProfessionalPaymentsInput
    connect?: MedicalProfessionalWhereUniqueInput
  }

  export type MedicalCaseUpdateOneRequiredWithoutProfessionalPaymentsNestedInput = {
    create?: XOR<MedicalCaseCreateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedCreateWithoutProfessionalPaymentsInput>
    connectOrCreate?: MedicalCaseCreateOrConnectWithoutProfessionalPaymentsInput
    upsert?: MedicalCaseUpsertWithoutProfessionalPaymentsInput
    connect?: MedicalCaseWhereUniqueInput
    update?: XOR<XOR<MedicalCaseUpdateToOneWithWhereWithoutProfessionalPaymentsInput, MedicalCaseUpdateWithoutProfessionalPaymentsInput>, MedicalCaseUncheckedUpdateWithoutProfessionalPaymentsInput>
  }

  export type MedicalProfessionalUpdateOneRequiredWithoutProfessionalPaymentsNestedInput = {
    create?: XOR<MedicalProfessionalCreateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalPaymentsInput>
    connectOrCreate?: MedicalProfessionalCreateOrConnectWithoutProfessionalPaymentsInput
    upsert?: MedicalProfessionalUpsertWithoutProfessionalPaymentsInput
    connect?: MedicalProfessionalWhereUniqueInput
    update?: XOR<XOR<MedicalProfessionalUpdateToOneWithWhereWithoutProfessionalPaymentsInput, MedicalProfessionalUpdateWithoutProfessionalPaymentsInput>, MedicalProfessionalUncheckedUpdateWithoutProfessionalPaymentsInput>
  }

  export type CandidateDocumentCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput> | CandidateDocumentCreateWithoutCandidateInput[] | CandidateDocumentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateDocumentCreateOrConnectWithoutCandidateInput | CandidateDocumentCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateDocumentCreateManyCandidateInputEnvelope
    connect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
  }

  export type ApplicationReviewCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput> | ApplicationReviewCreateWithoutCandidateInput[] | ApplicationReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationReviewCreateOrConnectWithoutCandidateInput | ApplicationReviewCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationReviewCreateManyCandidateInputEnvelope
    connect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
  }

  export type CandidateDocumentUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput> | CandidateDocumentCreateWithoutCandidateInput[] | CandidateDocumentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateDocumentCreateOrConnectWithoutCandidateInput | CandidateDocumentCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateDocumentCreateManyCandidateInputEnvelope
    connect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
  }

  export type ApplicationReviewUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput> | ApplicationReviewCreateWithoutCandidateInput[] | ApplicationReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationReviewCreateOrConnectWithoutCandidateInput | ApplicationReviewCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationReviewCreateManyCandidateInputEnvelope
    connect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
  }

  export type NullableEnumProLevelFieldUpdateOperationsInput = {
    set?: $Enums.ProLevel | null
  }

  export type EnumCandidateStatusFieldUpdateOperationsInput = {
    set?: $Enums.CandidateStatus
  }

  export type CandidateDocumentUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput> | CandidateDocumentCreateWithoutCandidateInput[] | CandidateDocumentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateDocumentCreateOrConnectWithoutCandidateInput | CandidateDocumentCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateDocumentUpsertWithWhereUniqueWithoutCandidateInput | CandidateDocumentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateDocumentCreateManyCandidateInputEnvelope
    set?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    disconnect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    delete?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    connect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    update?: CandidateDocumentUpdateWithWhereUniqueWithoutCandidateInput | CandidateDocumentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateDocumentUpdateManyWithWhereWithoutCandidateInput | CandidateDocumentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateDocumentScalarWhereInput | CandidateDocumentScalarWhereInput[]
  }

  export type ApplicationReviewUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput> | ApplicationReviewCreateWithoutCandidateInput[] | ApplicationReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationReviewCreateOrConnectWithoutCandidateInput | ApplicationReviewCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationReviewUpsertWithWhereUniqueWithoutCandidateInput | ApplicationReviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationReviewCreateManyCandidateInputEnvelope
    set?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    disconnect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    delete?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    connect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    update?: ApplicationReviewUpdateWithWhereUniqueWithoutCandidateInput | ApplicationReviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationReviewUpdateManyWithWhereWithoutCandidateInput | ApplicationReviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationReviewScalarWhereInput | ApplicationReviewScalarWhereInput[]
  }

  export type CandidateDocumentUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput> | CandidateDocumentCreateWithoutCandidateInput[] | CandidateDocumentUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateDocumentCreateOrConnectWithoutCandidateInput | CandidateDocumentCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateDocumentUpsertWithWhereUniqueWithoutCandidateInput | CandidateDocumentUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateDocumentCreateManyCandidateInputEnvelope
    set?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    disconnect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    delete?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    connect?: CandidateDocumentWhereUniqueInput | CandidateDocumentWhereUniqueInput[]
    update?: CandidateDocumentUpdateWithWhereUniqueWithoutCandidateInput | CandidateDocumentUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateDocumentUpdateManyWithWhereWithoutCandidateInput | CandidateDocumentUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateDocumentScalarWhereInput | CandidateDocumentScalarWhereInput[]
  }

  export type ApplicationReviewUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput> | ApplicationReviewCreateWithoutCandidateInput[] | ApplicationReviewUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationReviewCreateOrConnectWithoutCandidateInput | ApplicationReviewCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationReviewUpsertWithWhereUniqueWithoutCandidateInput | ApplicationReviewUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationReviewCreateManyCandidateInputEnvelope
    set?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    disconnect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    delete?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    connect?: ApplicationReviewWhereUniqueInput | ApplicationReviewWhereUniqueInput[]
    update?: ApplicationReviewUpdateWithWhereUniqueWithoutCandidateInput | ApplicationReviewUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationReviewUpdateManyWithWhereWithoutCandidateInput | ApplicationReviewUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationReviewScalarWhereInput | ApplicationReviewScalarWhereInput[]
  }

  export type ProfessionalCandidateCreateNestedOneWithoutDocumentsInput = {
    create?: XOR<ProfessionalCandidateCreateWithoutDocumentsInput, ProfessionalCandidateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProfessionalCandidateCreateOrConnectWithoutDocumentsInput
    connect?: ProfessionalCandidateWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type ProfessionalCandidateUpdateOneRequiredWithoutDocumentsNestedInput = {
    create?: XOR<ProfessionalCandidateCreateWithoutDocumentsInput, ProfessionalCandidateUncheckedCreateWithoutDocumentsInput>
    connectOrCreate?: ProfessionalCandidateCreateOrConnectWithoutDocumentsInput
    upsert?: ProfessionalCandidateUpsertWithoutDocumentsInput
    connect?: ProfessionalCandidateWhereUniqueInput
    update?: XOR<XOR<ProfessionalCandidateUpdateToOneWithWhereWithoutDocumentsInput, ProfessionalCandidateUpdateWithoutDocumentsInput>, ProfessionalCandidateUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProfessionalCandidateCreateNestedOneWithoutReviewsInput = {
    create?: XOR<ProfessionalCandidateCreateWithoutReviewsInput, ProfessionalCandidateUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProfessionalCandidateCreateOrConnectWithoutReviewsInput
    connect?: ProfessionalCandidateWhereUniqueInput
  }

  export type EnumReviewDecisionFieldUpdateOperationsInput = {
    set?: $Enums.ReviewDecision
  }

  export type ProfessionalCandidateUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<ProfessionalCandidateCreateWithoutReviewsInput, ProfessionalCandidateUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: ProfessionalCandidateCreateOrConnectWithoutReviewsInput
    upsert?: ProfessionalCandidateUpsertWithoutReviewsInput
    connect?: ProfessionalCandidateWhereUniqueInput
    update?: XOR<XOR<ProfessionalCandidateUpdateToOneWithWhereWithoutReviewsInput, ProfessionalCandidateUpdateWithoutReviewsInput>, ProfessionalCandidateUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumGenderNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableFilter<$PrismaModel> | $Enums.Gender | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumTwoFactorMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.TwoFactorMethod | EnumTwoFactorMethodFieldRefInput<$PrismaModel>
    in?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumTwoFactorMethodFilter<$PrismaModel> | $Enums.TwoFactorMethod
  }

  export type NestedEnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type NestedEnumCommunicationChannelFilter<$PrismaModel = never> = {
    equals?: $Enums.CommunicationChannel | EnumCommunicationChannelFieldRefInput<$PrismaModel>
    in?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumCommunicationChannelFilter<$PrismaModel> | $Enums.CommunicationChannel
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel> | null
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel> | null
    not?: NestedEnumGenderNullableWithAggregatesFilter<$PrismaModel> | $Enums.Gender | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumGenderNullableFilter<$PrismaModel>
    _max?: NestedEnumGenderNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumTwoFactorMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TwoFactorMethod | EnumTwoFactorMethodFieldRefInput<$PrismaModel>
    in?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.TwoFactorMethod[] | ListEnumTwoFactorMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumTwoFactorMethodWithAggregatesFilter<$PrismaModel> | $Enums.TwoFactorMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTwoFactorMethodFilter<$PrismaModel>
    _max?: NestedEnumTwoFactorMethodFilter<$PrismaModel>
  }

  export type NestedEnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type NestedEnumCommunicationChannelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommunicationChannel | EnumCommunicationChannelFieldRefInput<$PrismaModel>
    in?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CommunicationChannel[] | ListEnumCommunicationChannelFieldRefInput<$PrismaModel>
    not?: NestedEnumCommunicationChannelWithAggregatesFilter<$PrismaModel> | $Enums.CommunicationChannel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCommunicationChannelFilter<$PrismaModel>
    _max?: NestedEnumCommunicationChannelFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCaseUrgencyFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseUrgency | EnumCaseUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseUrgencyFilter<$PrismaModel> | $Enums.CaseUrgency
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCaseUrgencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CaseUrgency | EnumCaseUrgencyFieldRefInput<$PrismaModel>
    in?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.CaseUrgency[] | ListEnumCaseUrgencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCaseUrgencyWithAggregatesFilter<$PrismaModel> | $Enums.CaseUrgency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCaseUrgencyFilter<$PrismaModel>
    _max?: NestedEnumCaseUrgencyFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumQuestionnaireTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionnaireType | EnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionnaireTypeFilter<$PrismaModel> | $Enums.QuestionnaireType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumQuestionnaireTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QuestionnaireType | EnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    in?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QuestionnaireType[] | ListEnumQuestionnaireTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQuestionnaireTypeWithAggregatesFilter<$PrismaModel> | $Enums.QuestionnaireType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQuestionnaireTypeFilter<$PrismaModel>
    _max?: NestedEnumQuestionnaireTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumProLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumProLevelFilter<$PrismaModel> | $Enums.ProLevel
  }

  export type NestedEnumProLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumProLevelWithAggregatesFilter<$PrismaModel> | $Enums.ProLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProLevelFilter<$PrismaModel>
    _max?: NestedEnumProLevelFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumProLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProLevelNullableFilter<$PrismaModel> | $Enums.ProLevel | null
  }

  export type NestedEnumCandidateStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusFilter<$PrismaModel> | $Enums.CandidateStatus
  }

  export type NestedEnumProLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProLevel | EnumProLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ProLevel[] | ListEnumProLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumProLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.ProLevel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumProLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumProLevelNullableFilter<$PrismaModel>
  }

  export type NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CandidateStatus | EnumCandidateStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CandidateStatus[] | ListEnumCandidateStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCandidateStatusWithAggregatesFilter<$PrismaModel> | $Enums.CandidateStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCandidateStatusFilter<$PrismaModel>
    _max?: NestedEnumCandidateStatusFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumReviewDecisionFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewDecision | EnumReviewDecisionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewDecisionFilter<$PrismaModel> | $Enums.ReviewDecision
  }

  export type NestedEnumReviewDecisionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReviewDecision | EnumReviewDecisionFieldRefInput<$PrismaModel>
    in?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReviewDecision[] | ListEnumReviewDecisionFieldRefInput<$PrismaModel>
    not?: NestedEnumReviewDecisionWithAggregatesFilter<$PrismaModel> | $Enums.ReviewDecision
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReviewDecisionFilter<$PrismaModel>
    _max?: NestedEnumReviewDecisionFilter<$PrismaModel>
  }

  export type CustomerCreateWithoutUserInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cases?: MedicalCaseCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    cases?: MedicalCaseUncheckedCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutUserInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
  }

  export type CustomerUpsertWithoutUserInput = {
    update: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
    create: XOR<CustomerCreateWithoutUserInput, CustomerUncheckedCreateWithoutUserInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutUserInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutUserInput, CustomerUncheckedUpdateWithoutUserInput>
  }

  export type CustomerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: MedicalCaseUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: MedicalCaseUncheckedUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UserCreateWithoutCustomerInput = {
    id?: string
    email: string
    hashedPassword: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutCustomerInput = {
    id?: string
    email: string
    hashedPassword: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutCustomerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
  }

  export type MedicalCaseCreateWithoutCustomerInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutCustomerInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutCustomerInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput>
  }

  export type MedicalCaseCreateManyCustomerInputEnvelope = {
    data: MedicalCaseCreateManyCustomerInput | MedicalCaseCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerSessionCreateWithoutCustomerInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
  }

  export type CustomerSessionUncheckedCreateWithoutCustomerInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
  }

  export type CustomerSessionCreateOrConnectWithoutCustomerInput = {
    where: CustomerSessionWhereUniqueInput
    create: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerSessionCreateManyCustomerInputEnvelope = {
    data: CustomerSessionCreateManyCustomerInput | CustomerSessionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type CustomerNotificationCreateWithoutCustomerInput = {
    id?: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CustomerNotificationUncheckedCreateWithoutCustomerInput = {
    id?: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CustomerNotificationCreateOrConnectWithoutCustomerInput = {
    where: CustomerNotificationWhereUniqueInput
    create: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerNotificationCreateManyCustomerInputEnvelope = {
    data: CustomerNotificationCreateManyCustomerInput | CustomerNotificationCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCustomerInput = {
    update: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
    create: XOR<UserCreateWithoutCustomerInput, UserUncheckedCreateWithoutCustomerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCustomerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCustomerInput, UserUncheckedUpdateWithoutCustomerInput>
  }

  export type UserUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCaseUpsertWithWhereUniqueWithoutCustomerInput = {
    where: MedicalCaseWhereUniqueInput
    update: XOR<MedicalCaseUpdateWithoutCustomerInput, MedicalCaseUncheckedUpdateWithoutCustomerInput>
    create: XOR<MedicalCaseCreateWithoutCustomerInput, MedicalCaseUncheckedCreateWithoutCustomerInput>
  }

  export type MedicalCaseUpdateWithWhereUniqueWithoutCustomerInput = {
    where: MedicalCaseWhereUniqueInput
    data: XOR<MedicalCaseUpdateWithoutCustomerInput, MedicalCaseUncheckedUpdateWithoutCustomerInput>
  }

  export type MedicalCaseUpdateManyWithWhereWithoutCustomerInput = {
    where: MedicalCaseScalarWhereInput
    data: XOR<MedicalCaseUpdateManyMutationInput, MedicalCaseUncheckedUpdateManyWithoutCustomerInput>
  }

  export type MedicalCaseScalarWhereInput = {
    AND?: MedicalCaseScalarWhereInput | MedicalCaseScalarWhereInput[]
    OR?: MedicalCaseScalarWhereInput[]
    NOT?: MedicalCaseScalarWhereInput | MedicalCaseScalarWhereInput[]
    id?: StringFilter<"MedicalCase"> | string
    caseNumber?: StringFilter<"MedicalCase"> | string
    customerId?: StringFilter<"MedicalCase"> | string
    firstName?: StringFilter<"MedicalCase"> | string
    middleName?: StringNullableFilter<"MedicalCase"> | string | null
    lastName?: StringFilter<"MedicalCase"> | string
    dateOfBirth?: DateTimeFilter<"MedicalCase"> | Date | string
    email?: StringFilter<"MedicalCase"> | string
    phone?: StringNullableFilter<"MedicalCase"> | string | null
    title?: StringFilter<"MedicalCase"> | string
    description?: StringFilter<"MedicalCase"> | string
    chiefComplaint?: StringNullableFilter<"MedicalCase"> | string | null
    category?: StringFilter<"MedicalCase"> | string
    medicalHistory?: JsonNullableFilter<"MedicalCase">
    currentMedications?: JsonNullableFilter<"MedicalCase">
    allergies?: JsonNullableFilter<"MedicalCase">
    familyHistory?: JsonNullableFilter<"MedicalCase">
    status?: StringFilter<"MedicalCase"> | string
    priority?: StringFilter<"MedicalCase"> | string
    requestedProfessionalLevel?: StringFilter<"MedicalCase"> | string
    talentPool?: StringNullableFilter<"MedicalCase"> | string | null
    urgencyReason?: StringNullableFilter<"MedicalCase"> | string | null
    submittedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    reviewStartedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    assignedProfessionalId?: StringNullableFilter<"MedicalCase"> | string | null
    assignedAt?: DateTimeNullableFilter<"MedicalCase"> | Date | string | null
    qualityScore?: FloatNullableFilter<"MedicalCase"> | number | null
    completenessScore?: FloatNullableFilter<"MedicalCase"> | number | null
    metadata?: JsonNullableFilter<"MedicalCase">
    tags?: StringNullableListFilter<"MedicalCase">
    version?: IntFilter<"MedicalCase"> | number
    ethnicity?: StringNullableFilter<"MedicalCase"> | string | null
    gender?: StringNullableFilter<"MedicalCase"> | string | null
    diseaseType?: StringNullableFilter<"MedicalCase"> | string | null
    isFirstOccurrence?: BoolNullableFilter<"MedicalCase"> | boolean | null
    geneticFamilyHistory?: JsonNullableFilter<"MedicalCase">
    paymentId?: StringNullableFilter<"MedicalCase"> | string | null
    consentAccepted?: BoolFilter<"MedicalCase"> | boolean
    createdAt?: DateTimeFilter<"MedicalCase"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalCase"> | Date | string
  }

  export type CustomerSessionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerSessionWhereUniqueInput
    update: XOR<CustomerSessionUpdateWithoutCustomerInput, CustomerSessionUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerSessionCreateWithoutCustomerInput, CustomerSessionUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerSessionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerSessionWhereUniqueInput
    data: XOR<CustomerSessionUpdateWithoutCustomerInput, CustomerSessionUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerSessionUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerSessionScalarWhereInput
    data: XOR<CustomerSessionUpdateManyMutationInput, CustomerSessionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerSessionScalarWhereInput = {
    AND?: CustomerSessionScalarWhereInput | CustomerSessionScalarWhereInput[]
    OR?: CustomerSessionScalarWhereInput[]
    NOT?: CustomerSessionScalarWhereInput | CustomerSessionScalarWhereInput[]
    id?: StringFilter<"CustomerSession"> | string
    customerId?: StringFilter<"CustomerSession"> | string
    sessionToken?: StringFilter<"CustomerSession"> | string
    twoFactorVerified?: BoolFilter<"CustomerSession"> | boolean
    ipAddress?: StringNullableFilter<"CustomerSession"> | string | null
    userAgent?: StringNullableFilter<"CustomerSession"> | string | null
    expiresAt?: DateTimeFilter<"CustomerSession"> | Date | string
    lastActivity?: DateTimeFilter<"CustomerSession"> | Date | string
    createdAt?: DateTimeFilter<"CustomerSession"> | Date | string
  }

  export type CustomerNotificationUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerNotificationWhereUniqueInput
    update: XOR<CustomerNotificationUpdateWithoutCustomerInput, CustomerNotificationUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerNotificationCreateWithoutCustomerInput, CustomerNotificationUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerNotificationUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerNotificationWhereUniqueInput
    data: XOR<CustomerNotificationUpdateWithoutCustomerInput, CustomerNotificationUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerNotificationUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerNotificationScalarWhereInput
    data: XOR<CustomerNotificationUpdateManyMutationInput, CustomerNotificationUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerNotificationScalarWhereInput = {
    AND?: CustomerNotificationScalarWhereInput | CustomerNotificationScalarWhereInput[]
    OR?: CustomerNotificationScalarWhereInput[]
    NOT?: CustomerNotificationScalarWhereInput | CustomerNotificationScalarWhereInput[]
    id?: StringFilter<"CustomerNotification"> | string
    customerId?: StringFilter<"CustomerNotification"> | string
    type?: StringFilter<"CustomerNotification"> | string
    channel?: EnumCommunicationChannelFilter<"CustomerNotification"> | $Enums.CommunicationChannel
    subject?: StringNullableFilter<"CustomerNotification"> | string | null
    message?: StringFilter<"CustomerNotification"> | string
    language?: EnumLanguageFilter<"CustomerNotification"> | $Enums.Language
    status?: StringFilter<"CustomerNotification"> | string
    scheduledFor?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    readAt?: DateTimeNullableFilter<"CustomerNotification"> | Date | string | null
    errorMessage?: StringNullableFilter<"CustomerNotification"> | string | null
    metadata?: JsonNullableFilter<"CustomerNotification">
    createdAt?: DateTimeFilter<"CustomerNotification"> | Date | string
  }

  export type CustomerCreateWithoutCustomerSessionsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerInput
    cases?: MedicalCaseCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCustomerSessionsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cases?: MedicalCaseUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCustomerSessionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCustomerSessionsInput, CustomerUncheckedCreateWithoutCustomerSessionsInput>
  }

  export type CustomerUpsertWithoutCustomerSessionsInput = {
    update: XOR<CustomerUpdateWithoutCustomerSessionsInput, CustomerUncheckedUpdateWithoutCustomerSessionsInput>
    create: XOR<CustomerCreateWithoutCustomerSessionsInput, CustomerUncheckedCreateWithoutCustomerSessionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCustomerSessionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCustomerSessionsInput, CustomerUncheckedUpdateWithoutCustomerSessionsInput>
  }

  export type CustomerUpdateWithoutCustomerSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerNestedInput
    cases?: MedicalCaseUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCustomerSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: MedicalCaseUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateWithoutNotificationsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerInput
    cases?: MedicalCaseCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutNotificationsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cases?: MedicalCaseUncheckedCreateNestedManyWithoutCustomerInput
    customerSessions?: CustomerSessionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutNotificationsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
  }

  export type CustomerUpsertWithoutNotificationsInput = {
    update: XOR<CustomerUpdateWithoutNotificationsInput, CustomerUncheckedUpdateWithoutNotificationsInput>
    create: XOR<CustomerCreateWithoutNotificationsInput, CustomerUncheckedCreateWithoutNotificationsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutNotificationsInput, CustomerUncheckedUpdateWithoutNotificationsInput>
  }

  export type CustomerUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerNestedInput
    cases?: MedicalCaseUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cases?: MedicalCaseUncheckedUpdateManyWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type MedicalCaseCreateWithoutQuestionnaireResponseInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutQuestionnaireResponseInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutQuestionnaireResponseInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedCreateWithoutQuestionnaireResponseInput>
  }

  export type MedicalCaseUpsertWithoutQuestionnaireResponseInput = {
    update: XOR<MedicalCaseUpdateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedUpdateWithoutQuestionnaireResponseInput>
    create: XOR<MedicalCaseCreateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedCreateWithoutQuestionnaireResponseInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutQuestionnaireResponseInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutQuestionnaireResponseInput, MedicalCaseUncheckedUpdateWithoutQuestionnaireResponseInput>
  }

  export type MedicalCaseUpdateWithoutQuestionnaireResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutQuestionnaireResponseInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseCreateWithoutCasePaymentInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutCasePaymentInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutCasePaymentInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutCasePaymentInput, MedicalCaseUncheckedCreateWithoutCasePaymentInput>
  }

  export type MedicalCaseUpsertWithoutCasePaymentInput = {
    update: XOR<MedicalCaseUpdateWithoutCasePaymentInput, MedicalCaseUncheckedUpdateWithoutCasePaymentInput>
    create: XOR<MedicalCaseCreateWithoutCasePaymentInput, MedicalCaseUncheckedCreateWithoutCasePaymentInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutCasePaymentInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutCasePaymentInput, MedicalCaseUncheckedUpdateWithoutCasePaymentInput>
  }

  export type MedicalCaseUpdateWithoutCasePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutCasePaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CustomerCreateWithoutCasesInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutCustomerInput
    customerSessions?: CustomerSessionCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutCasesInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth?: Date | string | null
    gender?: $Enums.Gender | null
    email: string
    phone?: string | null
    hashedPassword: string
    emailVerified?: boolean
    phoneVerified?: boolean
    twoFactorEnabled?: boolean
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    preferredLanguage?: $Enums.Language
    preferredChannel?: $Enums.CommunicationChannel
    emailNotifications?: boolean
    smsNotifications?: boolean
    whatsappNotifications?: boolean
    googleId?: string | null
    appleId?: string | null
    microsoftId?: string | null
    oauthProvider?: string | null
    profileCompleted?: boolean
    termsAccepted?: boolean
    privacyAccepted?: boolean
    marketingConsent?: boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    customerSessions?: CustomerSessionUncheckedCreateNestedManyWithoutCustomerInput
    notifications?: CustomerNotificationUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutCasesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutCasesInput, CustomerUncheckedCreateWithoutCasesInput>
  }

  export type UploadedFileCreateWithoutCaseInput = {
    id?: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
  }

  export type UploadedFileUncheckedCreateWithoutCaseInput = {
    id?: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
  }

  export type UploadedFileCreateOrConnectWithoutCaseInput = {
    where: UploadedFileWhereUniqueInput
    create: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput>
  }

  export type UploadedFileCreateManyCaseInputEnvelope = {
    data: UploadedFileCreateManyCaseInput | UploadedFileCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseStatusHistoryCreateWithoutCaseInput = {
    id?: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
  }

  export type CaseStatusHistoryUncheckedCreateWithoutCaseInput = {
    id?: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
  }

  export type CaseStatusHistoryCreateOrConnectWithoutCaseInput = {
    where: CaseStatusHistoryWhereUniqueInput
    create: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput>
  }

  export type CaseStatusHistoryCreateManyCaseInputEnvelope = {
    data: CaseStatusHistoryCreateManyCaseInput | CaseStatusHistoryCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type CaseAssignmentCreateWithoutCaseInput = {
    id?: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    professional: MedicalProfessionalCreateNestedOneWithoutCaseAssignmentsInput
  }

  export type CaseAssignmentUncheckedCreateWithoutCaseInput = {
    id?: string
    professionalId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentCreateOrConnectWithoutCaseInput = {
    where: CaseAssignmentWhereUniqueInput
    create: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput>
  }

  export type CaseAssignmentCreateManyCaseInputEnvelope = {
    data: CaseAssignmentCreateManyCaseInput | CaseAssignmentCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type AIAnalysisCreateWithoutCaseInput = {
    id?: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AIAnalysisUncheckedCreateWithoutCaseInput = {
    id?: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type AIAnalysisCreateOrConnectWithoutCaseInput = {
    where: AIAnalysisWhereUniqueInput
    create: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput>
  }

  export type AIAnalysisCreateManyCaseInputEnvelope = {
    data: AIAnalysisCreateManyCaseInput | AIAnalysisCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type MedicalOpinionCreateWithoutCaseInput = {
    id?: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    professional: MedicalProfessionalCreateNestedOneWithoutMedicalOpinionsInput
  }

  export type MedicalOpinionUncheckedCreateWithoutCaseInput = {
    id?: string
    professionalId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalOpinionCreateOrConnectWithoutCaseInput = {
    where: MedicalOpinionWhereUniqueInput
    create: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput>
  }

  export type MedicalOpinionCreateManyCaseInputEnvelope = {
    data: MedicalOpinionCreateManyCaseInput | MedicalOpinionCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalPaymentCreateWithoutCaseInput = {
    id?: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    professional: MedicalProfessionalCreateNestedOneWithoutProfessionalPaymentsInput
  }

  export type ProfessionalPaymentUncheckedCreateWithoutCaseInput = {
    id?: string
    professionalId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentCreateOrConnectWithoutCaseInput = {
    where: ProfessionalPaymentWhereUniqueInput
    create: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput>
  }

  export type ProfessionalPaymentCreateManyCaseInputEnvelope = {
    data: ProfessionalPaymentCreateManyCaseInput | ProfessionalPaymentCreateManyCaseInput[]
    skipDuplicates?: boolean
  }

  export type QuestionnaireResponseCreateWithoutCaseInput = {
    id?: string
    questionnaireType: $Enums.QuestionnaireType
    language?: $Enums.Language
    responses: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: number | null
    confidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionnaireResponseUncheckedCreateWithoutCaseInput = {
    id?: string
    questionnaireType: $Enums.QuestionnaireType
    language?: $Enums.Language
    responses: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: number | null
    confidence?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionnaireResponseCreateOrConnectWithoutCaseInput = {
    where: QuestionnaireResponseWhereUniqueInput
    create: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
  }

  export type CasePaymentCreateWithoutCaseInput = {
    id?: string
    customerId: string
    amount: number
    currency?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    status?: $Enums.PaymentStatus
    paymentMethod?: string | null
    transactionId?: string | null
    paymentDate?: Date | string | null
    refundDate?: Date | string | null
    refundReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CasePaymentUncheckedCreateWithoutCaseInput = {
    id?: string
    customerId: string
    amount: number
    currency?: string
    professionalLevel: string
    urgencyLevel?: $Enums.CaseUrgency
    status?: $Enums.PaymentStatus
    paymentMethod?: string | null
    transactionId?: string | null
    paymentDate?: Date | string | null
    refundDate?: Date | string | null
    refundReason?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CasePaymentCreateOrConnectWithoutCaseInput = {
    where: CasePaymentWhereUniqueInput
    create: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
  }

  export type CustomerUpsertWithoutCasesInput = {
    update: XOR<CustomerUpdateWithoutCasesInput, CustomerUncheckedUpdateWithoutCasesInput>
    create: XOR<CustomerCreateWithoutCasesInput, CustomerUncheckedCreateWithoutCasesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutCasesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutCasesInput, CustomerUncheckedUpdateWithoutCasesInput>
  }

  export type CustomerUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutCustomerNestedInput
    customerSessions?: CustomerSessionUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutCasesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableEnumGenderFieldUpdateOperationsInput | $Enums.Gender | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    hashedPassword?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneVerified?: BoolFieldUpdateOperationsInput | boolean
    twoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    preferredLanguage?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    preferredChannel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    whatsappNotifications?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    appleId?: NullableStringFieldUpdateOperationsInput | string | null
    microsoftId?: NullableStringFieldUpdateOperationsInput | string | null
    oauthProvider?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    termsAccepted?: BoolFieldUpdateOperationsInput | boolean
    privacyAccepted?: BoolFieldUpdateOperationsInput | boolean
    marketingConsent?: BoolFieldUpdateOperationsInput | boolean
    metadata?: NullableJsonNullValueInput | InputJsonValue
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customerSessions?: CustomerSessionUncheckedUpdateManyWithoutCustomerNestedInput
    notifications?: CustomerNotificationUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type UploadedFileUpsertWithWhereUniqueWithoutCaseInput = {
    where: UploadedFileWhereUniqueInput
    update: XOR<UploadedFileUpdateWithoutCaseInput, UploadedFileUncheckedUpdateWithoutCaseInput>
    create: XOR<UploadedFileCreateWithoutCaseInput, UploadedFileUncheckedCreateWithoutCaseInput>
  }

  export type UploadedFileUpdateWithWhereUniqueWithoutCaseInput = {
    where: UploadedFileWhereUniqueInput
    data: XOR<UploadedFileUpdateWithoutCaseInput, UploadedFileUncheckedUpdateWithoutCaseInput>
  }

  export type UploadedFileUpdateManyWithWhereWithoutCaseInput = {
    where: UploadedFileScalarWhereInput
    data: XOR<UploadedFileUpdateManyMutationInput, UploadedFileUncheckedUpdateManyWithoutCaseInput>
  }

  export type UploadedFileScalarWhereInput = {
    AND?: UploadedFileScalarWhereInput | UploadedFileScalarWhereInput[]
    OR?: UploadedFileScalarWhereInput[]
    NOT?: UploadedFileScalarWhereInput | UploadedFileScalarWhereInput[]
    id?: StringFilter<"UploadedFile"> | string
    caseId?: StringFilter<"UploadedFile"> | string
    filename?: StringFilter<"UploadedFile"> | string
    s3Key?: StringFilter<"UploadedFile"> | string
    mimetype?: StringFilter<"UploadedFile"> | string
    size?: IntFilter<"UploadedFile"> | number
    category?: StringFilter<"UploadedFile"> | string
    metadata?: JsonNullableFilter<"UploadedFile">
    checksum?: StringNullableFilter<"UploadedFile"> | string | null
    encrypted?: BoolFilter<"UploadedFile"> | boolean
    createdAt?: DateTimeFilter<"UploadedFile"> | Date | string
  }

  export type CaseStatusHistoryUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseStatusHistoryWhereUniqueInput
    update: XOR<CaseStatusHistoryUpdateWithoutCaseInput, CaseStatusHistoryUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseStatusHistoryCreateWithoutCaseInput, CaseStatusHistoryUncheckedCreateWithoutCaseInput>
  }

  export type CaseStatusHistoryUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseStatusHistoryWhereUniqueInput
    data: XOR<CaseStatusHistoryUpdateWithoutCaseInput, CaseStatusHistoryUncheckedUpdateWithoutCaseInput>
  }

  export type CaseStatusHistoryUpdateManyWithWhereWithoutCaseInput = {
    where: CaseStatusHistoryScalarWhereInput
    data: XOR<CaseStatusHistoryUpdateManyMutationInput, CaseStatusHistoryUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseStatusHistoryScalarWhereInput = {
    AND?: CaseStatusHistoryScalarWhereInput | CaseStatusHistoryScalarWhereInput[]
    OR?: CaseStatusHistoryScalarWhereInput[]
    NOT?: CaseStatusHistoryScalarWhereInput | CaseStatusHistoryScalarWhereInput[]
    id?: StringFilter<"CaseStatusHistory"> | string
    caseId?: StringFilter<"CaseStatusHistory"> | string
    fromStatus?: StringNullableFilter<"CaseStatusHistory"> | string | null
    toStatus?: StringFilter<"CaseStatusHistory"> | string
    reason?: StringNullableFilter<"CaseStatusHistory"> | string | null
    notes?: StringNullableFilter<"CaseStatusHistory"> | string | null
    changedByType?: StringFilter<"CaseStatusHistory"> | string
    changedById?: StringFilter<"CaseStatusHistory"> | string
    createdAt?: DateTimeFilter<"CaseStatusHistory"> | Date | string
  }

  export type CaseAssignmentUpsertWithWhereUniqueWithoutCaseInput = {
    where: CaseAssignmentWhereUniqueInput
    update: XOR<CaseAssignmentUpdateWithoutCaseInput, CaseAssignmentUncheckedUpdateWithoutCaseInput>
    create: XOR<CaseAssignmentCreateWithoutCaseInput, CaseAssignmentUncheckedCreateWithoutCaseInput>
  }

  export type CaseAssignmentUpdateWithWhereUniqueWithoutCaseInput = {
    where: CaseAssignmentWhereUniqueInput
    data: XOR<CaseAssignmentUpdateWithoutCaseInput, CaseAssignmentUncheckedUpdateWithoutCaseInput>
  }

  export type CaseAssignmentUpdateManyWithWhereWithoutCaseInput = {
    where: CaseAssignmentScalarWhereInput
    data: XOR<CaseAssignmentUpdateManyMutationInput, CaseAssignmentUncheckedUpdateManyWithoutCaseInput>
  }

  export type CaseAssignmentScalarWhereInput = {
    AND?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
    OR?: CaseAssignmentScalarWhereInput[]
    NOT?: CaseAssignmentScalarWhereInput | CaseAssignmentScalarWhereInput[]
    id?: StringFilter<"CaseAssignment"> | string
    caseId?: StringFilter<"CaseAssignment"> | string
    professionalId?: StringFilter<"CaseAssignment"> | string
    status?: StringFilter<"CaseAssignment"> | string
    assignedAt?: DateTimeFilter<"CaseAssignment"> | Date | string
    startedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"CaseAssignment"> | Date | string | null
    estimatedDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    actualDuration?: IntNullableFilter<"CaseAssignment"> | number | null
    metadata?: JsonNullableFilter<"CaseAssignment">
  }

  export type AIAnalysisUpsertWithWhereUniqueWithoutCaseInput = {
    where: AIAnalysisWhereUniqueInput
    update: XOR<AIAnalysisUpdateWithoutCaseInput, AIAnalysisUncheckedUpdateWithoutCaseInput>
    create: XOR<AIAnalysisCreateWithoutCaseInput, AIAnalysisUncheckedCreateWithoutCaseInput>
  }

  export type AIAnalysisUpdateWithWhereUniqueWithoutCaseInput = {
    where: AIAnalysisWhereUniqueInput
    data: XOR<AIAnalysisUpdateWithoutCaseInput, AIAnalysisUncheckedUpdateWithoutCaseInput>
  }

  export type AIAnalysisUpdateManyWithWhereWithoutCaseInput = {
    where: AIAnalysisScalarWhereInput
    data: XOR<AIAnalysisUpdateManyMutationInput, AIAnalysisUncheckedUpdateManyWithoutCaseInput>
  }

  export type AIAnalysisScalarWhereInput = {
    AND?: AIAnalysisScalarWhereInput | AIAnalysisScalarWhereInput[]
    OR?: AIAnalysisScalarWhereInput[]
    NOT?: AIAnalysisScalarWhereInput | AIAnalysisScalarWhereInput[]
    id?: StringFilter<"AIAnalysis"> | string
    caseId?: StringFilter<"AIAnalysis"> | string
    analysisType?: StringFilter<"AIAnalysis"> | string
    results?: JsonFilter<"AIAnalysis">
    confidence?: FloatNullableFilter<"AIAnalysis"> | number | null
    processingTime?: IntNullableFilter<"AIAnalysis"> | number | null
    aiProvider?: StringNullableFilter<"AIAnalysis"> | string | null
    modelVersion?: StringNullableFilter<"AIAnalysis"> | string | null
    cost?: FloatNullableFilter<"AIAnalysis"> | number | null
    metadata?: JsonNullableFilter<"AIAnalysis">
    createdAt?: DateTimeFilter<"AIAnalysis"> | Date | string
  }

  export type MedicalOpinionUpsertWithWhereUniqueWithoutCaseInput = {
    where: MedicalOpinionWhereUniqueInput
    update: XOR<MedicalOpinionUpdateWithoutCaseInput, MedicalOpinionUncheckedUpdateWithoutCaseInput>
    create: XOR<MedicalOpinionCreateWithoutCaseInput, MedicalOpinionUncheckedCreateWithoutCaseInput>
  }

  export type MedicalOpinionUpdateWithWhereUniqueWithoutCaseInput = {
    where: MedicalOpinionWhereUniqueInput
    data: XOR<MedicalOpinionUpdateWithoutCaseInput, MedicalOpinionUncheckedUpdateWithoutCaseInput>
  }

  export type MedicalOpinionUpdateManyWithWhereWithoutCaseInput = {
    where: MedicalOpinionScalarWhereInput
    data: XOR<MedicalOpinionUpdateManyMutationInput, MedicalOpinionUncheckedUpdateManyWithoutCaseInput>
  }

  export type MedicalOpinionScalarWhereInput = {
    AND?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
    OR?: MedicalOpinionScalarWhereInput[]
    NOT?: MedicalOpinionScalarWhereInput | MedicalOpinionScalarWhereInput[]
    id?: StringFilter<"MedicalOpinion"> | string
    caseId?: StringFilter<"MedicalOpinion"> | string
    professionalId?: StringFilter<"MedicalOpinion"> | string
    content?: StringFilter<"MedicalOpinion"> | string
    status?: StringFilter<"MedicalOpinion"> | string
    version?: IntFilter<"MedicalOpinion"> | number
    digitalSignature?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedBy?: StringNullableFilter<"MedicalOpinion"> | string | null
    reviewedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    publishedAt?: DateTimeNullableFilter<"MedicalOpinion"> | Date | string | null
    metadata?: JsonNullableFilter<"MedicalOpinion">
    createdAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalOpinion"> | Date | string
  }

  export type ProfessionalPaymentUpsertWithWhereUniqueWithoutCaseInput = {
    where: ProfessionalPaymentWhereUniqueInput
    update: XOR<ProfessionalPaymentUpdateWithoutCaseInput, ProfessionalPaymentUncheckedUpdateWithoutCaseInput>
    create: XOR<ProfessionalPaymentCreateWithoutCaseInput, ProfessionalPaymentUncheckedCreateWithoutCaseInput>
  }

  export type ProfessionalPaymentUpdateWithWhereUniqueWithoutCaseInput = {
    where: ProfessionalPaymentWhereUniqueInput
    data: XOR<ProfessionalPaymentUpdateWithoutCaseInput, ProfessionalPaymentUncheckedUpdateWithoutCaseInput>
  }

  export type ProfessionalPaymentUpdateManyWithWhereWithoutCaseInput = {
    where: ProfessionalPaymentScalarWhereInput
    data: XOR<ProfessionalPaymentUpdateManyMutationInput, ProfessionalPaymentUncheckedUpdateManyWithoutCaseInput>
  }

  export type ProfessionalPaymentScalarWhereInput = {
    AND?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
    OR?: ProfessionalPaymentScalarWhereInput[]
    NOT?: ProfessionalPaymentScalarWhereInput | ProfessionalPaymentScalarWhereInput[]
    id?: StringFilter<"ProfessionalPayment"> | string
    caseId?: StringFilter<"ProfessionalPayment"> | string
    professionalId?: StringFilter<"ProfessionalPayment"> | string
    amount?: FloatFilter<"ProfessionalPayment"> | number
    currency?: StringFilter<"ProfessionalPayment"> | string
    status?: StringFilter<"ProfessionalPayment"> | string
    paymentMethod?: StringNullableFilter<"ProfessionalPayment"> | string | null
    transactionId?: StringNullableFilter<"ProfessionalPayment"> | string | null
    processedAt?: DateTimeNullableFilter<"ProfessionalPayment"> | Date | string | null
    metadata?: JsonNullableFilter<"ProfessionalPayment">
    createdAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
    updatedAt?: DateTimeFilter<"ProfessionalPayment"> | Date | string
  }

  export type QuestionnaireResponseUpsertWithoutCaseInput = {
    update: XOR<QuestionnaireResponseUpdateWithoutCaseInput, QuestionnaireResponseUncheckedUpdateWithoutCaseInput>
    create: XOR<QuestionnaireResponseCreateWithoutCaseInput, QuestionnaireResponseUncheckedCreateWithoutCaseInput>
    where?: QuestionnaireResponseWhereInput
  }

  export type QuestionnaireResponseUpdateToOneWithWhereWithoutCaseInput = {
    where?: QuestionnaireResponseWhereInput
    data: XOR<QuestionnaireResponseUpdateWithoutCaseInput, QuestionnaireResponseUncheckedUpdateWithoutCaseInput>
  }

  export type QuestionnaireResponseUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionnaireResponseUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionnaireType?: EnumQuestionnaireTypeFieldUpdateOperationsInput | $Enums.QuestionnaireType
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    responses?: JsonNullValueInput | InputJsonValue
    aiAnalysis?: NullableJsonNullValueInput | InputJsonValue
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CasePaymentUpsertWithoutCaseInput = {
    update: XOR<CasePaymentUpdateWithoutCaseInput, CasePaymentUncheckedUpdateWithoutCaseInput>
    create: XOR<CasePaymentCreateWithoutCaseInput, CasePaymentUncheckedCreateWithoutCaseInput>
    where?: CasePaymentWhereInput
  }

  export type CasePaymentUpdateToOneWithWhereWithoutCaseInput = {
    where?: CasePaymentWhereInput
    data: XOR<CasePaymentUpdateWithoutCaseInput, CasePaymentUncheckedUpdateWithoutCaseInput>
  }

  export type CasePaymentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CasePaymentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    professionalLevel?: StringFieldUpdateOperationsInput | string
    urgencyLevel?: EnumCaseUrgencyFieldUpdateOperationsInput | $Enums.CaseUrgency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refundReason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalCaseCreateWithoutStatusHistoryInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutStatusHistoryInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutStatusHistoryInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutStatusHistoryInput, MedicalCaseUncheckedCreateWithoutStatusHistoryInput>
  }

  export type MedicalCaseUpsertWithoutStatusHistoryInput = {
    update: XOR<MedicalCaseUpdateWithoutStatusHistoryInput, MedicalCaseUncheckedUpdateWithoutStatusHistoryInput>
    create: XOR<MedicalCaseCreateWithoutStatusHistoryInput, MedicalCaseUncheckedCreateWithoutStatusHistoryInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutStatusHistoryInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutStatusHistoryInput, MedicalCaseUncheckedUpdateWithoutStatusHistoryInput>
  }

  export type MedicalCaseUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutStatusHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseCreateWithoutUploadedFilesInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutUploadedFilesInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutUploadedFilesInput, MedicalCaseUncheckedCreateWithoutUploadedFilesInput>
  }

  export type MedicalCaseUpsertWithoutUploadedFilesInput = {
    update: XOR<MedicalCaseUpdateWithoutUploadedFilesInput, MedicalCaseUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<MedicalCaseCreateWithoutUploadedFilesInput, MedicalCaseUncheckedCreateWithoutUploadedFilesInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutUploadedFilesInput, MedicalCaseUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type MedicalCaseUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type CaseAssignmentCreateWithoutProfessionalInput = {
    id?: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    case: MedicalCaseCreateNestedOneWithoutCaseAssignmentsInput
  }

  export type CaseAssignmentUncheckedCreateWithoutProfessionalInput = {
    id?: string
    caseId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentCreateOrConnectWithoutProfessionalInput = {
    where: CaseAssignmentWhereUniqueInput
    create: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput>
  }

  export type CaseAssignmentCreateManyProfessionalInputEnvelope = {
    data: CaseAssignmentCreateManyProfessionalInput | CaseAssignmentCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type MedicalOpinionCreateWithoutProfessionalInput = {
    id?: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutMedicalOpinionsInput
  }

  export type MedicalOpinionUncheckedCreateWithoutProfessionalInput = {
    id?: string
    caseId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MedicalOpinionCreateOrConnectWithoutProfessionalInput = {
    where: MedicalOpinionWhereUniqueInput
    create: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput>
  }

  export type MedicalOpinionCreateManyProfessionalInputEnvelope = {
    data: MedicalOpinionCreateManyProfessionalInput | MedicalOpinionCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalPaymentCreateWithoutProfessionalInput = {
    id?: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    case: MedicalCaseCreateNestedOneWithoutProfessionalPaymentsInput
  }

  export type ProfessionalPaymentUncheckedCreateWithoutProfessionalInput = {
    id?: string
    caseId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentCreateOrConnectWithoutProfessionalInput = {
    where: ProfessionalPaymentWhereUniqueInput
    create: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput>
  }

  export type ProfessionalPaymentCreateManyProfessionalInputEnvelope = {
    data: ProfessionalPaymentCreateManyProfessionalInput | ProfessionalPaymentCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type ProfessionalSessionCreateWithoutProfessionalInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ProfessionalSessionUncheckedCreateWithoutProfessionalInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type ProfessionalSessionCreateOrConnectWithoutProfessionalInput = {
    where: ProfessionalSessionWhereUniqueInput
    create: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput>
  }

  export type ProfessionalSessionCreateManyProfessionalInputEnvelope = {
    data: ProfessionalSessionCreateManyProfessionalInput | ProfessionalSessionCreateManyProfessionalInput[]
    skipDuplicates?: boolean
  }

  export type CaseAssignmentUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: CaseAssignmentWhereUniqueInput
    update: XOR<CaseAssignmentUpdateWithoutProfessionalInput, CaseAssignmentUncheckedUpdateWithoutProfessionalInput>
    create: XOR<CaseAssignmentCreateWithoutProfessionalInput, CaseAssignmentUncheckedCreateWithoutProfessionalInput>
  }

  export type CaseAssignmentUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: CaseAssignmentWhereUniqueInput
    data: XOR<CaseAssignmentUpdateWithoutProfessionalInput, CaseAssignmentUncheckedUpdateWithoutProfessionalInput>
  }

  export type CaseAssignmentUpdateManyWithWhereWithoutProfessionalInput = {
    where: CaseAssignmentScalarWhereInput
    data: XOR<CaseAssignmentUpdateManyMutationInput, CaseAssignmentUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type MedicalOpinionUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: MedicalOpinionWhereUniqueInput
    update: XOR<MedicalOpinionUpdateWithoutProfessionalInput, MedicalOpinionUncheckedUpdateWithoutProfessionalInput>
    create: XOR<MedicalOpinionCreateWithoutProfessionalInput, MedicalOpinionUncheckedCreateWithoutProfessionalInput>
  }

  export type MedicalOpinionUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: MedicalOpinionWhereUniqueInput
    data: XOR<MedicalOpinionUpdateWithoutProfessionalInput, MedicalOpinionUncheckedUpdateWithoutProfessionalInput>
  }

  export type MedicalOpinionUpdateManyWithWhereWithoutProfessionalInput = {
    where: MedicalOpinionScalarWhereInput
    data: XOR<MedicalOpinionUpdateManyMutationInput, MedicalOpinionUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type ProfessionalPaymentUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: ProfessionalPaymentWhereUniqueInput
    update: XOR<ProfessionalPaymentUpdateWithoutProfessionalInput, ProfessionalPaymentUncheckedUpdateWithoutProfessionalInput>
    create: XOR<ProfessionalPaymentCreateWithoutProfessionalInput, ProfessionalPaymentUncheckedCreateWithoutProfessionalInput>
  }

  export type ProfessionalPaymentUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: ProfessionalPaymentWhereUniqueInput
    data: XOR<ProfessionalPaymentUpdateWithoutProfessionalInput, ProfessionalPaymentUncheckedUpdateWithoutProfessionalInput>
  }

  export type ProfessionalPaymentUpdateManyWithWhereWithoutProfessionalInput = {
    where: ProfessionalPaymentScalarWhereInput
    data: XOR<ProfessionalPaymentUpdateManyMutationInput, ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type ProfessionalSessionUpsertWithWhereUniqueWithoutProfessionalInput = {
    where: ProfessionalSessionWhereUniqueInput
    update: XOR<ProfessionalSessionUpdateWithoutProfessionalInput, ProfessionalSessionUncheckedUpdateWithoutProfessionalInput>
    create: XOR<ProfessionalSessionCreateWithoutProfessionalInput, ProfessionalSessionUncheckedCreateWithoutProfessionalInput>
  }

  export type ProfessionalSessionUpdateWithWhereUniqueWithoutProfessionalInput = {
    where: ProfessionalSessionWhereUniqueInput
    data: XOR<ProfessionalSessionUpdateWithoutProfessionalInput, ProfessionalSessionUncheckedUpdateWithoutProfessionalInput>
  }

  export type ProfessionalSessionUpdateManyWithWhereWithoutProfessionalInput = {
    where: ProfessionalSessionScalarWhereInput
    data: XOR<ProfessionalSessionUpdateManyMutationInput, ProfessionalSessionUncheckedUpdateManyWithoutProfessionalInput>
  }

  export type ProfessionalSessionScalarWhereInput = {
    AND?: ProfessionalSessionScalarWhereInput | ProfessionalSessionScalarWhereInput[]
    OR?: ProfessionalSessionScalarWhereInput[]
    NOT?: ProfessionalSessionScalarWhereInput | ProfessionalSessionScalarWhereInput[]
    id?: StringFilter<"ProfessionalSession"> | string
    professionalId?: StringFilter<"ProfessionalSession"> | string
    sessionToken?: StringFilter<"ProfessionalSession"> | string
    twoFactorVerified?: BoolFilter<"ProfessionalSession"> | boolean
    expiresAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
    ipAddress?: StringNullableFilter<"ProfessionalSession"> | string | null
    userAgent?: StringNullableFilter<"ProfessionalSession"> | string | null
    metadata?: JsonNullableFilter<"ProfessionalSession">
    createdAt?: DateTimeFilter<"ProfessionalSession"> | Date | string
  }

  export type MedicalProfessionalCreateWithoutProfessionalSessionsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUncheckedCreateWithoutProfessionalSessionsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalCreateOrConnectWithoutProfessionalSessionsInput = {
    where: MedicalProfessionalWhereUniqueInput
    create: XOR<MedicalProfessionalCreateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalSessionsInput>
  }

  export type MedicalProfessionalUpsertWithoutProfessionalSessionsInput = {
    update: XOR<MedicalProfessionalUpdateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedUpdateWithoutProfessionalSessionsInput>
    create: XOR<MedicalProfessionalCreateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalSessionsInput>
    where?: MedicalProfessionalWhereInput
  }

  export type MedicalProfessionalUpdateToOneWithWhereWithoutProfessionalSessionsInput = {
    where?: MedicalProfessionalWhereInput
    data: XOR<MedicalProfessionalUpdateWithoutProfessionalSessionsInput, MedicalProfessionalUncheckedUpdateWithoutProfessionalSessionsInput>
  }

  export type MedicalProfessionalUpdateWithoutProfessionalSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalUncheckedUpdateWithoutProfessionalSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalCaseCreateWithoutCaseAssignmentsInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutCaseAssignmentsInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutCaseAssignmentsInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutCaseAssignmentsInput, MedicalCaseUncheckedCreateWithoutCaseAssignmentsInput>
  }

  export type MedicalProfessionalCreateWithoutCaseAssignmentsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUncheckedCreateWithoutCaseAssignmentsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalCreateOrConnectWithoutCaseAssignmentsInput = {
    where: MedicalProfessionalWhereUniqueInput
    create: XOR<MedicalProfessionalCreateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedCreateWithoutCaseAssignmentsInput>
  }

  export type MedicalCaseUpsertWithoutCaseAssignmentsInput = {
    update: XOR<MedicalCaseUpdateWithoutCaseAssignmentsInput, MedicalCaseUncheckedUpdateWithoutCaseAssignmentsInput>
    create: XOR<MedicalCaseCreateWithoutCaseAssignmentsInput, MedicalCaseUncheckedCreateWithoutCaseAssignmentsInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutCaseAssignmentsInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutCaseAssignmentsInput, MedicalCaseUncheckedUpdateWithoutCaseAssignmentsInput>
  }

  export type MedicalCaseUpdateWithoutCaseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutCaseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalProfessionalUpsertWithoutCaseAssignmentsInput = {
    update: XOR<MedicalProfessionalUpdateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedUpdateWithoutCaseAssignmentsInput>
    create: XOR<MedicalProfessionalCreateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedCreateWithoutCaseAssignmentsInput>
    where?: MedicalProfessionalWhereInput
  }

  export type MedicalProfessionalUpdateToOneWithWhereWithoutCaseAssignmentsInput = {
    where?: MedicalProfessionalWhereInput
    data: XOR<MedicalProfessionalUpdateWithoutCaseAssignmentsInput, MedicalProfessionalUncheckedUpdateWithoutCaseAssignmentsInput>
  }

  export type MedicalProfessionalUpdateWithoutCaseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicalOpinions?: MedicalOpinionUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalUncheckedUpdateWithoutCaseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalCaseCreateWithoutAiAnalysesInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutAiAnalysesInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutAiAnalysesInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutAiAnalysesInput, MedicalCaseUncheckedCreateWithoutAiAnalysesInput>
  }

  export type MedicalCaseUpsertWithoutAiAnalysesInput = {
    update: XOR<MedicalCaseUpdateWithoutAiAnalysesInput, MedicalCaseUncheckedUpdateWithoutAiAnalysesInput>
    create: XOR<MedicalCaseCreateWithoutAiAnalysesInput, MedicalCaseUncheckedCreateWithoutAiAnalysesInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutAiAnalysesInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutAiAnalysesInput, MedicalCaseUncheckedUpdateWithoutAiAnalysesInput>
  }

  export type MedicalCaseUpdateWithoutAiAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutAiAnalysesInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseCreateWithoutMedicalOpinionsInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutMedicalOpinionsInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutMedicalOpinionsInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutMedicalOpinionsInput, MedicalCaseUncheckedCreateWithoutMedicalOpinionsInput>
  }

  export type MedicalProfessionalCreateWithoutMedicalOpinionsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUncheckedCreateWithoutMedicalOpinionsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutProfessionalInput
    professionalPayments?: ProfessionalPaymentUncheckedCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalCreateOrConnectWithoutMedicalOpinionsInput = {
    where: MedicalProfessionalWhereUniqueInput
    create: XOR<MedicalProfessionalCreateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedCreateWithoutMedicalOpinionsInput>
  }

  export type MedicalCaseUpsertWithoutMedicalOpinionsInput = {
    update: XOR<MedicalCaseUpdateWithoutMedicalOpinionsInput, MedicalCaseUncheckedUpdateWithoutMedicalOpinionsInput>
    create: XOR<MedicalCaseCreateWithoutMedicalOpinionsInput, MedicalCaseUncheckedCreateWithoutMedicalOpinionsInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutMedicalOpinionsInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutMedicalOpinionsInput, MedicalCaseUncheckedUpdateWithoutMedicalOpinionsInput>
  }

  export type MedicalCaseUpdateWithoutMedicalOpinionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutMedicalOpinionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalProfessionalUpsertWithoutMedicalOpinionsInput = {
    update: XOR<MedicalProfessionalUpdateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedUpdateWithoutMedicalOpinionsInput>
    create: XOR<MedicalProfessionalCreateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedCreateWithoutMedicalOpinionsInput>
    where?: MedicalProfessionalWhereInput
  }

  export type MedicalProfessionalUpdateToOneWithWhereWithoutMedicalOpinionsInput = {
    where?: MedicalProfessionalWhereInput
    data: XOR<MedicalProfessionalUpdateWithoutMedicalOpinionsInput, MedicalProfessionalUncheckedUpdateWithoutMedicalOpinionsInput>
  }

  export type MedicalProfessionalUpdateWithoutMedicalOpinionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalUncheckedUpdateWithoutMedicalOpinionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalCaseCreateWithoutProfessionalPaymentsInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutCasesInput
    uploadedFiles?: UploadedFileCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseUncheckedCreateWithoutProfessionalPaymentsInput = {
    id?: string
    caseNumber: string
    customerId: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedFiles?: UploadedFileUncheckedCreateNestedManyWithoutCaseInput
    statusHistory?: CaseStatusHistoryUncheckedCreateNestedManyWithoutCaseInput
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutCaseInput
    aiAnalyses?: AIAnalysisUncheckedCreateNestedManyWithoutCaseInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutCaseInput
    questionnaireResponse?: QuestionnaireResponseUncheckedCreateNestedOneWithoutCaseInput
    casePayment?: CasePaymentUncheckedCreateNestedOneWithoutCaseInput
  }

  export type MedicalCaseCreateOrConnectWithoutProfessionalPaymentsInput = {
    where: MedicalCaseWhereUniqueInput
    create: XOR<MedicalCaseCreateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedCreateWithoutProfessionalPaymentsInput>
  }

  export type MedicalProfessionalCreateWithoutProfessionalPaymentsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalUncheckedCreateWithoutProfessionalPaymentsInput = {
    id?: string
    proNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dob: Date | string
    email: string
    phone?: string | null
    nationality?: string | null
    licenseNumber: string
    licenseCountry: string
    licenseExpiry: Date | string
    vetted?: boolean
    level?: $Enums.ProLevel
    cvUrl?: string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice: number
    publications: number
    trialInvolved: boolean
    leadership?: string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: number | null
    hashedPassword?: string | null
    twoFactorMethod?: $Enums.TwoFactorMethod
    twoFactorSecret?: string | null
    profileLastUpdated?: Date | string | null
    codeOfConductAcknowledged?: Date | string | null
    address?: string | null
    billingAddress?: string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: string | null
    billingRate?: number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    caseAssignments?: CaseAssignmentUncheckedCreateNestedManyWithoutProfessionalInput
    medicalOpinions?: MedicalOpinionUncheckedCreateNestedManyWithoutProfessionalInput
    professionalSessions?: ProfessionalSessionUncheckedCreateNestedManyWithoutProfessionalInput
  }

  export type MedicalProfessionalCreateOrConnectWithoutProfessionalPaymentsInput = {
    where: MedicalProfessionalWhereUniqueInput
    create: XOR<MedicalProfessionalCreateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalPaymentsInput>
  }

  export type MedicalCaseUpsertWithoutProfessionalPaymentsInput = {
    update: XOR<MedicalCaseUpdateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedUpdateWithoutProfessionalPaymentsInput>
    create: XOR<MedicalCaseCreateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedCreateWithoutProfessionalPaymentsInput>
    where?: MedicalCaseWhereInput
  }

  export type MedicalCaseUpdateToOneWithWhereWithoutProfessionalPaymentsInput = {
    where?: MedicalCaseWhereInput
    data: XOR<MedicalCaseUpdateWithoutProfessionalPaymentsInput, MedicalCaseUncheckedUpdateWithoutProfessionalPaymentsInput>
  }

  export type MedicalCaseUpdateWithoutProfessionalPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutCasesNestedInput
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutProfessionalPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    customerId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalProfessionalUpsertWithoutProfessionalPaymentsInput = {
    update: XOR<MedicalProfessionalUpdateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedUpdateWithoutProfessionalPaymentsInput>
    create: XOR<MedicalProfessionalCreateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedCreateWithoutProfessionalPaymentsInput>
    where?: MedicalProfessionalWhereInput
  }

  export type MedicalProfessionalUpdateToOneWithWhereWithoutProfessionalPaymentsInput = {
    where?: MedicalProfessionalWhereInput
    data: XOR<MedicalProfessionalUpdateWithoutProfessionalPaymentsInput, MedicalProfessionalUncheckedUpdateWithoutProfessionalPaymentsInput>
  }

  export type MedicalProfessionalUpdateWithoutProfessionalPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUpdateManyWithoutProfessionalNestedInput
  }

  export type MedicalProfessionalUncheckedUpdateWithoutProfessionalPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    proNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    licenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    vetted?: BoolFieldUpdateOperationsInput | boolean
    level?: EnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel
    cvUrl?: NullableStringFieldUpdateOperationsInput | string | null
    documents?: NullableJsonNullValueInput | InputJsonValue
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    yearsPractice?: IntFieldUpdateOperationsInput | number
    publications?: IntFieldUpdateOperationsInput | number
    trialInvolved?: BoolFieldUpdateOperationsInput | boolean
    leadership?: NullableStringFieldUpdateOperationsInput | string | null
    societyMemberships?: NullableJsonNullValueInput | InputJsonValue
    competencyData?: NullableJsonNullValueInput | InputJsonValue
    availability?: NullableJsonNullValueInput | InputJsonValue
    score?: NullableIntFieldUpdateOperationsInput | number | null
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    twoFactorMethod?: EnumTwoFactorMethodFieldUpdateOperationsInput | $Enums.TwoFactorMethod
    twoFactorSecret?: NullableStringFieldUpdateOperationsInput | string | null
    profileLastUpdated?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    codeOfConductAcknowledged?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    billingAddress?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetails?: NullableJsonNullValueInput | InputJsonValue
    vatNumber?: NullableStringFieldUpdateOperationsInput | string | null
    billingRate?: NullableFloatFieldUpdateOperationsInput | number | null
    performanceMetrics?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutProfessionalNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutProfessionalNestedInput
    professionalSessions?: ProfessionalSessionUncheckedUpdateManyWithoutProfessionalNestedInput
  }

  export type CandidateDocumentCreateWithoutCandidateInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
  }

  export type CandidateDocumentUncheckedCreateWithoutCandidateInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
  }

  export type CandidateDocumentCreateOrConnectWithoutCandidateInput = {
    where: CandidateDocumentWhereUniqueInput
    create: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateDocumentCreateManyCandidateInputEnvelope = {
    data: CandidateDocumentCreateManyCandidateInput | CandidateDocumentCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationReviewCreateWithoutCandidateInput = {
    id?: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
  }

  export type ApplicationReviewUncheckedCreateWithoutCandidateInput = {
    id?: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
  }

  export type ApplicationReviewCreateOrConnectWithoutCandidateInput = {
    where: ApplicationReviewWhereUniqueInput
    create: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationReviewCreateManyCandidateInputEnvelope = {
    data: ApplicationReviewCreateManyCandidateInput | ApplicationReviewCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type CandidateDocumentUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateDocumentWhereUniqueInput
    update: XOR<CandidateDocumentUpdateWithoutCandidateInput, CandidateDocumentUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateDocumentCreateWithoutCandidateInput, CandidateDocumentUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateDocumentUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateDocumentWhereUniqueInput
    data: XOR<CandidateDocumentUpdateWithoutCandidateInput, CandidateDocumentUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateDocumentUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateDocumentScalarWhereInput
    data: XOR<CandidateDocumentUpdateManyMutationInput, CandidateDocumentUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateDocumentScalarWhereInput = {
    AND?: CandidateDocumentScalarWhereInput | CandidateDocumentScalarWhereInput[]
    OR?: CandidateDocumentScalarWhereInput[]
    NOT?: CandidateDocumentScalarWhereInput | CandidateDocumentScalarWhereInput[]
    id?: StringFilter<"CandidateDocument"> | string
    candidateId?: StringFilter<"CandidateDocument"> | string
    documentType?: EnumDocumentTypeFilter<"CandidateDocument"> | $Enums.DocumentType
    fileName?: StringFilter<"CandidateDocument"> | string
    originalName?: StringFilter<"CandidateDocument"> | string
    s3Key?: StringFilter<"CandidateDocument"> | string
    mimetype?: StringFilter<"CandidateDocument"> | string
    size?: IntFilter<"CandidateDocument"> | number
    checksum?: StringNullableFilter<"CandidateDocument"> | string | null
    encrypted?: BoolFilter<"CandidateDocument"> | boolean
    uploadedAt?: DateTimeFilter<"CandidateDocument"> | Date | string
  }

  export type ApplicationReviewUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationReviewWhereUniqueInput
    update: XOR<ApplicationReviewUpdateWithoutCandidateInput, ApplicationReviewUncheckedUpdateWithoutCandidateInput>
    create: XOR<ApplicationReviewCreateWithoutCandidateInput, ApplicationReviewUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationReviewUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationReviewWhereUniqueInput
    data: XOR<ApplicationReviewUpdateWithoutCandidateInput, ApplicationReviewUncheckedUpdateWithoutCandidateInput>
  }

  export type ApplicationReviewUpdateManyWithWhereWithoutCandidateInput = {
    where: ApplicationReviewScalarWhereInput
    data: XOR<ApplicationReviewUpdateManyMutationInput, ApplicationReviewUncheckedUpdateManyWithoutCandidateInput>
  }

  export type ApplicationReviewScalarWhereInput = {
    AND?: ApplicationReviewScalarWhereInput | ApplicationReviewScalarWhereInput[]
    OR?: ApplicationReviewScalarWhereInput[]
    NOT?: ApplicationReviewScalarWhereInput | ApplicationReviewScalarWhereInput[]
    id?: StringFilter<"ApplicationReview"> | string
    candidateId?: StringFilter<"ApplicationReview"> | string
    reviewerId?: StringFilter<"ApplicationReview"> | string
    decision?: EnumReviewDecisionFilter<"ApplicationReview"> | $Enums.ReviewDecision
    notes?: StringNullableFilter<"ApplicationReview"> | string | null
    scoreAdjustment?: JsonNullableFilter<"ApplicationReview">
    recommendedLevel?: EnumProLevelNullableFilter<"ApplicationReview"> | $Enums.ProLevel | null
    createdAt?: DateTimeFilter<"ApplicationReview"> | Date | string
  }

  export type ProfessionalCandidateCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ApplicationReviewCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateUncheckedCreateWithoutDocumentsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reviews?: ApplicationReviewUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateCreateOrConnectWithoutDocumentsInput = {
    where: ProfessionalCandidateWhereUniqueInput
    create: XOR<ProfessionalCandidateCreateWithoutDocumentsInput, ProfessionalCandidateUncheckedCreateWithoutDocumentsInput>
  }

  export type ProfessionalCandidateUpsertWithoutDocumentsInput = {
    update: XOR<ProfessionalCandidateUpdateWithoutDocumentsInput, ProfessionalCandidateUncheckedUpdateWithoutDocumentsInput>
    create: XOR<ProfessionalCandidateCreateWithoutDocumentsInput, ProfessionalCandidateUncheckedCreateWithoutDocumentsInput>
    where?: ProfessionalCandidateWhereInput
  }

  export type ProfessionalCandidateUpdateToOneWithWhereWithoutDocumentsInput = {
    where?: ProfessionalCandidateWhereInput
    data: XOR<ProfessionalCandidateUpdateWithoutDocumentsInput, ProfessionalCandidateUncheckedUpdateWithoutDocumentsInput>
  }

  export type ProfessionalCandidateUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ApplicationReviewUpdateManyWithoutCandidateNestedInput
  }

  export type ProfessionalCandidateUncheckedUpdateWithoutDocumentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviews?: ApplicationReviewUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type ProfessionalCandidateCreateWithoutReviewsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: CandidateDocumentCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateUncheckedCreateWithoutReviewsInput = {
    id?: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    nationality: string
    email: string
    phone?: string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    medicalDegreeUploaded?: boolean
    residencyCompleted?: boolean
    fellowshipCompleted?: boolean
    boardCertificationNumber?: string | null
    medicalLicenseNumber: string
    licenseCountry: string
    licenseState?: string | null
    licenseExpiry: Date | string
    certificateGoodStanding?: boolean
    yearsIndependentPractice: number
    currentAffiliation: string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: number | null
    secondOpinionsGiven?: number | null
    peerReviewedPublications?: number
    clinicalTrialInvolvement?: boolean
    clinicalTrialDetails?: string | null
    conferencepresentations?: boolean
    conferenceDetails?: string | null
    teachingRoles?: boolean
    teachingDetails?: string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: string | null
    leadershipRoles?: string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: boolean
    noActiveDisciplinary?: boolean
    dataProtectionAgreed?: boolean
    competencyScore?: number | null
    competencyLevel?: $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: $Enums.CandidateStatus
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    reviewNotes?: string | null
    rejectionReason?: string | null
    approvedToProfessionalId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    documents?: CandidateDocumentUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type ProfessionalCandidateCreateOrConnectWithoutReviewsInput = {
    where: ProfessionalCandidateWhereUniqueInput
    create: XOR<ProfessionalCandidateCreateWithoutReviewsInput, ProfessionalCandidateUncheckedCreateWithoutReviewsInput>
  }

  export type ProfessionalCandidateUpsertWithoutReviewsInput = {
    update: XOR<ProfessionalCandidateUpdateWithoutReviewsInput, ProfessionalCandidateUncheckedUpdateWithoutReviewsInput>
    create: XOR<ProfessionalCandidateCreateWithoutReviewsInput, ProfessionalCandidateUncheckedCreateWithoutReviewsInput>
    where?: ProfessionalCandidateWhereInput
  }

  export type ProfessionalCandidateUpdateToOneWithWhereWithoutReviewsInput = {
    where?: ProfessionalCandidateWhereInput
    data: XOR<ProfessionalCandidateUpdateWithoutReviewsInput, ProfessionalCandidateUncheckedUpdateWithoutReviewsInput>
  }

  export type ProfessionalCandidateUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: CandidateDocumentUpdateManyWithoutCandidateNestedInput
  }

  export type ProfessionalCandidateUncheckedUpdateWithoutReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    nationality?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    medicalDegreeUploaded?: BoolFieldUpdateOperationsInput | boolean
    residencyCompleted?: BoolFieldUpdateOperationsInput | boolean
    fellowshipCompleted?: BoolFieldUpdateOperationsInput | boolean
    boardCertificationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    medicalLicenseNumber?: StringFieldUpdateOperationsInput | string
    licenseCountry?: StringFieldUpdateOperationsInput | string
    licenseState?: NullableStringFieldUpdateOperationsInput | string | null
    licenseExpiry?: DateTimeFieldUpdateOperationsInput | Date | string
    certificateGoodStanding?: BoolFieldUpdateOperationsInput | boolean
    yearsIndependentPractice?: IntFieldUpdateOperationsInput | number
    currentAffiliation?: StringFieldUpdateOperationsInput | string
    subspecialties?: NullableJsonNullValueInput | InputJsonValue
    annualPatientLoad?: NullableIntFieldUpdateOperationsInput | number | null
    secondOpinionsGiven?: NullableIntFieldUpdateOperationsInput | number | null
    peerReviewedPublications?: IntFieldUpdateOperationsInput | number
    clinicalTrialInvolvement?: BoolFieldUpdateOperationsInput | boolean
    clinicalTrialDetails?: NullableStringFieldUpdateOperationsInput | string | null
    conferencepresentations?: BoolFieldUpdateOperationsInput | boolean
    conferenceDetails?: NullableStringFieldUpdateOperationsInput | string | null
    teachingRoles?: BoolFieldUpdateOperationsInput | boolean
    teachingDetails?: NullableStringFieldUpdateOperationsInput | string | null
    oncologySocieties?: NullableJsonNullValueInput | InputJsonValue
    awardsHonors?: NullableStringFieldUpdateOperationsInput | string | null
    leadershipRoles?: NullableStringFieldUpdateOperationsInput | string | null
    professionalReferences?: NullableJsonNullValueInput | InputJsonValue
    malpracticeInsurance?: BoolFieldUpdateOperationsInput | boolean
    noActiveDisciplinary?: BoolFieldUpdateOperationsInput | boolean
    dataProtectionAgreed?: BoolFieldUpdateOperationsInput | boolean
    competencyScore?: NullableFloatFieldUpdateOperationsInput | number | null
    competencyLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    scoreBreakdown?: NullableJsonNullValueInput | InputJsonValue
    applicationStatus?: EnumCandidateStatusFieldUpdateOperationsInput | $Enums.CandidateStatus
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewNotes?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    approvedToProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documents?: CandidateDocumentUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type MedicalCaseCreateManyCustomerInput = {
    id?: string
    caseNumber: string
    firstName: string
    middleName?: string | null
    lastName: string
    dateOfBirth: Date | string
    email: string
    phone?: string | null
    title: string
    description: string
    chiefComplaint?: string | null
    category?: string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    priority?: string
    requestedProfessionalLevel?: string
    talentPool?: string | null
    urgencyReason?: string | null
    submittedAt?: Date | string | null
    reviewStartedAt?: Date | string | null
    completedAt?: Date | string | null
    expiresAt?: Date | string | null
    assignedProfessionalId?: string | null
    assignedAt?: Date | string | null
    qualityScore?: number | null
    completenessScore?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseCreatetagsInput | string[]
    version?: number
    ethnicity?: string | null
    gender?: string | null
    diseaseType?: string | null
    isFirstOccurrence?: boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: string | null
    consentAccepted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerSessionCreateManyCustomerInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    expiresAt: Date | string
    lastActivity?: Date | string
    createdAt?: Date | string
  }

  export type CustomerNotificationCreateManyCustomerInput = {
    id?: string
    type: string
    channel: $Enums.CommunicationChannel
    subject?: string | null
    message: string
    language?: $Enums.Language
    status?: string
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    readAt?: Date | string | null
    errorMessage?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MedicalCaseUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedFiles?: UploadedFileUncheckedUpdateManyWithoutCaseNestedInput
    statusHistory?: CaseStatusHistoryUncheckedUpdateManyWithoutCaseNestedInput
    caseAssignments?: CaseAssignmentUncheckedUpdateManyWithoutCaseNestedInput
    aiAnalyses?: AIAnalysisUncheckedUpdateManyWithoutCaseNestedInput
    medicalOpinions?: MedicalOpinionUncheckedUpdateManyWithoutCaseNestedInput
    professionalPayments?: ProfessionalPaymentUncheckedUpdateManyWithoutCaseNestedInput
    questionnaireResponse?: QuestionnaireResponseUncheckedUpdateOneWithoutCaseNestedInput
    casePayment?: CasePaymentUncheckedUpdateOneWithoutCaseNestedInput
  }

  export type MedicalCaseUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseNumber?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chiefComplaint?: NullableStringFieldUpdateOperationsInput | string | null
    category?: StringFieldUpdateOperationsInput | string
    medicalHistory?: NullableJsonNullValueInput | InputJsonValue
    currentMedications?: NullableJsonNullValueInput | InputJsonValue
    allergies?: NullableJsonNullValueInput | InputJsonValue
    familyHistory?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    requestedProfessionalLevel?: StringFieldUpdateOperationsInput | string
    talentPool?: NullableStringFieldUpdateOperationsInput | string | null
    urgencyReason?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewStartedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedProfessionalId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    qualityScore?: NullableFloatFieldUpdateOperationsInput | number | null
    completenessScore?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    tags?: MedicalCaseUpdatetagsInput | string[]
    version?: IntFieldUpdateOperationsInput | number
    ethnicity?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    diseaseType?: NullableStringFieldUpdateOperationsInput | string | null
    isFirstOccurrence?: NullableBoolFieldUpdateOperationsInput | boolean | null
    geneticFamilyHistory?: NullableJsonNullValueInput | InputJsonValue
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    consentAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerSessionUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastActivity?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationUncheckedUpdateWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerNotificationUncheckedUpdateManyWithoutCustomerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    channel?: EnumCommunicationChannelFieldUpdateOperationsInput | $Enums.CommunicationChannel
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    message?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileCreateManyCaseInput = {
    id?: string
    filename: string
    s3Key: string
    mimetype: string
    size: number
    category: string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: string | null
    encrypted?: boolean
    createdAt?: Date | string
  }

  export type CaseStatusHistoryCreateManyCaseInput = {
    id?: string
    fromStatus?: string | null
    toStatus: string
    reason?: string | null
    notes?: string | null
    changedByType: string
    changedById: string
    createdAt?: Date | string
  }

  export type CaseAssignmentCreateManyCaseInput = {
    id?: string
    professionalId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AIAnalysisCreateManyCaseInput = {
    id?: string
    analysisType: string
    results: JsonNullValueInput | InputJsonValue
    confidence?: number | null
    processingTime?: number | null
    aiProvider?: string | null
    modelVersion?: string | null
    cost?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type MedicalOpinionCreateManyCaseInput = {
    id?: string
    professionalId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentCreateManyCaseInput = {
    id?: string
    professionalId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadedFileUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadedFileUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    metadata?: NullableJsonNullValueInput | InputJsonValue
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseStatusHistoryUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromStatus?: NullableStringFieldUpdateOperationsInput | string | null
    toStatus?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    changedByType?: StringFieldUpdateOperationsInput | string
    changedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseAssignmentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    professional?: MedicalProfessionalUpdateOneRequiredWithoutCaseAssignmentsNestedInput
  }

  export type CaseAssignmentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type AIAnalysisUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIAnalysisUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIAnalysisUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: JsonNullValueInput | InputJsonValue
    confidence?: NullableFloatFieldUpdateOperationsInput | number | null
    processingTime?: NullableIntFieldUpdateOperationsInput | number | null
    aiProvider?: NullableStringFieldUpdateOperationsInput | string | null
    modelVersion?: NullableStringFieldUpdateOperationsInput | string | null
    cost?: NullableFloatFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professional?: MedicalProfessionalUpdateOneRequiredWithoutMedicalOpinionsNestedInput
  }

  export type MedicalOpinionUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    professional?: MedicalProfessionalUpdateOneRequiredWithoutProfessionalPaymentsNestedInput
  }

  export type ProfessionalPaymentUncheckedUpdateWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentUncheckedUpdateManyWithoutCaseInput = {
    id?: StringFieldUpdateOperationsInput | string
    professionalId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CaseAssignmentCreateManyProfessionalInput = {
    id?: string
    caseId: string
    status?: string
    assignedAt?: Date | string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    estimatedDuration?: number | null
    actualDuration?: number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MedicalOpinionCreateManyProfessionalInput = {
    id?: string
    caseId: string
    content: string
    status?: string
    version?: number
    digitalSignature?: string | null
    reviewedBy?: string | null
    reviewedAt?: Date | string | null
    publishedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalPaymentCreateManyProfessionalInput = {
    id?: string
    caseId: string
    amount: number
    currency?: string
    status?: string
    paymentMethod?: string | null
    transactionId?: string | null
    processedAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfessionalSessionCreateManyProfessionalInput = {
    id?: string
    sessionToken: string
    twoFactorVerified?: boolean
    expiresAt: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CaseAssignmentUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    case?: MedicalCaseUpdateOneRequiredWithoutCaseAssignmentsNestedInput
  }

  export type CaseAssignmentUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type CaseAssignmentUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MedicalOpinionUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutMedicalOpinionsNestedInput
  }

  export type MedicalOpinionUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalOpinionUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    version?: IntFieldUpdateOperationsInput | number
    digitalSignature?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    publishedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    case?: MedicalCaseUpdateOneRequiredWithoutProfessionalPaymentsNestedInput
  }

  export type ProfessionalPaymentUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalPaymentUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    caseId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    paymentMethod?: NullableStringFieldUpdateOperationsInput | string | null
    transactionId?: NullableStringFieldUpdateOperationsInput | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionUncheckedUpdateWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfessionalSessionUncheckedUpdateManyWithoutProfessionalInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    twoFactorVerified?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentCreateManyCandidateInput = {
    id?: string
    documentType: $Enums.DocumentType
    fileName: string
    originalName: string
    s3Key: string
    mimetype: string
    size: number
    checksum?: string | null
    encrypted?: boolean
    uploadedAt?: Date | string
  }

  export type ApplicationReviewCreateManyCandidateInput = {
    id?: string
    reviewerId: string
    decision: $Enums.ReviewDecision
    notes?: string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: $Enums.ProLevel | null
    createdAt?: Date | string
  }

  export type CandidateDocumentUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateDocumentUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    s3Key?: StringFieldUpdateOperationsInput | string
    mimetype?: StringFieldUpdateOperationsInput | string
    size?: IntFieldUpdateOperationsInput | number
    checksum?: NullableStringFieldUpdateOperationsInput | string | null
    encrypted?: BoolFieldUpdateOperationsInput | boolean
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationReviewUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reviewerId?: StringFieldUpdateOperationsInput | string
    decision?: EnumReviewDecisionFieldUpdateOperationsInput | $Enums.ReviewDecision
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    scoreAdjustment?: NullableJsonNullValueInput | InputJsonValue
    recommendedLevel?: NullableEnumProLevelFieldUpdateOperationsInput | $Enums.ProLevel | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}