// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CommunicationChannel {
  EMAIL
  SMS
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  hashedPassword String
  customer       Customer?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Customer {
  id               String               @id @default(cuid())
  firstName        String
  middleName       String?
  lastName         String
  dateOfBirth      DateTime
  email            String               @unique
  phone            String?
  preferredChannel CommunicationChannel @default(EMAIL)
  user             User?                @relation(fields: [userId], references: [id])
  userId           String?              @unique
  cases            Case[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model TempSubmission {
  id        String   @id @default(cuid())
  payload   Json // files (staged S3 keys), context, partial PII
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Case {
  id                   String                @id @default(cuid())
  caseNumber           String                @unique
  firstName            String
  middleName           String?
  lastName             String
  dateOfBirth          DateTime
  email                String
  phone                String?
  ethnicity            String?
  gender               String?
  diseaseType          String?
  isFirstOccurrence    Boolean?
  geneticFamilyHistory String? // JSON string
  paymentId            String?
  consentAccepted      Boolean
  customerId           String
  customer             Customer              @relation(fields: [customerId], references: [id])
  uploadedFiles        UploadedFile[]
  caseAssignments      CaseAssignment[]
  aiAnalyses           AIAnalysis[]
  medicalOpinions      MedicalOpinion[]
  professionalPayments ProfessionalPayment[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model UploadedFile {
  id        String   @id @default(cuid())
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id])
  filename  String
  s3Key     String
  mimetype  String
  size      Int
  category  String
  createdAt DateTime @default(now())
}

enum ProLevel {
  JUNIOR
  SENIOR
  EXPERT
  DISTINGUISHED
}

model MedicalProfessional {
  id                        String                @id @default(cuid())
  proNumber                 String                @unique
  firstName                 String
  middleName                String?
  lastName                  String
  dob                       DateTime
  email                     String                @unique
  phone                     String?
  nationality               String?
  licenseNumber             String
  licenseCountry            String
  licenseExpiry             DateTime
  vetted                    Boolean               @default(false)
  level                     ProLevel              @default(JUNIOR)
  cvUrl                     String?
  documents                 Json? // array of uploaded docs
  subspecialties            String? // JSON string array
  yearsPractice             Int
  publications              Int
  trialInvolved             Boolean
  leadership                String?
  societyMemberships        String? // JSON string array
  score                     Int? // computed score
  // Authentication fields
  hashedPassword            String?
  twoFactorMethod           TwoFactorMethod       @default(EMAIL)
  twoFactorSecret           String?
  // Profile management
  profileLastUpdated        DateTime?
  codeOfConductAcknowledged DateTime?
  // Contact & billing
  address                   String?
  billingAddress            String?
  bankDetails               Json?
  vatNumber                 String?
  billingRate               Float?
  caseAssignments           CaseAssignment[]
  medicalOpinions           MedicalOpinion[]
  professionalPayments      ProfessionalPayment[]
  professionalSessions      ProfessionalSession[]
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
}

model ProfessionalSession {
  id                String              @id @default(cuid())
  professionalId    String
  professional      MedicalProfessional @relation(fields: [professionalId], references: [id])
  sessionToken      String              @unique
  twoFactorVerified Boolean             @default(false)
  expiresAt         DateTime
  createdAt         DateTime            @default(now())
}

enum TwoFactorMethod {
  EMAIL
  SMS
}

model CaseAssignment {
  id             String              @id @default(cuid())
  caseId         String
  case           Case                @relation(fields: [caseId], references: [id])
  professionalId String
  professional   MedicalProfessional @relation(fields: [professionalId], references: [id])
  status         String              @default("assigned") // assigned, in_progress, completed
  assignedAt     DateTime            @default(now())
  completedAt    DateTime?
}

model AIAnalysis {
  id           String   @id @default(cuid())
  caseId       String
  case         Case     @relation(fields: [caseId], references: [id])
  analysisType String
  results      String // JSON string
  createdAt    DateTime @default(now())
}

model MedicalOpinion {
  id             String              @id @default(cuid())
  caseId         String
  case           Case                @relation(fields: [caseId], references: [id])
  professionalId String
  professional   MedicalProfessional @relation(fields: [professionalId], references: [id])
  content        String
  status         String              @default("draft") // draft, peer_review, approved, final
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

model ProfessionalPayment {
  id             String              @id @default(cuid())
  caseId         String
  case           Case                @relation(fields: [caseId], references: [id])
  professionalId String
  professional   MedicalProfessional @relation(fields: [professionalId], references: [id])
  amount         Float
  status         String              @default("pending") // pending, paid, failed
  createdAt      DateTime            @default(now())
}

model Admin {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  role           String   @default("admin")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
